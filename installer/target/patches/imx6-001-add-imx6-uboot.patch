--- /dev/null	2014-12-17 07:02:53.340009124 +0000
+++ a/uboot-patches/uboot-add-imx6.patch	2014-12-17 12:50:24.784057458 +0000
@@ -0,0 +1,13352 @@
+diff -uNr u-boot-2013.10-rc4/arch/arm/cpu/armv7/Makefile u-boot-imx6/arch/arm/cpu/armv7/Makefile
+--- u-boot-2013.10-rc4/arch/arm/cpu/armv7/Makefile	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/cpu/armv7/Makefile	2014-12-17 09:31:33.834049845 +0000
+@@ -20,6 +20,11 @@
+ SOBJS	+= lowlevel_init.o
+ endif
+ 
++ifneq ($(CONFIG_ARMV7_NONSEC)$(CONFIG_ARMV7_VIRT),)
++SOBJS	+= nonsec_virt.o
++COBJS	+= virt-v7.o
++endif
++
+ SRCS	:= $(START:.o=.S) $(COBJS:.o=.c)
+ OBJS	:= $(addprefix $(obj),$(COBJS) $(SOBJS))
+ START	:= $(addprefix $(obj),$(START))
+diff -uNr u-boot-2013.10-rc4/arch/arm/cpu/armv7/mx6/clock.c u-boot-imx6/arch/arm/cpu/armv7/mx6/clock.c
+--- u-boot-2013.10-rc4/arch/arm/cpu/armv7/mx6/clock.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/cpu/armv7/mx6/clock.c	2014-12-17 09:31:33.842049650 +0000
+@@ -5,6 +5,7 @@
+  */
+ 
+ #include <common.h>
++#include <div64.h>
+ #include <asm/io.h>
+ #include <asm/errno.h>
+ #include <asm/arch/imx-regs.h>
+@@ -93,13 +94,39 @@
+ 	case PLL_ENET:
+ 		div = __raw_readl(&imx_ccm->analog_pll_enet);
+ 		div &= BM_ANADIG_PLL_ENET_DIV_SELECT;
+-
+-		return (div == 3 ? 125000000 : 25000000 * (div << 1));
++		if (div == 0) return 25000000;
++		else return (div == 3 ?   125000000 : 25000000 * (div << 1));
+ 	default:
+ 		return 0;
+ 	}
+ 	/* NOTREACHED */
+ }
++static u32 mxc_get_pll_pfd(enum pll_clocks pll, int pfd_num)
++{
++	u32 div;
++	u64 freq;
++
++	switch (pll) {
++	case PLL_BUS:
++		if (pfd_num == 3) {
++			/* No PFD3 on PPL2 */
++			return 0;
++		}
++		div = __raw_readl(&imx_ccm->analog_pfd_528);
++		freq = (u64)decode_pll(PLL_BUS, MXC_HCLK);
++		break;
++	case PLL_USBOTG:
++		div = __raw_readl(&imx_ccm->analog_pfd_480);
++		freq = (u64)decode_pll(PLL_USBOTG, MXC_HCLK);
++		break;
++	default:
++		/* No PFD on other PLL					     */
++		return 0;
++	}
++
++	return lldiv((freq * 18), ((div & ANATOP_PFD_FRAC_MASK(pfd_num)) >>
++			      ANATOP_PFD_FRAC_SHIFT(pfd_num)));
++}
+ 
+ static u32 get_mcu_main_clk(void)
+ {
+@@ -144,13 +171,14 @@
+ 			freq = decode_pll(PLL_BUS, MXC_HCLK);
+ 			break;
+ 		case 1:
+-			freq = PLL2_PFD2_FREQ;
++			freq = mxc_get_pll_pfd(PLL_BUS, 2);
+ 			break;
+ 		case 2:
+-			freq = PLL2_PFD0_FREQ;
++			freq = mxc_get_pll_pfd(PLL_BUS, 0);
+ 			break;
+ 		case 3:
+-			freq = PLL2_PFD2_DIV_FREQ;
++			/* static / 2 divider */
++			freq = mxc_get_pll_pfd(PLL_BUS, 2) / 2;
+ 			break;
+ 		default:
+ 			break;
+@@ -184,7 +212,7 @@
+ static u32 get_uart_clk(void)
+ {
+ 	u32 reg, uart_podf;
+-	u32 freq = PLL3_80M;
++	u32 freq = decode_pll(PLL_USBOTG, MXC_HCLK) / 6; /* static divider */
+ 	reg = __raw_readl(&imx_ccm->cscdr1);
+ #ifdef CONFIG_MX6SL
+ 	if (reg & MXC_CCM_CSCDR1_UART_CLK_SEL)
+@@ -204,7 +232,7 @@
+ 	reg &= MXC_CCM_CSCDR2_ECSPI_CLK_PODF_MASK;
+ 	cspi_podf = reg >> MXC_CCM_CSCDR2_ECSPI_CLK_PODF_OFFSET;
+ 
+-	return	PLL3_60M / (cspi_podf + 1);
++	return	decode_pll(PLL_USBOTG, MXC_HCLK) / (8 * (cspi_podf + 1));
+ }
+ 
+ static u32 get_axi_clk(void)
+@@ -217,9 +245,9 @@
+ 
+ 	if (cbcdr & MXC_CCM_CBCDR_AXI_SEL) {
+ 		if (cbcdr & MXC_CCM_CBCDR_AXI_ALT_SEL)
+-			root_freq = PLL2_PFD2_FREQ;
++			root_freq = mxc_get_pll_pfd(PLL_BUS, 2);
+ 		else
+-			root_freq = PLL3_PFD1_FREQ;
++			root_freq = mxc_get_pll_pfd(PLL_USBOTG, 1);
+ 	} else
+ 		root_freq = get_periph_clk();
+ 
+@@ -244,10 +272,10 @@
+ 		root_freq = decode_pll(PLL_USBOTG, MXC_HCLK);
+ 		break;
+ 	case 2:
+-		root_freq = PLL2_PFD2_FREQ;
++		root_freq =  mxc_get_pll_pfd(PLL_BUS, 2);
+ 		break;
+ 	case 3:
+-		root_freq = PLL2_PFD0_FREQ;
++		root_freq =  mxc_get_pll_pfd(PLL_BUS, 0);
+ 		break;
+ 	}
+ 
+@@ -270,13 +298,14 @@
+ 		freq = decode_pll(PLL_BUS, MXC_HCLK);
+ 		break;
+ 	case 1:
+-		freq = PLL2_PFD2_FREQ;
++		freq = mxc_get_pll_pfd(PLL_BUS, 2);
+ 		break;
+ 	case 2:
+-		freq = PLL2_PFD0_FREQ;
++		freq = mxc_get_pll_pfd(PLL_BUS, 0);
+ 		break;
+ 	case 3:
+-		freq = PLL2_PFD2_DIV_FREQ;
++		/* static / 2 divider */
++		freq =  mxc_get_pll_pfd(PLL_BUS, 2) / 2;
+ 	}
+ 
+ 	return freq / (podf + 1);
+@@ -359,9 +388,9 @@
+ 	}
+ 
+ 	if (clk_sel)
+-		root_freq = PLL2_PFD0_FREQ;
++		root_freq = mxc_get_pll_pfd(PLL_BUS, 0);
+ 	else
+-		root_freq = PLL2_PFD2_FREQ;
++		root_freq = mxc_get_pll_pfd(PLL_BUS, 2);
+ 
+ 	return root_freq / (usdhc_podf + 1);
+ }
+diff -uNr u-boot-2013.10-rc4/arch/arm/cpu/armv7/mx6/u-boot-spl.lds u-boot-imx6/arch/arm/cpu/armv7/mx6/u-boot-spl.lds
+--- u-boot-2013.10-rc4/arch/arm/cpu/armv7/mx6/u-boot-spl.lds	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/arch/arm/cpu/armv7/mx6/u-boot-spl.lds	2014-12-17 09:31:33.842049650 +0000
+@@ -0,0 +1,47 @@
++/*
++ * (C) Copyright 2002
++ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
++ *
++ * (C) Copyright 2010
++ * Texas Instruments, <www.ti.com>
++ *	Aneesh V <aneesh@ti.com>
++ *
++ * SPDX-License-Identifier:	GPL-2.0+
++ */
++
++MEMORY { .sram : ORIGIN = CONFIG_SPL_TEXT_BASE,\
++		LENGTH = CONFIG_SPL_MAX_SIZE }
++MEMORY { .sdram : ORIGIN = CONFIG_SPL_BSS_START_ADDR, \
++		LENGTH = CONFIG_SPL_BSS_MAX_SIZE }
++
++OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
++OUTPUT_ARCH(arm)
++ENTRY(_start)
++SECTIONS
++{
++	.text      :
++	{
++		__start = .;
++		arch/arm/cpu/armv7/start.o	(.text*)
++		*(.text*)
++	} >.sram
++
++	. = ALIGN(4);
++	.rodata : { *(SORT_BY_ALIGNMENT(.rodata*)) } >.sram
++
++	. = ALIGN(4);
++	.data : { *(SORT_BY_ALIGNMENT(.data*)) } >.sram
++
++	. = ALIGN(4);
++	__image_copy_end = .;
++	_end = .;
++
++	.bss :
++	{
++		. = ALIGN(4);
++		__bss_start = .;
++		*(.bss*)
++		. = ALIGN(4);
++		__bss_end = .;
++	} >.sdram
++}
+diff -uNr u-boot-2013.10-rc4/arch/arm/cpu/armv7/nonsec_virt.S u-boot-imx6/arch/arm/cpu/armv7/nonsec_virt.S
+--- u-boot-2013.10-rc4/arch/arm/cpu/armv7/nonsec_virt.S	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/arch/arm/cpu/armv7/nonsec_virt.S	2014-12-17 09:31:33.842049650 +0000
+@@ -0,0 +1,208 @@
++/*
++ * code for switching cores into non-secure state and into HYP mode
++ *
++ * Copyright (c) 2013	Andre Przywara <andre.przywara@linaro.org>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License, or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not, write to the Free Software
++ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
++ * MA 02111-1307 USA
++ */
++
++#include <config.h>
++#include <linux/linkage.h>
++#include <asm/gic.h>
++#include <asm/armv7.h>
++
++.arch_extension sec
++.arch_extension virt
++
++/* the vector table for secure state and HYP mode */
++_monitor_vectors:
++	.word 0	/* reset */
++	.word 0 /* undef */
++	adr pc, _secure_monitor
++	.word 0
++	.word 0
++	adr pc, _hyp_trap
++	.word 0
++	.word 0
++
++/*
++ * secure monitor handler
++ * U-boot calls this "software interrupt" in start.S
++ * This is executed on a "smc" instruction, we use a "smc #0" to switch
++ * to non-secure state.
++ * We use only r0 and r1 here, due to constraints in the caller.
++ */
++	.align	5
++_secure_monitor:
++	mrc	p15, 0, r1, c1, c1, 0		@ read SCR
++	bic	r1, r1, #0x4e			@ clear IRQ, FIQ, EA, nET bits
++	orr	r1, r1, #0x31			@ enable NS, AW, FW bits
++
++#ifdef CONFIG_ARMV7_VIRT
++	mrc	p15, 0, r0, c0, c1, 1		@ read ID_PFR1
++	and	r0, r0, #CPUID_ARM_VIRT_MASK	@ mask virtualization bits
++	cmp	r0, #(1 << CPUID_ARM_VIRT_SHIFT)
++	orreq	r1, r1, #0x100			@ allow HVC instruction
++#endif
++
++	mcr	p15, 0, r1, c1, c1, 0		@ write SCR (with NS bit set)
++
++#ifdef CONFIG_ARMV7_VIRT
++	mrceq	p15, 0, r0, c12, c0, 1		@ get MVBAR value
++	mcreq	p15, 4, r0, c12, c0, 0		@ write HVBAR
++#endif
++
++	movs	pc, lr				@ return to non-secure SVC
++
++_hyp_trap:
++	mrs	lr, elr_hyp	@ for older asm: .byte 0x00, 0xe3, 0x0e, 0xe1
++	mov pc, lr				@ do no switch modes, but
++						@ return to caller
++
++/*
++ * Secondary CPUs start here and call the code for the core specific parts
++ * of the non-secure and HYP mode transition. The GIC distributor specific
++ * code has already been executed by a C function before.
++ * Then they go back to wfi and wait to be woken up by the kernel again.
++ */
++ENTRY(_smp_pen)
++	mrs	r0, cpsr
++	orr	r0, r0, #0xc0
++	msr	cpsr, r0			@ disable interrupts
++	ldr	r1, =_start
++	mcr	p15, 0, r1, c12, c0, 0		@ set VBAR
++
++	bl	_nonsec_init
++	mov	r12, r0				@ save GICC address
++#ifdef CONFIG_ARMV7_VIRT
++	bl	_switch_to_hyp
++#endif
++
++	ldr	r1, [r12, #GICC_IAR]		@ acknowledge IPI
++	str	r1, [r12, #GICC_EOIR]		@ signal end of interrupt
++
++	adr	r0, _smp_pen			@ do not use this address again
++	b	smp_waitloop			@ wait for IPIs, board specific
++ENDPROC(_smp_pen)
++
++/*
++ * Switch a core to non-secure state.
++ *
++ *  1. initialize the GIC per-core interface
++ *  2. allow coprocessor access in non-secure modes
++ *  3. switch the cpu mode (by calling "smc #0")
++ *
++ * Called from smp_pen by secondary cores and directly by the BSP.
++ * Do not assume that the stack is available and only use registers
++ * r0-r3 and r12.
++ *
++ * PERIPHBASE is used to get the GIC address. This could be 40 bits long,
++ * though, but we check this in C before calling this function.
++ */
++ENTRY(_nonsec_init)
++#ifdef CONFIG_ARM_GIC_BASE_ADDRESS
++	ldr	r2, =CONFIG_ARM_GIC_BASE_ADDRESS
++#else
++	mrc	p15, 4, r2, c15, c0, 0		@ read CBAR
++	bfc	r2, #0, #15			@ clear reserved bits
++#endif
++	add	r3, r2, #GIC_DIST_OFFSET	@ GIC dist i/f offset
++	mvn	r1, #0				@ all bits to 1
++	str	r1, [r3, #GICD_IGROUPRn]	@ allow private interrupts
++
++	mrc	p15, 0, r0, c0, c0, 0		@ read MIDR
++	ldr	r1, =MIDR_PRIMARY_PART_MASK
++	and	r0, r0, r1			@ mask out variant and revision
++
++	ldr	r1, =MIDR_CORTEX_A7_R0P0 & MIDR_PRIMARY_PART_MASK
++	cmp	r0, r1				@ check for Cortex-A7
++
++	ldr	r1, =MIDR_CORTEX_A15_R0P0 & MIDR_PRIMARY_PART_MASK
++	cmpne	r0, r1				@ check for Cortex-A15
++
++	movne	r1, #GIC_CPU_OFFSET_A9		@ GIC CPU offset for A9
++	moveq	r1, #GIC_CPU_OFFSET_A15		@ GIC CPU offset for A15/A7
++	add	r3, r2, r1			@ r3 = GIC CPU i/f addr
++
++	mov	r1, #1				@ set GICC_CTLR[enable]
++	str	r1, [r3, #GICC_CTLR]		@ and clear all other bits
++	mov	r1, #0xff
++	str	r1, [r3, #GICC_PMR]		@ set priority mask register
++
++	movw	r1, #0x3fff
++	movt	r1, #0x0006
++	mcr	p15, 0, r1, c1, c1, 2		@ NSACR = all copros to non-sec
++
++/* The CNTFRQ register of the generic timer needs to be
++ * programmed in secure state. Some primary bootloaders / firmware
++ * omit this, so if the frequency is provided in the configuration,
++ * we do this here instead.
++ * But first check if we have the generic timer.
++ */
++#ifdef CONFIG_SYS_CLK_FREQ
++	mrc	p15, 0, r0, c0, c1, 1		@ read ID_PFR1
++	and	r0, r0, #CPUID_ARM_GENTIMER_MASK	@ mask arch timer bits
++	cmp	r0, #(1 << CPUID_ARM_GENTIMER_SHIFT)
++	ldreq	r1, =CONFIG_SYS_CLK_FREQ
++	mcreq	p15, 0, r1, c14, c0, 0		@ write CNTFRQ
++#endif
++
++	adr	r1, _monitor_vectors
++	mcr	p15, 0, r1, c12, c0, 1		@ set MVBAR to secure vectors
++
++	mrc	p15, 0, ip, c12, c0, 0		@ save secure copy of VBAR
++
++	isb
++	smc	#0				@ call into MONITOR mode
++
++	mcr	p15, 0, ip, c12, c0, 0		@ write non-secure copy of VBAR
++
++	mov	r1, #1
++	str	r1, [r3, #GICC_CTLR]		@ enable non-secure CPU i/f
++	add	r2, r2, #GIC_DIST_OFFSET
++	str	r1, [r2, #GICD_CTLR]		@ allow private interrupts
++
++	mov	r0, r3				@ return GICC address
++
++	bx	lr
++ENDPROC(_nonsec_init)
++
++#ifdef CONFIG_SMP_PEN_ADDR
++/* void __weak smp_waitloop(unsigned previous_address); */
++ENTRY(smp_waitloop)
++	wfi
++	ldr	r1, =CONFIG_SMP_PEN_ADDR	@ load start address
++	ldr	r1, [r1]
++	cmp	r0, r1			@ make sure we dont execute this code
++	beq	smp_waitloop		@ again (due to a spurious wakeup)
++	mov	pc, r1
++ENDPROC(smp_waitloop)
++.weak smp_waitloop
++#endif
++
++ENTRY(_switch_to_hyp)
++	mov	r0, lr
++	mov	r1, sp				@ save SVC copy of LR and SP
++	isb
++	hvc #0			 @ for older asm: .byte 0x70, 0x00, 0x40, 0xe1
++	mov	sp, r1
++	mov	lr, r0				@ restore SVC copy of LR and SP
++
++	bx	lr
++ENDPROC(_switch_to_hyp)
+diff -uNr u-boot-2013.10-rc4/arch/arm/cpu/armv7/virt-v7.c u-boot-imx6/arch/arm/cpu/armv7/virt-v7.c
+--- u-boot-2013.10-rc4/arch/arm/cpu/armv7/virt-v7.c	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/arch/arm/cpu/armv7/virt-v7.c	2014-12-17 09:31:33.854049358 +0000
+@@ -0,0 +1,173 @@
++/*
++ * (C) Copyright 2013
++ * Andre Przywara, Linaro
++ *
++ * Routines to transition ARMv7 processors from secure into non-secure state
++ * and from non-secure SVC into HYP mode
++ * needed to enable ARMv7 virtualization for current hypervisors
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License, or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not, write to the Free Software
++ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
++ * MA 02111-1307 USA
++ */
++
++#include <common.h>
++#include <asm/armv7.h>
++#include <asm/gic.h>
++#include <asm/io.h>
++
++unsigned long gic_dist_addr;
++
++static unsigned int read_cpsr(void)
++{
++	unsigned int reg;
++
++	asm volatile ("mrs %0, cpsr\n" : "=r" (reg));
++	return reg;
++}
++
++static unsigned int read_id_pfr1(void)
++{
++	unsigned int reg;
++
++	asm("mrc p15, 0, %0, c0, c1, 1\n" : "=r"(reg));
++	return reg;
++}
++
++static unsigned long get_gicd_base_address(void)
++{
++#ifdef CONFIG_ARM_GIC_BASE_ADDRESS
++	return CONFIG_ARM_GIC_BASE_ADDRESS + GIC_DIST_OFFSET;
++#else
++	unsigned midr;
++	unsigned periphbase;
++
++	/* check whether we are an Cortex-A15 or A7.
++	 * The actual HYP switch should work with all CPUs supporting
++	 * the virtualization extension, but we need the GIC address,
++	 * which we know only for sure for those two CPUs.
++	 */
++	asm("mrc p15, 0, %0, c0, c0, 0\n" : "=r"(midr));
++	switch (midr & MIDR_PRIMARY_PART_MASK) {
++	case MIDR_CORTEX_A9_R0P1:
++	case MIDR_CORTEX_A15_R0P0:
++	case MIDR_CORTEX_A7_R0P0:
++		break;
++	default:
++		printf("nonsec: could not determine GIC address.\n");
++		return -1;
++	}
++
++	/* get the GIC base address from the CBAR register */
++	asm("mrc p15, 4, %0, c15, c0, 0\n" : "=r" (periphbase));
++
++	/* the PERIPHBASE can be mapped above 4 GB (lower 8 bits used to
++	 * encode this). Bail out here since we cannot access this without
++	 * enabling paging.
++	 */
++	if ((periphbase & 0xff) != 0) {
++		printf("nonsec: PERIPHBASE is above 4 GB, no access.\n");
++		return -1;
++	}
++
++	return (periphbase & CBAR_MASK) + GIC_DIST_OFFSET;
++#endif
++}
++
++static void kick_secondary_cpus_gic(unsigned long gicdaddr)
++{
++	/* kick all CPUs (except this one) by writing to GICD_SGIR */
++	writel(1U << 24, gicdaddr + GICD_SGIR);
++}
++
++void __weak smp_kick_all_cpus(void)
++{
++	kick_secondary_cpus_gic(gic_dist_addr);
++}
++
++int armv7_switch_hyp(void)
++{
++	unsigned int reg;
++
++	/* check whether we are in HYP mode already */
++	if ((read_cpsr() & 0x1f) == 0x1a) {
++		debug("CPU already in HYP mode\n");
++		return 0;
++	}
++
++	/* check whether the CPU supports the virtualization extensions */
++	reg = read_id_pfr1();
++	if ((reg & CPUID_ARM_VIRT_MASK) != 1 << CPUID_ARM_VIRT_SHIFT) {
++		printf("HYP mode: Virtualization extensions not implemented.\n");
++		return -1;
++	}
++
++	/* call the HYP switching code on this CPU also */
++	_switch_to_hyp();
++
++	if ((read_cpsr() & 0x1F) != 0x1a) {
++		printf("HYP mode: switch not successful.\n");
++		return -1;
++	}
++
++	return 0;
++}
++
++int armv7_switch_nonsec(void)
++{
++	unsigned int reg;
++	unsigned itlinesnr, i;
++
++	/* check whether the CPU supports the security extensions */
++	reg = read_id_pfr1();
++	if ((reg & 0xF0) == 0) {
++		printf("nonsec: Security extensions not implemented.\n");
++		return -1;
++	}
++
++	/* the SCR register will be set directly in the monitor mode handler,
++	 * according to the spec one should not tinker with it in secure state
++	 * in SVC mode. Do not try to read it once in non-secure state,
++	 * any access to it will trap.
++	 */
++
++	gic_dist_addr = get_gicd_base_address();
++	if (gic_dist_addr == -1)
++		return -1;
++
++	/* enable the GIC distributor */
++	writel(readl(gic_dist_addr + GICD_CTLR) | 0x03,
++	       gic_dist_addr + GICD_CTLR);
++
++	/* TYPER[4:0] contains an encoded number of available interrupts */
++	itlinesnr = readl(gic_dist_addr + GICD_TYPER) & 0x1f;
++
++	/* set all bits in the GIC group registers to one to allow access
++	 * from non-secure state. The first 32 interrupts are private per
++	 * CPU and will be set later when enabling the GIC for each core
++	 */
++	for (i = 1; i <= itlinesnr; i++)
++		writel((unsigned)-1, gic_dist_addr + GICD_IGROUPRn + 4 * i);
++
++	smp_set_core_boot_addr((unsigned long)_smp_pen, -1);
++	smp_kick_all_cpus();
++
++	/* call the non-sec switching code on this CPU also */
++	_nonsec_init();
++
++	return 0;
++}
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/crm_regs.h u-boot-imx6/arch/arm/include/asm/arch-mx6/crm_regs.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/crm_regs.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/crm_regs.h	2014-12-17 09:31:33.878048771 +0000
+@@ -890,15 +890,4 @@
+ #define BF_ANADIG_PFD_528_PFD0_FRAC(v)  \
+ 	(((v) << 0) & BM_ANADIG_PFD_528_PFD0_FRAC)
+ 
+-#define PLL2_PFD0_FREQ		352000000
+-#define PLL2_PFD1_FREQ		594000000
+-#define PLL2_PFD2_FREQ		396000000
+-#define PLL2_PFD2_DIV_FREQ	200000000
+-#define PLL3_PFD0_FREQ		720000000
+-#define PLL3_PFD1_FREQ		540000000
+-#define PLL3_PFD2_FREQ		508200000
+-#define PLL3_PFD3_FREQ		454700000
+-#define PLL3_80M		80000000
+-#define PLL3_60M		60000000
+-
+ #endif /*__ARCH_ARM_MACH_MX6_CCM_REGS_H__ */
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/imx-regs.h u-boot-imx6/arch/arm/include/asm/arch-mx6/imx-regs.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/imx-regs.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/imx-regs.h	2014-12-17 09:31:33.878048771 +0000
+@@ -7,6 +7,10 @@
+ #ifndef __ASM_ARCH_MX6_IMX_REGS_H__
+ #define __ASM_ARCH_MX6_IMX_REGS_H__
+ 
++#define __REG(x)        (*((volatile u32 *)(x)))
++#define __REG16(x)      (*((volatile u16 *)(x)))
++#define __REG8(x)       (*((volatile u8 *)(x)))
++
+ #define ARCH_MXC
+ 
+ #define CONFIG_SYS_CACHELINE_SIZE	32
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6_ddr_regs.h u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6_ddr_regs.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6_ddr_regs.h	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6_ddr_regs.h	2014-12-17 09:31:33.878048771 +0000
+@@ -0,0 +1,165 @@
++/*
++ * Copyright (C) 2013 TechNexion Inc.
++ *
++ * Author: Edward Lin <linuxfae@technexion.com>
++ *
++ * SPDX-License-Identifier:	GPL-2.0+
++ */
++#ifndef __ASM_ARCH_MX6_DDR_REGS_H__
++#define __ASM_ARCH_MX6_DDR_REGS_H__
++
++
++/* MMDC P0/P1 Registers */
++struct mmdc_p_regs {
++	u32 mdctl;
++	u32 mdpdc;
++	u32 mdotc;
++	u32 mdcfg0;
++	u32 mdcfg1;
++	u32 mdcfg2;
++	u32 mdmisc;
++	u32 mdscr;
++	u32 mdref;
++	u32 res1[2];
++	u32 mdrwd;
++	u32 mdor;
++	u32 res2[3];
++	u32 mdasp;
++	u32 res3[240];
++	u32 mapsr;
++	u32 res4[254];
++	u32 mpzqhwctrl;
++	u32 res5[2];
++	u32 mpwldectrl0;
++	u32 mpwldectrl1;
++	u32 res6;
++	u32 mpodtctrl;
++	u32 mprddqby0dl;
++	u32 mprddqby1dl;
++	u32 mprddqby2dl;
++	u32 mprddqby3dl;
++	u32 res7[4];
++	u32 mpdgctrl0;
++	u32 mpdgctrl1;
++	u32 res8;
++	u32 mprddlctl;
++	u32 res9;
++	u32 mpwrdlctl;
++	u32 res10[25];
++	u32 mpmur0;
++};
++
++#define MX6DQ_IOM_DDR_BASE	0x020e0500
++struct mx6qd_iomux_ddr_regs {
++	u32 res1[3];
++	u32 dram_sdqs5;
++	u32 dram_dqm5;
++	u32 dram_dqm4;
++	u32 dram_sdqs4;
++	u32 dram_sdqs3;
++	u32 dram_dqm3;
++	u32 dram_sdqs2;
++	u32 dram_dqm2;
++	u32 res2[16];
++	u32 dram_cas;
++	u32 res3[2];
++	u32 dram_ras;
++	u32 dram_reset;
++	u32 res4[2];
++	u32 dram_sdclk_0;
++	u32 dram_sdba2;
++	u32 dram_sdcke0;
++	u32 dram_sdclk_1;
++	u32 dram_sdcke1;
++	u32 dram_sdodt0;
++	u32 dram_sdodt1;
++	u32 res5;
++	u32 dram_sdqs0;
++	u32 dram_dqm0;
++	u32 dram_sdqs1;
++	u32 dram_dqm1;
++	u32 dram_sdqs6;
++	u32 dram_dqm6;
++	u32 dram_sdqs7;
++	u32 dram_dqm7;
++};
++
++#define MX6DQ_IOM_GRP_BASE	0x020e0700
++struct mx6qd_iomux_grp_regs {
++	u32 res1[18];
++	u32 grp_b7ds;
++	u32 grp_addds;
++	u32 grp_ddrmode_ctl;
++	u32 res2;
++	u32 grp_ddrpke;
++	u32 res3[6];
++	u32 grp_ddrmode;
++	u32 res4[3];
++	u32 grp_b0ds;
++	u32 grp_b1ds;
++	u32 grp_ctlds;
++	u32 res5;
++	u32 grp_b2ds;
++	u32 grp_ddr_type;
++	u32 grp_b3ds;
++	u32 grp_b4ds;
++	u32 grp_b5ds;
++	u32 grp_b6ds;
++};
++
++#define MX6SDL_IOM_DDR_BASE	0x020e0400
++struct mx6sdl_iomux_ddr_regs {
++	u32 res1[25];
++	u32 dram_cas;
++	u32 res2[2];
++	u32 dram_dqm0;
++	u32 dram_dqm1;
++	u32 dram_dqm2;
++	u32 dram_dqm3;
++	u32 dram_dqm4;
++	u32 dram_dqm5;
++	u32 dram_dqm6;
++	u32 dram_dqm7;
++	u32 dram_ras;
++	u32 dram_reset;
++	u32 res3[2];
++	u32 dram_sdba2;
++	u32 dram_sdcke0;
++	u32 dram_sdcke1;
++	u32 dram_sdclk_0;
++	u32 dram_sdclk_1;
++	u32 dram_sdodt0;
++	u32 dram_sdodt1;
++	u32 dram_sdqs0;
++	u32 dram_sdqs1;
++	u32 dram_sdqs2;
++	u32 dram_sdqs3;
++	u32 dram_sdqs4;
++	u32 dram_sdqs5;
++	u32 dram_sdqs6;
++	u32 dram_sdqs7;
++};
++
++#define MX6SDL_IOM_GRP_BASE	0x020e0700
++struct mx6sdl_iomux_grp_regs {
++	u32 res1[18];
++	u32 grp_b7ds;
++	u32 grp_addds;
++	u32 grp_ddrmode_ctl;
++	u32 grp_ddrpke;
++	u32 res2[2];
++	u32 grp_ddrmode;
++	u32 grp_b0ds;
++	u32 res3;
++	u32 grp_ctlds;
++	u32 grp_b1ds;
++	u32 grp_ddr_type;
++	u32 grp_b2ds;
++	u32 grp_b3ds;
++	u32 grp_b4ds;
++	u32 grp_b5ds;
++	u32 res4;
++	u32 grp_b6ds;
++};
++
++#endif
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6dl_pins.h u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6dl_pins.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6dl_pins.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6dl_pins.h	2014-12-17 09:31:33.882048674 +0000
+@@ -7,1664 +7,1661 @@
+ #ifndef __ASM_ARCH_MX6_MX6DL_PINS_H__
+ #define __ASM_ARCH_MX6_MX6DL_PINS_H__
+ 
+-#include <asm/imx-common/iomux-v3.h>
++MX6_PAD_DECL(CSI0_DAT10__IPU1_CSI0_D_10	, 0x0360, 0x004C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__AUDMUX_AUD3_RXC	, 0x0360, 0x004C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__ECSPI2_MISO		, 0x0360, 0x004C, 2, 0x07F8, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__UART1_TXD		, 0x0360, 0x004C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__UART1_RXD		, 0x0360, 0x004C, 3, 0x08FC, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__SDMA_DEBUG_PC_4	, 0x0360, 0x004C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__GPIO_5_28		, 0x0360, 0x004C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__MMDC_MMDC_DEBUG_33	, 0x0360, 0x004C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__SIMBA_TRACE_7	, 0x0360, 0x004C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__IPU1_CSI0_D_11	, 0x0364, 0x0050, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__AUDMUX_AUD3_RXFS	, 0x0364, 0x0050, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__ECSPI2_SS0		, 0x0364, 0x0050, 2, 0x0800, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__UART1_TXD		, 0x0364, 0x0050, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__UART1_RXD		, 0x0364, 0x0050, 3, 0x08FC, 1, 0)
++MX6_PAD_DECL(CSI0_DAT11__SDMA_DEBUG_PC_5	, 0x0364, 0x0050, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__GPIO_5_29		, 0x0364, 0x0050, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__MMDC_MMDC_DEBUG_34	, 0x0364, 0x0050, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__SIMBA_TRACE_8	, 0x0364, 0x0050, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__IPU1_CSI0_D_12	, 0x0368, 0x0054, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__WEIM_WEIM_D_8	, 0x0368, 0x0054, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__PCIE_CTRL_DIAG_STATUS_BUS_MUX_16	, 0x0368, 0x0054, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__UART4_TXD		, 0x0368, 0x0054, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__UART4_RXD		, 0x0368, 0x0054, 3, 0x0914, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__SDMA_DEBUG_PC_6	, 0x0368, 0x0054, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__GPIO_5_30		, 0x0368, 0x0054, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__MMDC_MMDC_DEBUG_35	, 0x0368, 0x0054, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__SIMBA_TRACE_9	, 0x0368, 0x0054, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__IPU1_CSI0_D_13	, 0x036C, 0x0058, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__WEIM_WEIM_D_9	, 0x036C, 0x0058, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__PCIE_CTRL_DIAG_STATUS_BUS_MUX_17	, 0x036C, 0x0058, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__UART4_TXD		, 0x036C, 0x0058, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__UART4_RXD		, 0x036C, 0x0058, 3, 0x0914, 1, 0)
++MX6_PAD_DECL(CSI0_DAT13__SDMA_DEBUG_PC_7	, 0x036C, 0x0058, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__GPIO_5_31		, 0x036C, 0x0058, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__MMDC_MMDC_DEBUG_36	, 0x036C, 0x0058, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__SIMBA_TRACE_10	, 0x036C, 0x0058, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__IPU1_CSI0_D_14	, 0x0370, 0x005C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__WEIM_WEIM_D_10	, 0x0370, 0x005C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__PCIE_CTRL_DIAG_STATUS_BUS_MUX_18	, 0x0370, 0x005C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__UART5_TXD		, 0x0370, 0x005C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__UART5_RXD		, 0x0370, 0x005C, 3, 0x091C, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__SDMA_DEBUG_PC_8	, 0x0370, 0x005C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__GPIO_6_0		, 0x0370, 0x005C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__MMDC_MMDC_DEBUG_37	, 0x0370, 0x005C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__SIMBA_TRACE_11	, 0x0370, 0x005C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__IPU1_CSI0_D_15	, 0x0374, 0x0060, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__WEIM_WEIM_D_11	, 0x0374, 0x0060, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__PCIE_CTRL_DIAG_STATUS_BUS_MUX_19	, 0x0374, 0x0060, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__UART5_TXD		, 0x0374, 0x0060, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__UART5_RXD		, 0x0374, 0x0060, 3, 0x091C, 1, 0)
++MX6_PAD_DECL(CSI0_DAT15__SDMA_DEBUG_PC_9	, 0x0374, 0x0060, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__GPIO_6_1		, 0x0374, 0x0060, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__MMDC_MMDC_DEBUG_38	, 0x0374, 0x0060, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__SIMBA_TRACE_12	, 0x0374, 0x0060, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__IPU1_CSI0_D_16	, 0x0378, 0x0064, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__WEIM_WEIM_D_12	, 0x0378, 0x0064, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__PCIE_CTRL_DIAG_STATUS_BUS_MUX_20	, 0x0378, 0x0064, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__UART4_CTS		, 0x0378, 0x0064, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__UART4_RTS		, 0x0378, 0x0064, 3, 0x0910, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__SDMA_DEBUG_PC_10	, 0x0378, 0x0064, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__GPIO_6_2		, 0x0378, 0x0064, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__MMDC_MMDC_DEBUG_39	, 0x0378, 0x0064, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__SIMBA_TRACE_13	, 0x0378, 0x0064, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__IPU1_CSI0_D_17	, 0x037C, 0x0068, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__WEIM_WEIM_D_13	, 0x037C, 0x0068, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__PCIE_CTRL_DIAG_STATUS_BUS_MUX_21	, 0x037C, 0x0068, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__UART4_CTS		, 0x037C, 0x0068, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__UART4_RTS		, 0x037C, 0x0068, 3, 0x0910, 1, 0)
++MX6_PAD_DECL(CSI0_DAT17__SDMA_DEBUG_PC_11	, 0x037C, 0x0068, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__GPIO_6_3		, 0x037C, 0x0068, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__MMDC_MMDC_DEBUG_40	, 0x037C, 0x0068, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__SIMBA_TRACE_14	, 0x037C, 0x0068, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__IPU1_CSI0_D_18	, 0x0380, 0x006C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__WEIM_WEIM_D_14	, 0x0380, 0x006C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__PCIE_CTRL_DIAG_STATUS_BUS_MUX_22	, 0x0380, 0x006C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__UART5_CTS		, 0x0380, 0x006C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__UART5_RTS		, 0x0380, 0x006C, 3, 0x0918, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__SDMA_DEBUG_PC_12	, 0x0380, 0x006C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__GPIO_6_4		, 0x0380, 0x006C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__MMDC_MMDC_DEBUG_41	, 0x0380, 0x006C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__SIMBA_TRACE_15	, 0x0380, 0x006C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__IPU1_CSI0_D_19	, 0x0384, 0x0070, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__WEIM_WEIM_D_15	, 0x0384, 0x0070, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__PCIE_CTRL_DIAG_STATUS_BUS_MUX_23	, 0x0384, 0x0070, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__UART5_CTS		, 0x0384, 0x0070, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__UART5_RTS		, 0x0384, 0x0070, 3, 0x0918, 1, 0)
++MX6_PAD_DECL(CSI0_DAT19__SDMA_DEBUG_PC_13	, 0x0384, 0x0070, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__GPIO_6_5		, 0x0384, 0x0070, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__MMDC_MMDC_DEBUG_42	, 0x0384, 0x0070, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__ANATOP_ANATOP_TESTO_9	, 0x0384, 0x0070, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__IPU1_CSI0_D_4	, 0x0388, 0x0074, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__WEIM_WEIM_D_2	, 0x0388, 0x0074, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__ECSPI1_SCLK		, 0x0388, 0x0074, 2, 0x07D8, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__KPP_COL_5		, 0x0388, 0x0074, 3, 0x08C0, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__AUDMUX_AUD3_TXC	, 0x0388, 0x0074, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__GPIO_5_22		, 0x0388, 0x0074, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__MMDC_MMDC_DEBUG_43	, 0x0388, 0x0074, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__SIMBA_TRACE_1	, 0x0388, 0x0074, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__IPU1_CSI0_D_5	, 0x038C, 0x0078, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__WEIM_WEIM_D_3	, 0x038C, 0x0078, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__ECSPI1_MOSI		, 0x038C, 0x0078, 2, 0x07E0, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__KPP_ROW_5		, 0x038C, 0x0078, 3, 0x08CC, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__AUDMUX_AUD3_TXD	, 0x038C, 0x0078, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__GPIO_5_23		, 0x038C, 0x0078, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__MMDC_MMDC_DEBUG_44	, 0x038C, 0x0078, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__SIMBA_TRACE_2	, 0x038C, 0x0078, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__IPU1_CSI0_D_6	, 0x0390, 0x007C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__WEIM_WEIM_D_4	, 0x0390, 0x007C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__ECSPI1_MISO		, 0x0390, 0x007C, 2, 0x07DC, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__KPP_COL_6		, 0x0390, 0x007C, 3, 0x08C4, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__AUDMUX_AUD3_TXFS	, 0x0390, 0x007C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__GPIO_5_24		, 0x0390, 0x007C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__MMDC_MMDC_DEBUG_45	, 0x0390, 0x007C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__SIMBA_TRACE_3	, 0x0390, 0x007C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__IPU1_CSI0_D_7	, 0x0394, 0x0080, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__WEIM_WEIM_D_5	, 0x0394, 0x0080, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__ECSPI1_SS0		, 0x0394, 0x0080, 2, 0x07E4, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__KPP_ROW_6		, 0x0394, 0x0080, 3, 0x08D0, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__AUDMUX_AUD3_RXD	, 0x0394, 0x0080, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__GPIO_5_25		, 0x0394, 0x0080, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__MMDC_MMDC_DEBUG_46	, 0x0394, 0x0080, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__SIMBA_TRACE_4	, 0x0394, 0x0080, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__IPU1_CSI0_D_8	, 0x0398, 0x0084, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__WEIM_WEIM_D_6	, 0x0398, 0x0084, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__ECSPI2_SCLK		, 0x0398, 0x0084, 2, 0x07F4, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__KPP_COL_7		, 0x0398, 0x0084, 3, 0x08C8, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__I2C1_SDA		, 0x0398, 0x0084, 4 | IOMUX_CONFIG_SION, 0x086C, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__GPIO_5_26		, 0x0398, 0x0084, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__MMDC_MMDC_DEBUG_47	, 0x0398, 0x0084, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__SIMBA_TRACE_5	, 0x0398, 0x0084, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__IPU1_CSI0_D_9	, 0x039C, 0x0088, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__WEIM_WEIM_D_7	, 0x039C, 0x0088, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__ECSPI2_MOSI		, 0x039C, 0x0088, 2, 0x07FC, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__KPP_ROW_7		, 0x039C, 0x0088, 3, 0x08D4, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__I2C1_SCL		, 0x039C, 0x0088, 4 | IOMUX_CONFIG_SION, 0x0868, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__GPIO_5_27		, 0x039C, 0x0088, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__MMDC_MMDC_DEBUG_48	, 0x039C, 0x0088, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__SIMBA_TRACE_6	, 0x039C, 0x0088, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__IPU1_CSI0_DATA_EN	, 0x03A0, 0x008C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__WEIM_WEIM_D_0	, 0x03A0, 0x008C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__PCIE_CTRL_DIAG_STATUS_BUS_MUX_14	, 0x03A0, 0x008C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__SDMA_DEBUG_PC_2	, 0x03A0, 0x008C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__GPIO_5_20		, 0x03A0, 0x008C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__MMDC_MMDC_DEBUG_31	, 0x03A0, 0x008C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__SIMBA_TRCLK	, 0x03A0, 0x008C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__IPU1_CSI0_HSYNC	, 0x03A4, 0x0090, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_13	, 0x03A4, 0x0090, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__CCM_CLKO		, 0x03A4, 0x0090, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__SDMA_DEBUG_PC_1	, 0x03A4, 0x0090, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__GPIO_5_19		, 0x03A4, 0x0090, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__MMDC_MMDC_DEBUG_30	, 0x03A4, 0x0090, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__SIMBA_TRCTL		, 0x03A4, 0x0090, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__IPU1_CSI0_PIXCLK	, 0x03A8, 0x0094, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_12	, 0x03A8, 0x0094, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__SDMA_DEBUG_PC_0	, 0x03A8, 0x0094, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__GPIO_5_18		, 0x03A8, 0x0094, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__MMDC_MMDC_DEBUG_29	, 0x03A8, 0x0094, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__SIMBA_EVENTO	, 0x03A8, 0x0094, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__IPU1_CSI0_VSYNC	, 0x03AC, 0x0098, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__WEIM_WEIM_D_1	, 0x03AC, 0x0098, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__PCIE_CTRL_DIAG_STATUS_BUS_MUX_15	, 0x03AC, 0x0098, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__SDMA_DEBUG_PC_3	, 0x03AC, 0x0098, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__GPIO_5_21		, 0x03AC, 0x0098, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__MMDC_MMDC_DEBUG_32	, 0x03AC, 0x0098, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__SIMBA_TRACE_0	, 0x03AC, 0x0098, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__IPU1_DI0_DISP_CLK	, 0x03B0, 0x009C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_DISP_CLK__LCDIF_CLK		, 0x03B0, 0x009C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__MIPI_CORE_DPHY_TEST_OUT_28	, 0x03B0, 0x009C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__SDMA_DEBUG_CORE_STATE_0	, 0x03B0, 0x009C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__GPIO_4_16		, 0x03B0, 0x009C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__MMDC_MMDC_DEBUG_0	, 0x03B0, 0x009C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__TPSMP_HDATA_DIR	, 0x03B0, 0x009C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__LCDIF_WR_RWN	, 0x03B0, 0x009C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__IPU1_DI0_PIN15	, 0x03B4, 0x00A0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN15__LCDIF_ENABLE		, 0x03B4, 0x00A0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__AUDMUX_AUD6_TXC	, 0x03B4, 0x00A0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__MIPI_CORE_DPHY_TEST_OUT_29	, 0x03B4, 0x00A0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__SDMA_DEBUG_CORE_STATE_1	, 0x03B4, 0x00A0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__GPIO_4_17		, 0x03B4, 0x00A0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__MMDC_MMDC_DEBUG_1	, 0x03B4, 0x00A0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__PL301_SIM_MX6DL_PER1_HSIZE_0	, 0x03B4, 0x00A0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__LCDIF_RD_E		, 0x03B4, 0x00A0, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__IPU1_DI0_PIN2		, 0x03B8, 0x00A4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN2__LCDIF_HSYNC		, 0x03B8, 0x00A4, 1, 0x08D8, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__AUDMUX_AUD6_TXD	, 0x03B8, 0x00A4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__MIPI_CORE_DPHY_TEST_OUT_30	, 0x03B8, 0x00A4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__SDMA_DEBUG_CORE_STATE_2	, 0x03B8, 0x00A4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__GPIO_4_18		, 0x03B8, 0x00A4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__MMDC_MMDC_DEBUG_2	, 0x03B8, 0x00A4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__PL301_SIM_MX6DL_PER1_HADDR_9	, 0x03B8, 0x00A4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__LCDIF_RS		, 0x03B8, 0x00A4, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__IPU1_DI0_PIN3		, 0x03BC, 0x00A8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN3__LCDIF_VSYNC		, 0x03BC, 0x00A8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__AUDMUX_AUD6_TXFS	, 0x03BC, 0x00A8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__MIPI_CORE_DPHY_TEST_OUT_31	, 0x03BC, 0x00A8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__SDMA_DEBUG_CORE_STATE_3	, 0x03BC, 0x00A8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__GPIO_4_19		, 0x03BC, 0x00A8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__MMDC_MMDC_DEBUG_3	, 0x03BC, 0x00A8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__PL301_SIM_MX6DL_PER1_HADDR_10	, 0x03BC, 0x00A8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__LCDIF_CS		, 0x03BC, 0x00A8, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__IPU1_DI0_PIN4		, 0x03C0, 0x00AC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN4__LCDIF_BUSY		, 0x03C0, 0x00AC, 1, 0x08D8, 1, 0)
++MX6_PAD_DECL(DI0_PIN4__AUDMUX_AUD6_RXD	, 0x03C0, 0x00AC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__USDHC1_WP		, 0x03C0, 0x00AC, 3, 0x092C, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__SDMA_DEBUG_YIELD	, 0x03C0, 0x00AC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__GPIO_4_20		, 0x03C0, 0x00AC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__MMDC_MMDC_DEBUG_4	, 0x03C0, 0x00AC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__PL301_SIM_MX6DL_PER1_HADDR_11	, 0x03C0, 0x00AC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__LCDIF_RESET		, 0x03C0, 0x00AC, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__IPU1_DISP0_DAT_0	, 0x03C4, 0x00B0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT0__LCDIF_DAT_0		, 0x03C4, 0x00B0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__ECSPI3_SCLK		, 0x03C4, 0x00B0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__USDHC1_USDHC_DEBUG_0	, 0x03C4, 0x00B0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__SDMA_DEBUG_CORE_RUN	, 0x03C4, 0x00B0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__GPIO_4_21		, 0x03C4, 0x00B0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__MMDC_MMDC_DEBUG_5	, 0x03C4, 0x00B0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__PL301_SIM_MX6DL_PER1_HSIZE_1	, 0x03C4, 0x00B0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__IPU1_DISP0_DAT_1	, 0x03C8, 0x00B4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT1__LCDIF_DAT_1		, 0x03C8, 0x00B4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__ECSPI3_MOSI		, 0x03C8, 0x00B4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__USDHC1_USDHC_DEBUG_1	, 0x03C8, 0x00B4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__SDMA_DEBUG_EVENT_CHANNEL_SEL	, 0x03C8, 0x00B4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__GPIO_4_22		, 0x03C8, 0x00B4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__MMDC_MMDC_DEBUG_6	, 0x03C8, 0x00B4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__PL301_SIM_MX6DL_PER1_HADDR_12	, 0x03C8, 0x00B4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__IPU1_DISP0_DAT_10	, 0x03CC, 0x00B8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT10__LCDIF_DAT_10	, 0x03CC, 0x00B8, 1, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT10__USDHC1_USDHC_DEBUG_6	, 0x03CC, 0x00B8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__SDMA_DEBUG_EVENT_CHANNEL_3	, 0x03CC, 0x00B8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__GPIO_4_31		, 0x03CC, 0x00B8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__MMDC_MMDC_DEBUG_15	, 0x03CC, 0x00B8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__PL301_SIM_MX6DL_PER1_HADDR_21	, 0x03CC, 0x00B8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__IPU1_DISP0_DAT_11	, 0x03D0, 0x00BC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT11__LCDIF_DAT_11	, 0x03D0, 0x00BC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__USDHC1_USDHC_DEBUG_7	, 0x03D0, 0x00BC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__SDMA_DEBUG_EVENT_CHANNEL_4	, 0x03D0, 0x00BC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__GPIO_5_5		, 0x03D0, 0x00BC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__MMDC_MMDC_DEBUG_16	, 0x03D0, 0x00BC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__PL301_SIM_MX6DL_PER1_HADDR_22	, 0x03D0, 0x00BC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__IPU1_DISP0_DAT_12	, 0x03D4, 0x00C0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT12__LCDIF_DAT_12	, 0x03D4, 0x00C0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__SDMA_DEBUG_EVENT_CHANNEL_5	, 0x03D4, 0x00C0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__GPIO_5_6		, 0x03D4, 0x00C0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__MMDC_MMDC_DEBUG_17	, 0x03D4, 0x00C0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__PL301_SIM_MX6DL_PER1_HADDR_23	, 0x03D4, 0x00C0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__IPU1_DISP0_DAT_13	, 0x03D8, 0x00C4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT13__LCDIF_DAT_13	, 0x03D8, 0x00C4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__AUDMUX_AUD5_RXFS	, 0x03D8, 0x00C4, 3, 0x07BC, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__SDMA_DEBUG_EVT_CHN_LINES_0	, 0x03D8, 0x00C4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__GPIO_5_7		, 0x03D8, 0x00C4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__MMDC_MMDC_DEBUG_18	, 0x03D8, 0x00C4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__PL301_SIM_MX6DL_PER1_HADDR_24	, 0x03D8, 0x00C4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__IPU1_DISP0_DAT_14	, 0x03DC, 0x00C8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT14__LCDIF_DAT_14	, 0x03DC, 0x00C8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__AUDMUX_AUD5_RXC	, 0x03DC, 0x00C8, 3, 0x07B8, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__SDMA_DEBUG_EVT_CHN_LINES_1	, 0x03DC, 0x00C8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__GPIO_5_8		, 0x03DC, 0x00C8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__MMDC_MMDC_DEBUG_19	, 0x03DC, 0x00C8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__PL301_SIM_MX6DL_PER1_HSIZE_2	, 0x03DC, 0x00C8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__IPU1_DISP0_DAT_15	, 0x03E0, 0x00CC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT15__LCDIF_DAT_15	, 0x03E0, 0x00CC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__ECSPI1_SS1		, 0x03E0, 0x00CC, 2, 0x07E8, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__ECSPI2_SS1		, 0x03E0, 0x00CC, 3, 0x0804, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__SDMA_DEBUG_EVT_CHN_LINES_2	, 0x03E0, 0x00CC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__GPIO_5_9		, 0x03E0, 0x00CC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__MMDC_MMDC_DEBUG_20	, 0x03E0, 0x00CC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__PL301_SIM_MX6DL_PER1_HADDR_25	, 0x03E0, 0x00CC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__IPU1_DISP0_DAT_16	, 0x03E4, 0x00D0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT16__LCDIF_DAT_16	, 0x03E4, 0x00D0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__ECSPI2_MOSI	, 0x03E4, 0x00D0, 2, 0x07FC, 1, 0)
++MX6_PAD_DECL(DISP0_DAT16__AUDMUX_AUD5_TXC	, 0x03E4, 0x00D0, 3, 0x07C0, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__SDMA_SDMA_EXT_EVENT_0	, 0x03E4, 0x00D0, 4, 0x08E8, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__GPIO_5_10		, 0x03E4, 0x00D0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__MMDC_MMDC_DEBUG_21	, 0x03E4, 0x00D0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__PL301_SIM_MX6DL_PER1_HADDR_26	, 0x03E4, 0x00D0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__IPU1_DISP0_DAT_17	, 0x03E8, 0x00D4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT17__LCDIF_DAT_17	, 0x03E8, 0x00D4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__ECSPI2_MISO	, 0x03E8, 0x00D4, 2, 0x07F8, 1, 0)
++MX6_PAD_DECL(DISP0_DAT17__AUDMUX_AUD5_TXD	, 0x03E8, 0x00D4, 3, 0x07B4, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__SDMA_SDMA_EXT_EVENT_1	, 0x03E8, 0x00D4, 4, 0x08EC, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__GPIO_5_11		, 0x03E8, 0x00D4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__MMDC_MMDC_DEBUG_22	, 0x03E8, 0x00D4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__PL301_SIM_MX6DL_PER1_HADDR_27	, 0x03E8, 0x00D4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__IPU1_DISP0_DAT_18	, 0x03EC, 0x00D8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT18__LCDIF_DAT_18	, 0x03EC, 0x00D8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__ECSPI2_SS0		, 0x03EC, 0x00D8, 2, 0x0800, 1, 0)
++MX6_PAD_DECL(DISP0_DAT18__AUDMUX_AUD5_TXFS	, 0x03EC, 0x00D8, 3, 0x07C4, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__AUDMUX_AUD4_RXFS	, 0x03EC, 0x00D8, 4, 0x07A4, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__GPIO_5_12		, 0x03EC, 0x00D8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__MMDC_MMDC_DEBUG_23	, 0x03EC, 0x00D8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__WEIM_WEIM_CS_2	, 0x03EC, 0x00D8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__IPU1_DISP0_DAT_19	, 0x03F0, 0x00DC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT19__LCDIF_DAT_19	, 0x03F0, 0x00DC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__ECSPI2_SCLK	, 0x03F0, 0x00DC, 2, 0x07F4, 1, 0)
++MX6_PAD_DECL(DISP0_DAT19__AUDMUX_AUD5_RXD	, 0x03F0, 0x00DC, 3, 0x07B0, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__AUDMUX_AUD4_RXC	, 0x03F0, 0x00DC, 4, 0x07A0, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__GPIO_5_13		, 0x03F0, 0x00DC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__MMDC_MMDC_DEBUG_24	, 0x03F0, 0x00DC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__WEIM_WEIM_CS_3	, 0x03F0, 0x00DC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__IPU1_DISP0_DAT_2	, 0x03F4, 0x00E0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT2__LCDIF_DAT_2		, 0x03F4, 0x00E0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__ECSPI3_MISO		, 0x03F4, 0x00E0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__USDHC1_USDHC_DEBUG_2	, 0x03F4, 0x00E0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__SDMA_DEBUG_MODE	, 0x03F4, 0x00E0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__GPIO_4_23		, 0x03F4, 0x00E0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__MMDC_MMDC_DEBUG_7	, 0x03F4, 0x00E0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__PL301_SIM_MX6DL_PER1_HADDR_13	, 0x03F4, 0x00E0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__IPU1_DISP0_DAT_20	, 0x03F8, 0x00E4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT20__LCDIF_DAT_20	, 0x03F8, 0x00E4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__ECSPI1_SCLK	, 0x03F8, 0x00E4, 2, 0x07D8, 1, 0)
++MX6_PAD_DECL(DISP0_DAT20__AUDMUX_AUD4_TXC	, 0x03F8, 0x00E4, 3, 0x07A8, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__SDMA_DEBUG_EVT_CHN_LINES_7	, 0x03F8, 0x00E4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__GPIO_5_14		, 0x03F8, 0x00E4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__MMDC_MMDC_DEBUG_25	, 0x03F8, 0x00E4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__PL301_SIM_MX6DL_PER1_HADDR_28	, 0x03F8, 0x00E4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__IPU1_DISP0_DAT_21	, 0x03FC, 0x00E8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT21__LCDIF_DAT_21	, 0x03FC, 0x00E8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__ECSPI1_MOSI	, 0x03FC, 0x00E8, 2, 0x07E0, 1, 0)
++MX6_PAD_DECL(DISP0_DAT21__AUDMUX_AUD4_TXD	, 0x03FC, 0x00E8, 3, 0x079C, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__SDMA_DEBUG_BUS_DEVICE_0	, 0x03FC, 0x00E8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__GPIO_5_15		, 0x03FC, 0x00E8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__MMDC_MMDC_DEBUG_26	, 0x03FC, 0x00E8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__PL301_SIM_MX6DL_PER1_HADDR_29	, 0x03FC, 0x00E8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__IPU1_DISP0_DAT_22	, 0x0400, 0x00EC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT22__LCDIF_DAT_22	, 0x0400, 0x00EC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__ECSPI1_MISO	, 0x0400, 0x00EC, 2, 0x07DC, 1, 0)
++MX6_PAD_DECL(DISP0_DAT22__AUDMUX_AUD4_TXFS	, 0x0400, 0x00EC, 3, 0x07AC, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__SDMA_DEBUG_BUS_DEVICE_1	, 0x0400, 0x00EC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__GPIO_5_16		, 0x0400, 0x00EC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__MMDC_MMDC_DEBUG_27	, 0x0400, 0x00EC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__PL301_SIM_MX6DL_PER1_HADDR_30	, 0x0400, 0x00EC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__IPU1_DISP0_DAT_23	, 0x0404, 0x00F0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT23__LCDIF_DAT_23	, 0x0404, 0x00F0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__ECSPI1_SS0		, 0x0404, 0x00F0, 2, 0x07E4, 1, 0)
++MX6_PAD_DECL(DISP0_DAT23__AUDMUX_AUD4_RXD	, 0x0404, 0x00F0, 3, 0x0798, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__SDMA_DEBUG_BUS_DEVICE_2	, 0x0404, 0x00F0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__GPIO_5_17		, 0x0404, 0x00F0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__MMDC_MMDC_DEBUG_28	, 0x0404, 0x00F0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__PL301_SIM_MX6DL_PER1_HADDR_31	, 0x0404, 0x00F0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__IPU1_DISP0_DAT_3	, 0x0408, 0x00F4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT3__LCDIF_DAT_3		, 0x0408, 0x00F4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__ECSPI3_SS0		, 0x0408, 0x00F4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__USDHC1_USDHC_DEBUG_3	, 0x0408, 0x00F4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__SDMA_DEBUG_BUS_ERROR	, 0x0408, 0x00F4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__GPIO_4_24		, 0x0408, 0x00F4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__MMDC_MMDC_DEBUG_8	, 0x0408, 0x00F4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__PL301_SIM_MX6DL_PER1_HADDR_14	, 0x0408, 0x00F4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__IPU1_DISP0_DAT_4	, 0x040C, 0x00F8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT4__LCDIF_DAT_4		, 0x040C, 0x00F8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__ECSPI3_SS1		, 0x040C, 0x00F8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__USDHC1_USDHC_DEBUG_4	, 0x040C, 0x00F8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__SDMA_DEBUG_BUS_RWB	, 0x040C, 0x00F8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__GPIO_4_25		, 0x040C, 0x00F8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__MMDC_MMDC_DEBUG_9	, 0x040C, 0x00F8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__PL301_SIM_MX6DL_PER1_HADDR_15	, 0x040C, 0x00F8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__IPU1_DISP0_DAT_5	, 0x0410, 0x00FC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT5__LCDIF_DAT_5		, 0x0410, 0x00FC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__ECSPI3_SS2		, 0x0410, 0x00FC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__AUDMUX_AUD6_RXFS	, 0x0410, 0x00FC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__SDMA_DEBUG_MATCHED_DMBUS	, 0x0410, 0x00FC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__GPIO_4_26		, 0x0410, 0x00FC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__MMDC_MMDC_DEBUG_10	, 0x0410, 0x00FC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__PL301_SIM_MX6DL_PER1_HADDR_16	, 0x0410, 0x00FC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__IPU1_DISP0_DAT_6	, 0x0414, 0x0100, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT6__LCDIF_DAT_6		, 0x0414, 0x0100, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__ECSPI3_SS3		, 0x0414, 0x0100, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__AUDMUX_AUD6_RXC	, 0x0414, 0x0100, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__SDMA_DEBUG_RTBUFFER_WRITE	, 0x0414, 0x0100, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__GPIO_4_27		, 0x0414, 0x0100, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__MMDC_MMDC_DEBUG_11	, 0x0414, 0x0100, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__PL301_SIM_MX6DL_PER1_HADDR_17	, 0x0414, 0x0100, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__IPU1_DISP0_DAT_7	, 0x0418, 0x0104, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT7__LCDIF_DAT_7		, 0x0418, 0x0104, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__ECSPI3_RDY		, 0x0418, 0x0104, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__USDHC1_USDHC_DEBUG_5	, 0x0418, 0x0104, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__SDMA_DEBUG_EVENT_CHANNEL_0	, 0x0418, 0x0104, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__GPIO_4_28		, 0x0418, 0x0104, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__MMDC_MMDC_DEBUG_12	, 0x0418, 0x0104, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__PL301_SIM_MX6DL_PER1_HADDR_18	, 0x0418, 0x0104, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__IPU1_DISP0_DAT_8	, 0x041C, 0x0108, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT8__LCDIF_DAT_8		, 0x041C, 0x0108, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__PWM1_PWMO		, 0x041C, 0x0108, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__WDOG1_WDOG_B	, 0x041C, 0x0108, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__SDMA_DEBUG_EVENT_CHANNEL_1	, 0x041C, 0x0108, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__GPIO_4_29		, 0x041C, 0x0108, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__MMDC_MMDC_DEBUG_13	, 0x041C, 0x0108, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__PL301_SIM_MX6DL_PER1_HADDR_19	, 0x041C, 0x0108, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__IPU1_DISP0_DAT_9	, 0x0420, 0x010C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT9__LCDIF_DAT_9		, 0x0420, 0x010C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__PWM2_PWMO		, 0x0420, 0x010C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__WDOG2_WDOG_B	, 0x0420, 0x010C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__SDMA_DEBUG_EVENT_CHANNEL_2	, 0x0420, 0x010C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__GPIO_4_30		, 0x0420, 0x010C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__MMDC_MMDC_DEBUG_14	, 0x0420, 0x010C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__PL301_SIM_MX6DL_PER1_HADDR_20	, 0x0420, 0x010C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A0__MMDC_DRAM_A_0		, 0x0424, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A1__MMDC_DRAM_A_1		, 0x0428, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A10__MMDC_DRAM_A_10	, 0x042C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A11__MMDC_DRAM_A_11	, 0x0430, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A12__MMDC_DRAM_A_12	, 0x0434, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A13__MMDC_DRAM_A_13	, 0x0438, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A14__MMDC_DRAM_A_14	, 0x043C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A15__MMDC_DRAM_A_15	, 0x0440, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A2__MMDC_DRAM_A_2		, 0x0444, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A3__MMDC_DRAM_A_3		, 0x0448, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A4__MMDC_DRAM_A_4		, 0x044C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A5__MMDC_DRAM_A_5		, 0x0450, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A6__MMDC_DRAM_A_6		, 0x0454, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A7__MMDC_DRAM_A_7		, 0x0458, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A8__MMDC_DRAM_A_8		, 0x045C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A9__MMDC_DRAM_A_9		, 0x0460, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_CAS__MMDC_DRAM_CAS		, 0x0464, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_CS0__MMDC_DRAM_CS_0	, 0x0468, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_CS1__MMDC_DRAM_CS_1	, 0x046C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D0__MMDC_DRAM_D_0		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D1__MMDC_DRAM_D_1		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D10__MMDC_DRAM_D_10	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D11__MMDC_DRAM_D_11	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D12__MMDC_DRAM_D_12	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D13__MMDC_DRAM_D_13	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D14__MMDC_DRAM_D_14	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D15__MMDC_DRAM_D_15	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D16__MMDC_DRAM_D_16	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D17__MMDC_DRAM_D_17	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D18__MMDC_DRAM_D_18	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D19__MMDC_DRAM_D_19	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D2__MMDC_DRAM_D_2		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D20__MMDC_DRAM_D_20	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D21__MMDC_DRAM_D_21	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D22__MMDC_DRAM_D_22	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D23__MMDC_DRAM_D_23	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D24__MMDC_DRAM_D_24	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D25__MMDC_DRAM_D_25	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D26__MMDC_DRAM_D_26	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D27__MMDC_DRAM_D_27	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D28__MMDC_DRAM_D_28	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D29__MMDC_DRAM_D_29	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D3__MMDC_DRAM_D_3		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D30__MMDC_DRAM_D_30	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D31__MMDC_DRAM_D_31	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D32__MMDC_DRAM_D_32	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D33__MMDC_DRAM_D_33	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D34__MMDC_DRAM_D_34	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D35__MMDC_DRAM_D_35	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D36__MMDC_DRAM_D_36	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D37__MMDC_DRAM_D_37	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D38__MMDC_DRAM_D_38	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D39__MMDC_DRAM_D_39	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D4__MMDC_DRAM_D_4		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D40__MMDC_DRAM_D_40	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D41__MMDC_DRAM_D_41	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D42__MMDC_DRAM_D_42	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D43__MMDC_DRAM_D_43	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D44__MMDC_DRAM_D_44	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D45__MMDC_DRAM_D_45	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D46__MMDC_DRAM_D_46	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D47__MMDC_DRAM_D_47	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D48__MMDC_DRAM_D_48	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D49__MMDC_DRAM_D_49	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D5__MMDC_DRAM_D_5		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D50__MMDC_DRAM_D_50	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D51__MMDC_DRAM_D_51	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D52__MMDC_DRAM_D_52	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D53__MMDC_DRAM_D_53	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D54__MMDC_DRAM_D_54	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D55__MMDC_DRAM_D_55	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D56__MMDC_DRAM_D_56	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D57__MMDC_DRAM_D_57	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D58__MMDC_DRAM_D_58	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D59__MMDC_DRAM_D_59	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D6__MMDC_DRAM_D_6		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D60__MMDC_DRAM_D_60	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D61__MMDC_DRAM_D_61	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D62__MMDC_DRAM_D_62	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D63__MMDC_DRAM_D_63	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D7__MMDC_DRAM_D_7		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D8__MMDC_DRAM_D_8		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D9__MMDC_DRAM_D_9		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM0__MMDC_DRAM_DQM_0	, 0x0470, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM1__MMDC_DRAM_DQM_1	, 0x0474, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM2__MMDC_DRAM_DQM_2	, 0x0478, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM3__MMDC_DRAM_DQM_3	, 0x047C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM4__MMDC_DRAM_DQM_4	, 0x0480, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM5__MMDC_DRAM_DQM_5	, 0x0484, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM6__MMDC_DRAM_DQM_6	, 0x0488, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM7__MMDC_DRAM_DQM_7	, 0x048C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_RAS__MMDC_DRAM_RAS		, 0x0490, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_RESET__MMDC_DRAM_RESET	, 0x0494, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDBA0__MMDC_DRAM_SDBA_0	, 0x0498, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDBA1__MMDC_DRAM_SDBA_1	, 0x049C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDBA2__MMDC_DRAM_SDBA_2	, 0x04A0, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCKE0__MMDC_DRAM_SDCKE_0	, 0x04A4, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCKE1__MMDC_DRAM_SDCKE_1	, 0x04A8, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCLK_0__MMDC_DRAM_SDCLK0	, 0x04AC, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCLK_1__MMDC_DRAM_SDCLK1	, 0x04B0, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDODT0__MMDC_DRAM_ODT_0	, 0x04B4, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDODT1__MMDC_DRAM_ODT_1	, 0x04B8, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS0__MMDC_DRAM_SDQS_0	, 0x04BC, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS1__MMDC_DRAM_SDQS_1	, 0x04C0, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS2__MMDC_DRAM_SDQS_2	, 0x04C4, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS3__MMDC_DRAM_SDQS_3	, 0x04C8, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS4__MMDC_DRAM_SDQS_4	, 0x04CC, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS5__MMDC_DRAM_SDQS_5	, 0x04D0, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS6__MMDC_DRAM_SDQS_6	, 0x04D4, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS7__MMDC_DRAM_SDQS_7	, 0x04D8, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDWE__MMDC_DRAM_SDWE	, 0x04DC, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__WEIM_WEIM_A_16		, 0x04E0, 0x0110, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__IPU1_DI1_DISP_CLK	, 0x04E0, 0x0110, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__IPU1_CSI1_PIXCLK	, 0x04E0, 0x0110, 2, 0x08B8, 0, 0)
++MX6_PAD_DECL(EIM_A16__MIPI_CORE_DPHY_TEST_OUT_23	, 0x04E0, 0x0110, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__GPIO_2_22		, 0x04E0, 0x0110, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__TPSMP_HDATA_6		, 0x04E0, 0x0110, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__SRC_BT_CFG_16		, 0x04E0, 0x0110, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__EPDC_SDDO_0		, 0x04E0, 0x0110, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__WEIM_WEIM_A_17		, 0x04E4, 0x0114, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__IPU1_DISP1_DAT_12	, 0x04E4, 0x0114, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__IPU1_CSI1_D_12		, 0x04E4, 0x0114, 2, 0x0890, 0, 0)
++MX6_PAD_DECL(EIM_A17__MIPI_CORE_DPHY_TEST_OUT_22	, 0x04E4, 0x0114, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__GPIO_2_21		, 0x04E4, 0x0114, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__TPSMP_HDATA_5		, 0x04E4, 0x0114, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__SRC_BT_CFG_17		, 0x04E4, 0x0114, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__EPDC_PWRSTAT		, 0x04E4, 0x0114, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__WEIM_WEIM_A_18		, 0x04E8, 0x0118, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__IPU1_DISP1_DAT_13	, 0x04E8, 0x0118, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__IPU1_CSI1_D_13		, 0x04E8, 0x0118, 2, 0x0894, 0, 0)
++MX6_PAD_DECL(EIM_A18__MIPI_CORE_DPHY_TEST_OUT_21	, 0x04E8, 0x0118, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__GPIO_2_20		, 0x04E8, 0x0118, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__TPSMP_HDATA_4		, 0x04E8, 0x0118, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__SRC_BT_CFG_18		, 0x04E8, 0x0118, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__EPDC_PWRCTRL_0		, 0x04E8, 0x0118, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__WEIM_WEIM_A_19		, 0x04EC, 0x011C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__IPU1_DISP1_DAT_14	, 0x04EC, 0x011C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__IPU1_CSI1_D_14		, 0x04EC, 0x011C, 2, 0x0898, 0, 0)
++MX6_PAD_DECL(EIM_A19__MIPI_CORE_DPHY_TEST_OUT_20	, 0x04EC, 0x011C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__GPIO_2_19		, 0x04EC, 0x011C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__TPSMP_HDATA_3		, 0x04EC, 0x011C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__SRC_BT_CFG_19		, 0x04EC, 0x011C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__EPDC_PWRCTRL_1		, 0x04EC, 0x011C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__WEIM_WEIM_A_20		, 0x04F0, 0x0120, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__IPU1_DISP1_DAT_15	, 0x04F0, 0x0120, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__IPU1_CSI1_D_15		, 0x04F0, 0x0120, 2, 0x089C, 0, 0)
++MX6_PAD_DECL(EIM_A20__MIPI_CORE_DPHY_TEST_OUT_19	, 0x04F0, 0x0120, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__GPIO_2_18		, 0x04F0, 0x0120, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__TPSMP_HDATA_2		, 0x04F0, 0x0120, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__SRC_BT_CFG_20		, 0x04F0, 0x0120, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__EPDC_PWRCTRL_2		, 0x04F0, 0x0120, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__WEIM_WEIM_A_21		, 0x04F4, 0x0124, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__IPU1_DISP1_DAT_16	, 0x04F4, 0x0124, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__IPU1_CSI1_D_16		, 0x04F4, 0x0124, 2, 0x08A0, 0, 0)
++MX6_PAD_DECL(EIM_A21__MIPI_CORE_DPHY_TEST_OUT_18	, 0x04F4, 0x0124, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__GPIO_2_17		, 0x04F4, 0x0124, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__TPSMP_HDATA_1		, 0x04F4, 0x0124, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__SRC_BT_CFG_21		, 0x04F4, 0x0124, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__EPDC_GDCLK		, 0x04F4, 0x0124, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__WEIM_WEIM_A_22		, 0x04F8, 0x0128, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__IPU1_DISP1_DAT_17	, 0x04F8, 0x0128, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__IPU1_CSI1_D_17		, 0x04F8, 0x0128, 2, 0x08A4, 0, 0)
++MX6_PAD_DECL(EIM_A22__GPIO_2_16		, 0x04F8, 0x0128, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__TPSMP_HDATA_0		, 0x04F8, 0x0128, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__SRC_BT_CFG_22		, 0x04F8, 0x0128, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__EPDC_GDSP		, 0x04F8, 0x0128, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__WEIM_WEIM_A_23		, 0x04FC, 0x012C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__IPU1_DISP1_DAT_18	, 0x04FC, 0x012C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__IPU1_CSI1_D_18		, 0x04FC, 0x012C, 2, 0x08A8, 0, 0)
++MX6_PAD_DECL(EIM_A23__IPU1_SISG_3		, 0x04FC, 0x012C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__GPIO_6_6		, 0x04FC, 0x012C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__PL301_SIM_MX6DL_PER1_HPROT_3	, 0x04FC, 0x012C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__SRC_BT_CFG_23		, 0x04FC, 0x012C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__EPDC_GDOE		, 0x04FC, 0x012C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__WEIM_WEIM_A_24		, 0x0500, 0x0130, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__IPU1_DISP1_DAT_19	, 0x0500, 0x0130, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__IPU1_CSI1_D_19		, 0x0500, 0x0130, 2, 0x08AC, 0, 0)
++MX6_PAD_DECL(EIM_A24__IPU1_SISG_2		, 0x0500, 0x0130, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__GPIO_5_4		, 0x0500, 0x0130, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__PL301_SIM_MX6DL_PER1_HPROT_2	, 0x0500, 0x0130, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__SRC_BT_CFG_24		, 0x0500, 0x0130, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__EPDC_GDRL		, 0x0500, 0x0130, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__WEIM_WEIM_A_25		, 0x0504, 0x0134, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__ECSPI4_SS1		, 0x0504, 0x0134, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__ECSPI2_RDY		, 0x0504, 0x0134, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__IPU1_DI1_PIN12		, 0x0504, 0x0134, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__IPU1_DI0_D1_CS		, 0x0504, 0x0134, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__GPIO_5_2		, 0x0504, 0x0134, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__HDMI_TX_CEC_LINE	, 0x0504, 0x0134, 6, 0x085C, 0, 0)
++MX6_PAD_DECL(EIM_A25__PL301_SIM_MX6DL_PER1_HBURST_0	, 0x0504, 0x0134, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__EPDC_SDDO_15		, 0x0504, 0x0134, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__WEIM_ACLK_FREERUN	, 0x0504, 0x0134, 9, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__WEIM_WEIM_BCLK	, 0x0508, 0x0138, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__IPU1_DI1_PIN16	, 0x0508, 0x0138, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__GPIO_6_31		, 0x0508, 0x0138, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__TPSMP_HDATA_31	, 0x0508, 0x0138, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__EPDC_SDCE_9		, 0x0508, 0x0138, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__WEIM_WEIM_CS_0		, 0x050C, 0x013C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__IPU1_DI1_PIN5		, 0x050C, 0x013C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__ECSPI2_SCLK		, 0x050C, 0x013C, 2, 0x07F4, 2, 0)
++MX6_PAD_DECL(EIM_CS0__MIPI_CORE_DPHY_TEST_OUT_24	, 0x050C, 0x013C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__GPIO_2_23		, 0x050C, 0x013C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__TPSMP_HDATA_7		, 0x050C, 0x013C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__EPDC_SDDO_6		, 0x050C, 0x013C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__WEIM_WEIM_CS_1		, 0x0510, 0x0140, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__IPU1_DI1_PIN6		, 0x0510, 0x0140, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__ECSPI2_MOSI		, 0x0510, 0x0140, 2, 0x07FC, 2, 0)
++MX6_PAD_DECL(EIM_CS1__MIPI_CORE_DPHY_TEST_OUT_25	, 0x0510, 0x0140, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__GPIO_2_24		, 0x0510, 0x0140, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__TPSMP_HDATA_8		, 0x0510, 0x0140, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__EPDC_SDDO_8		, 0x0510, 0x0140, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__WEIM_WEIM_D_16		, 0x0514, 0x0144, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__ECSPI1_SCLK		, 0x0514, 0x0144, 1, 0x07D8, 2, 0)
++MX6_PAD_DECL(EIM_D16__IPU1_DI0_PIN5		, 0x0514, 0x0144, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__IPU1_CSI1_D_18		, 0x0514, 0x0144, 3, 0x08A8, 1, 0)
++MX6_PAD_DECL(EIM_D16__HDMI_TX_DDC_SDA	, 0x0514, 0x0144, 4, 0x0864, 0, 0)
++MX6_PAD_DECL(EIM_D16__GPIO_3_16		, 0x0514, 0x0144, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__I2C2_SDA		, 0x0514, 0x0144, 6 | IOMUX_CONFIG_SION, 0x0874, 0, 0)
++MX6_PAD_DECL(EIM_D16__TPSMP_HTRANS_0		, 0x0514, 0x0144, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__EPDC_SDDO_10		, 0x0514, 0x0144, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__WEIM_WEIM_D_17		, 0x0518, 0x0148, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__ECSPI1_MISO		, 0x0518, 0x0148, 1, 0x07DC, 2, 0)
++MX6_PAD_DECL(EIM_D17__IPU1_DI0_PIN6		, 0x0518, 0x0148, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__IPU1_CSI1_PIXCLK	, 0x0518, 0x0148, 3, 0x08B8, 1, 0)
++MX6_PAD_DECL(EIM_D17__DCIC1_DCIC_OUT		, 0x0518, 0x0148, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__GPIO_3_17		, 0x0518, 0x0148, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__I2C3_SCL		, 0x0518, 0x0148, 6 | IOMUX_CONFIG_SION, 0x0878, 0, 0)
++MX6_PAD_DECL(EIM_D17__PL301_SIM_MX6DL_PER1_HBURST_1	, 0x0518, 0x0148, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__EPDC_VCOM_0		, 0x0518, 0x0148, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__WEIM_WEIM_D_18		, 0x051C, 0x014C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__ECSPI1_MOSI		, 0x051C, 0x014C, 1, 0x07E0, 2, 0)
++MX6_PAD_DECL(EIM_D18__IPU1_DI0_PIN7		, 0x051C, 0x014C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__IPU1_CSI1_D_17		, 0x051C, 0x014C, 3, 0x08A4, 1, 0)
++MX6_PAD_DECL(EIM_D18__IPU1_DI1_D0_CS		, 0x051C, 0x014C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__GPIO_3_18		, 0x051C, 0x014C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__I2C3_SDA		, 0x051C, 0x014C, 6 | IOMUX_CONFIG_SION, 0x087C, 0, 0)
++MX6_PAD_DECL(EIM_D18__PL301_SIM_MX6DL_PER1_HBURST_2	, 0x051C, 0x014C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__EPDC_VCOM_1		, 0x051C, 0x014C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__WEIM_WEIM_D_19		, 0x0520, 0x0150, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__ECSPI1_SS1		, 0x0520, 0x0150, 1, 0x07E8, 1, 0)
++MX6_PAD_DECL(EIM_D19__IPU1_DI0_PIN8		, 0x0520, 0x0150, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__IPU1_CSI1_D_16		, 0x0520, 0x0150, 3, 0x08A0, 1, 0)
++MX6_PAD_DECL(EIM_D19__UART1_CTS		, 0x0520, 0x0150, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__UART1_RTS		, 0x0520, 0x0150, 4, 0x08F8, 0, 0)
++MX6_PAD_DECL(EIM_D19__GPIO_3_19		, 0x0520, 0x0150, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__EPIT1_EPITO		, 0x0520, 0x0150, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__PL301_SIM_MX6DL_PER1_HRESP	, 0x0520, 0x0150, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__EPDC_SDDO_12		, 0x0520, 0x0150, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__WEIM_WEIM_D_20		, 0x0524, 0x0154, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__ECSPI4_SS0		, 0x0524, 0x0154, 1, 0x0808, 0, 0)
++MX6_PAD_DECL(EIM_D20__IPU1_DI0_PIN16		, 0x0524, 0x0154, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__IPU1_CSI1_D_15		, 0x0524, 0x0154, 3, 0x089C, 1, 0)
++MX6_PAD_DECL(EIM_D20__UART1_CTS		, 0x0524, 0x0154, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__UART1_RTS		, 0x0524, 0x0154, 4, 0x08F8, 1, 0)
++MX6_PAD_DECL(EIM_D20__GPIO_3_20		, 0x0524, 0x0154, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__EPIT2_EPITO		, 0x0524, 0x0154, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__TPSMP_HTRANS_1		, 0x0524, 0x0154, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__WEIM_WEIM_D_21		, 0x0528, 0x0158, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__ECSPI4_SCLK		, 0x0528, 0x0158, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__IPU1_DI0_PIN17		, 0x0528, 0x0158, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__IPU1_CSI1_D_11		, 0x0528, 0x0158, 3, 0x088C, 0, 0)
++MX6_PAD_DECL(EIM_D21__USBOH3_USBOTG_OC	, 0x0528, 0x0158, 4, 0x0920, 0, 0)
++MX6_PAD_DECL(EIM_D21__GPIO_3_21		, 0x0528, 0x0158, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__I2C1_SCL		, 0x0528, 0x0158, 6 | IOMUX_CONFIG_SION, 0x0868, 1, 0)
++MX6_PAD_DECL(EIM_D21__SPDIF_IN1		, 0x0528, 0x0158, 7, 0x08F0, 0, 0)
++MX6_PAD_DECL(EIM_D22__WEIM_WEIM_D_22		, 0x052C, 0x015C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__ECSPI4_MISO		, 0x052C, 0x015C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__IPU1_DI0_PIN1		, 0x052C, 0x015C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__IPU1_CSI1_D_10		, 0x052C, 0x015C, 3, 0x0888, 0, 0)
++MX6_PAD_DECL(EIM_D22__USBOH3_USBOTG_PWR	, 0x052C, 0x015C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__GPIO_3_22		, 0x052C, 0x015C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__SPDIF_OUT1		, 0x052C, 0x015C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__PL301_SIM_MX6DL_PER1_HWRITE	, 0x052C, 0x015C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__EPDC_SDCE_6		, 0x052C, 0x015C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__WEIM_WEIM_D_23		, 0x0530, 0x0160, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU1_DI0_D0_CS		, 0x0530, 0x0160, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__UART3_CTS		, 0x0530, 0x0160, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__UART3_RTS		, 0x0530, 0x0160, 2, 0x0908, 0, 0)
++MX6_PAD_DECL(EIM_D23__UART1_DCD		, 0x0530, 0x0160, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU1_CSI1_DATA_EN	, 0x0530, 0x0160, 4, 0x08B0, 0, 0)
++MX6_PAD_DECL(EIM_D23__GPIO_3_23		, 0x0530, 0x0160, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU1_DI1_PIN2		, 0x0530, 0x0160, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU1_DI1_PIN14		, 0x0530, 0x0160, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__EPDC_SDDO_11		, 0x0530, 0x0160, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__WEIM_WEIM_D_24		, 0x0534, 0x0164, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__ECSPI4_SS2		, 0x0534, 0x0164, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__UART3_TXD		, 0x0534, 0x0164, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__UART3_RXD		, 0x0534, 0x0164, 2, 0x090C, 0, 0)
++MX6_PAD_DECL(EIM_D24__ECSPI1_SS2		, 0x0534, 0x0164, 3, 0x07EC, 0, 0)
++MX6_PAD_DECL(EIM_D24__ECSPI2_SS2		, 0x0534, 0x0164, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__GPIO_3_24		, 0x0534, 0x0164, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__AUDMUX_AUD5_RXFS	, 0x0534, 0x0164, 6, 0x07BC, 1, 0)
++MX6_PAD_DECL(EIM_D24__UART1_DTR		, 0x0534, 0x0164, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__EPDC_SDCE_7		, 0x0534, 0x0164, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__WEIM_WEIM_D_25		, 0x0538, 0x0168, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__ECSPI4_SS3		, 0x0538, 0x0168, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__UART3_TXD		, 0x0538, 0x0168, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__UART3_RXD		, 0x0538, 0x0168, 2, 0x090C, 1, 0)
++MX6_PAD_DECL(EIM_D25__ECSPI1_SS3		, 0x0538, 0x0168, 3, 0x07F0, 0, 0)
++MX6_PAD_DECL(EIM_D25__ECSPI2_SS3		, 0x0538, 0x0168, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__GPIO_3_25		, 0x0538, 0x0168, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__AUDMUX_AUD5_RXC	, 0x0538, 0x0168, 6, 0x07B8, 1, 0)
++MX6_PAD_DECL(EIM_D25__UART1_DSR		, 0x0538, 0x0168, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__EPDC_SDCE_8		, 0x0538, 0x0168, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__WEIM_WEIM_D_26		, 0x053C, 0x016C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_DI1_PIN11		, 0x053C, 0x016C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_CSI0_D_1		, 0x053C, 0x016C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_CSI1_D_14		, 0x053C, 0x016C, 3, 0x0898, 1, 0)
++MX6_PAD_DECL(EIM_D26__UART2_TXD		, 0x053C, 0x016C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__UART2_RXD		, 0x053C, 0x016C, 4, 0x0904, 0, 0)
++MX6_PAD_DECL(EIM_D26__GPIO_3_26		, 0x053C, 0x016C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_SISG_2		, 0x053C, 0x016C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_DISP1_DAT_22	, 0x053C, 0x016C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__EPDC_SDOED		, 0x053C, 0x016C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__WEIM_WEIM_D_27		, 0x0540, 0x0170, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_DI1_PIN13		, 0x0540, 0x0170, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_CSI0_D_0		, 0x0540, 0x0170, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_CSI1_D_13		, 0x0540, 0x0170, 3, 0x0894, 1, 0)
++MX6_PAD_DECL(EIM_D27__UART2_TXD		, 0x0540, 0x0170, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__UART2_RXD		, 0x0540, 0x0170, 4, 0x0904, 1, 0)
++MX6_PAD_DECL(EIM_D27__GPIO_3_27		, 0x0540, 0x0170, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_SISG_3		, 0x0540, 0x0170, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_DISP1_DAT_23	, 0x0540, 0x0170, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__EPDC_SDOE		, 0x0540, 0x0170, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__WEIM_WEIM_D_28		, 0x0544, 0x0174, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__I2C1_SDA		, 0x0544, 0x0174, 1 | IOMUX_CONFIG_SION, 0x086C, 1, 0)
++MX6_PAD_DECL(EIM_D28__ECSPI4_MOSI		, 0x0544, 0x0174, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__IPU1_CSI1_D_12		, 0x0544, 0x0174, 3, 0x0890, 1, 0)
++MX6_PAD_DECL(EIM_D28__UART2_CTS		, 0x0544, 0x0174, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__UART2_RTS		, 0x0544, 0x0174, 4, 0x0900, 0, 0)
++MX6_PAD_DECL(EIM_D28__GPIO_3_28		, 0x0544, 0x0174, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__IPU1_EXT_TRIG		, 0x0544, 0x0174, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__IPU1_DI0_PIN13		, 0x0544, 0x0174, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__EPDC_PWRCTRL_3		, 0x0544, 0x0174, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__WEIM_WEIM_D_29		, 0x0548, 0x0178, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__IPU1_DI1_PIN15		, 0x0548, 0x0178, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__ECSPI4_SS0		, 0x0548, 0x0178, 2, 0x0808, 1, 0)
++MX6_PAD_DECL(EIM_D29__UART2_CTS		, 0x0548, 0x0178, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__UART2_RTS		, 0x0548, 0x0178, 4, 0x0900, 1, 0)
++MX6_PAD_DECL(EIM_D29__GPIO_3_29		, 0x0548, 0x0178, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__IPU1_CSI1_VSYNC	, 0x0548, 0x0178, 6, 0x08BC, 0, 0)
++MX6_PAD_DECL(EIM_D29__IPU1_DI0_PIN14		, 0x0548, 0x0178, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__EPDC_PWRWAKE		, 0x0548, 0x0178, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__WEIM_WEIM_D_30		, 0x054C, 0x017C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__IPU1_DISP1_DAT_21	, 0x054C, 0x017C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__IPU1_DI0_PIN11		, 0x054C, 0x017C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__IPU1_CSI0_D_3		, 0x054C, 0x017C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__UART3_CTS		, 0x054C, 0x017C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__UART3_RTS		, 0x054C, 0x017C, 4, 0x0908, 1, 0)
++MX6_PAD_DECL(EIM_D30__GPIO_3_30		, 0x054C, 0x017C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__USBOH3_USBH1_OC	, 0x054C, 0x017C, 6, 0x0924, 0, 0)
++MX6_PAD_DECL(EIM_D30__PL301_SIM_MX6DL_PER1_HPROT_0	, 0x054C, 0x017C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__EPDC_SDOEZ		, 0x054C, 0x017C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__WEIM_WEIM_D_31		, 0x0550, 0x0180, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__IPU1_DISP1_DAT_20	, 0x0550, 0x0180, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__IPU1_DI0_PIN12		, 0x0550, 0x0180, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__IPU1_CSI0_D_2		, 0x0550, 0x0180, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__UART3_CTS		, 0x0550, 0x0180, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__UART3_RTS		, 0x0550, 0x0180, 4, 0x0908, 2, 0)
++MX6_PAD_DECL(EIM_D31__GPIO_3_31		, 0x0550, 0x0180, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__USBOH3_USBH1_PWR	, 0x0550, 0x0180, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__PL301_SIM_MX6DL_PER1_HPROT_1	, 0x0550, 0x0180, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__EPDC_SDCLK		, 0x0550, 0x0180, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__WEIM_ACLK_FREERUN	, 0x0550, 0x0180, 9, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__WEIM_WEIM_DA_A_0	, 0x0554, 0x0184, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__IPU1_DISP1_DAT_9	, 0x0554, 0x0184, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__IPU1_CSI1_D_9		, 0x0554, 0x0184, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__MIPI_CORE_DPHY_TEST_OUT_2	, 0x0554, 0x0184, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__GPIO_3_0		, 0x0554, 0x0184, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__TPSMP_HDATA_14		, 0x0554, 0x0184, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__SRC_BT_CFG_0		, 0x0554, 0x0184, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__EPDC_SDCLKN		, 0x0554, 0x0184, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__WEIM_WEIM_DA_A_1	, 0x0558, 0x0188, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__IPU1_DISP1_DAT_8	, 0x0558, 0x0188, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__IPU1_CSI1_D_8		, 0x0558, 0x0188, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__MIPI_CORE_DPHY_TEST_OUT_3	, 0x0558, 0x0188, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__ANATOP_USBPHY1_TSTI_TX_LS_MODE	, 0x0558, 0x0188, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__GPIO_3_1		, 0x0558, 0x0188, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__TPSMP_HDATA_15		, 0x0558, 0x0188, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__SRC_BT_CFG_1		, 0x0558, 0x0188, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__EPDC_SDLE		, 0x0558, 0x0188, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__WEIM_WEIM_DA_A_10	, 0x055C, 0x018C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__IPU1_DI1_PIN15	, 0x055C, 0x018C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__IPU1_CSI1_DATA_EN	, 0x055C, 0x018C, 2, 0x08B0, 1, 0)
++MX6_PAD_DECL(EIM_DA10__MIPI_CORE_DPHY_TEST_OUT_12	, 0x055C, 0x018C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__GPIO_3_10		, 0x055C, 0x018C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__TPSMP_HDATA_24	, 0x055C, 0x018C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__SRC_BT_CFG_10		, 0x055C, 0x018C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__EPDC_SDDO_1		, 0x055C, 0x018C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__WEIM_WEIM_DA_A_11	, 0x0560, 0x0190, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__IPU1_DI1_PIN2		, 0x0560, 0x0190, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__IPU1_CSI1_HSYNC	, 0x0560, 0x0190, 2, 0x08B4, 0, 0)
++MX6_PAD_DECL(EIM_DA11__MIPI_CORE_DPHY_TEST_OUT_13	, 0x0560, 0x0190, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__SDMA_DEBUG_EVT_CHN_LINES_6	, 0x0560, 0x0190, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__GPIO_3_11		, 0x0560, 0x0190, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__TPSMP_HDATA_25	, 0x0560, 0x0190, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__SRC_BT_CFG_11		, 0x0560, 0x0190, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__EPDC_SDDO_3		, 0x0560, 0x0190, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__WEIM_WEIM_DA_A_12	, 0x0564, 0x0194, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__IPU1_DI1_PIN3		, 0x0564, 0x0194, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__IPU1_CSI1_VSYNC	, 0x0564, 0x0194, 2, 0x08BC, 1, 0)
++MX6_PAD_DECL(EIM_DA12__MIPI_CORE_DPHY_TEST_OUT_14	, 0x0564, 0x0194, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__SDMA_DEBUG_EVT_CHN_LINES_3	, 0x0564, 0x0194, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__GPIO_3_12		, 0x0564, 0x0194, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__TPSMP_HDATA_26	, 0x0564, 0x0194, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__SRC_BT_CFG_12		, 0x0564, 0x0194, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__EPDC_SDDO_2		, 0x0564, 0x0194, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__WEIM_WEIM_DA_A_13	, 0x0568, 0x0198, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__IPU1_DI1_D0_CS	, 0x0568, 0x0198, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__CCM_DI1_EXT_CLK	, 0x0568, 0x0198, 2, 0x07D0, 0, 0)
++MX6_PAD_DECL(EIM_DA13__MIPI_CORE_DPHY_TEST_OUT_15	, 0x0568, 0x0198, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__SDMA_DEBUG_EVT_CHN_LINES_4	, 0x0568, 0x0198, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__GPIO_3_13		, 0x0568, 0x0198, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__TPSMP_HDATA_27	, 0x0568, 0x0198, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__SRC_BT_CFG_13		, 0x0568, 0x0198, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__EPDC_SDDO_13		, 0x0568, 0x0198, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__WEIM_WEIM_DA_A_14	, 0x056C, 0x019C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__IPU1_DI1_D1_CS	, 0x056C, 0x019C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__CCM_DI0_EXT_CLK	, 0x056C, 0x019C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__MIPI_CORE_DPHY_TEST_OUT_16	, 0x056C, 0x019C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__SDMA_DEBUG_EVT_CHN_LINES_5	, 0x056C, 0x019C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__GPIO_3_14		, 0x056C, 0x019C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__TPSMP_HDATA_28	, 0x056C, 0x019C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__SRC_BT_CFG_14		, 0x056C, 0x019C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__EPDC_SDDO_14		, 0x056C, 0x019C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__WEIM_WEIM_DA_A_15	, 0x0570, 0x01A0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__IPU1_DI1_PIN1		, 0x0570, 0x01A0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__IPU1_DI1_PIN4		, 0x0570, 0x01A0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__MIPI_CORE_DPHY_TEST_OUT_17	, 0x0570, 0x01A0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__GPIO_3_15		, 0x0570, 0x01A0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__TPSMP_HDATA_29	, 0x0570, 0x01A0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__SRC_BT_CFG_15		, 0x0570, 0x01A0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__EPDC_SDDO_9		, 0x0570, 0x01A0, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__WEIM_WEIM_DA_A_2	, 0x0574, 0x01A4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__IPU1_DISP1_DAT_7	, 0x0574, 0x01A4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__IPU1_CSI1_D_7		, 0x0574, 0x01A4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__MIPI_CORE_DPHY_TEST_OUT_4	, 0x0574, 0x01A4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__ANATOP_USBPHY1_TSTI_TX_HS_MODE	, 0x0574, 0x01A4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__GPIO_3_2		, 0x0574, 0x01A4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__TPSMP_HDATA_16		, 0x0574, 0x01A4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__SRC_BT_CFG_2		, 0x0574, 0x01A4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__EPDC_BDR_0		, 0x0574, 0x01A4, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__WEIM_WEIM_DA_A_3	, 0x0578, 0x01A8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__IPU1_DISP1_DAT_6	, 0x0578, 0x01A8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__IPU1_CSI1_D_6		, 0x0578, 0x01A8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__MIPI_CORE_DPHY_TEST_OUT_5	, 0x0578, 0x01A8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__ANATOP_USBPHY1_TSTI_TX_HIZ	, 0x0578, 0x01A8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__GPIO_3_3		, 0x0578, 0x01A8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__TPSMP_HDATA_17		, 0x0578, 0x01A8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__SRC_BT_CFG_3		, 0x0578, 0x01A8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__EPDC_BDR_1		, 0x0578, 0x01A8, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__WEIM_WEIM_DA_A_4	, 0x057C, 0x01AC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__IPU1_DISP1_DAT_5	, 0x057C, 0x01AC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__IPU1_CSI1_D_5		, 0x057C, 0x01AC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__MIPI_CORE_DPHY_TEST_OUT_6	, 0x057C, 0x01AC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__ANATOP_USBPHY1_TSTI_TX_EN	, 0x057C, 0x01AC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__GPIO_3_4		, 0x057C, 0x01AC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__TPSMP_HDATA_18		, 0x057C, 0x01AC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__SRC_BT_CFG_4		, 0x057C, 0x01AC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__EPDC_SDCE_0		, 0x057C, 0x01AC, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__WEIM_WEIM_DA_A_5	, 0x0580, 0x01B0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__IPU1_DISP1_DAT_4	, 0x0580, 0x01B0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__IPU1_CSI1_D_4		, 0x0580, 0x01B0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__MIPI_CORE_DPHY_TEST_OUT_7	, 0x0580, 0x01B0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__ANATOP_USBPHY1_TSTI_TX_DP	, 0x0580, 0x01B0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__GPIO_3_5		, 0x0580, 0x01B0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__TPSMP_HDATA_19		, 0x0580, 0x01B0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__SRC_BT_CFG_5		, 0x0580, 0x01B0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__EPDC_SDCE_1		, 0x0580, 0x01B0, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__WEIM_WEIM_DA_A_6	, 0x0584, 0x01B4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__IPU1_DISP1_DAT_3	, 0x0584, 0x01B4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__IPU1_CSI1_D_3		, 0x0584, 0x01B4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__MIPI_CORE_DPHY_TEST_OUT_8	, 0x0584, 0x01B4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__ANATOP_USBPHY1_TSTI_TX_DN	, 0x0584, 0x01B4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__GPIO_3_6		, 0x0584, 0x01B4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__TPSMP_HDATA_20		, 0x0584, 0x01B4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__SRC_BT_CFG_6		, 0x0584, 0x01B4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__EPDC_SDCE_2		, 0x0584, 0x01B4, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__WEIM_WEIM_DA_A_7	, 0x0588, 0x01B8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__IPU1_DISP1_DAT_2	, 0x0588, 0x01B8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__IPU1_CSI1_D_2		, 0x0588, 0x01B8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__MIPI_CORE_DPHY_TEST_OUT_9	, 0x0588, 0x01B8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__GPIO_3_7		, 0x0588, 0x01B8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__TPSMP_HDATA_21		, 0x0588, 0x01B8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__SRC_BT_CFG_7		, 0x0588, 0x01B8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__EPDC_SDCE_3		, 0x0588, 0x01B8, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__WEIM_WEIM_DA_A_8	, 0x058C, 0x01BC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__IPU1_DISP1_DAT_1	, 0x058C, 0x01BC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__IPU1_CSI1_D_1		, 0x058C, 0x01BC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__MIPI_CORE_DPHY_TEST_OUT_10	, 0x058C, 0x01BC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__GPIO_3_8		, 0x058C, 0x01BC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__TPSMP_HDATA_22		, 0x058C, 0x01BC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__SRC_BT_CFG_8		, 0x058C, 0x01BC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__EPDC_SDCE_4		, 0x058C, 0x01BC, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__WEIM_WEIM_DA_A_9	, 0x0590, 0x01C0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__IPU1_DISP1_DAT_0	, 0x0590, 0x01C0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__IPU1_CSI1_D_0		, 0x0590, 0x01C0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__MIPI_CORE_DPHY_TEST_OUT_11	, 0x0590, 0x01C0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__GPIO_3_9		, 0x0590, 0x01C0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__TPSMP_HDATA_23		, 0x0590, 0x01C0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__SRC_BT_CFG_9		, 0x0590, 0x01C0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__EPDC_SDCE_5		, 0x0590, 0x01C0, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__WEIM_WEIM_EB_0		, 0x0594, 0x01C4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__IPU1_DISP1_DAT_11	, 0x0594, 0x01C4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__IPU1_CSI1_D_11		, 0x0594, 0x01C4, 2, 0x088C, 1, 0)
++MX6_PAD_DECL(EIM_EB0__MIPI_CORE_DPHY_TEST_OUT_0	, 0x0594, 0x01C4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__CCM_PMIC_RDY		, 0x0594, 0x01C4, 4, 0x07D4, 0, 0)
++MX6_PAD_DECL(EIM_EB0__GPIO_2_28		, 0x0594, 0x01C4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__TPSMP_HDATA_12		, 0x0594, 0x01C4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__SRC_BT_CFG_27		, 0x0594, 0x01C4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__EPDC_PWRCOM		, 0x0594, 0x01C4, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__WEIM_WEIM_EB_1		, 0x0598, 0x01C8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__IPU1_DISP1_DAT_10	, 0x0598, 0x01C8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__IPU1_CSI1_D_10		, 0x0598, 0x01C8, 2, 0x0888, 1, 0)
++MX6_PAD_DECL(EIM_EB1__MIPI_CORE_DPHY_TEST_OUT_1	, 0x0598, 0x01C8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__GPIO_2_29		, 0x0598, 0x01C8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__TPSMP_HDATA_13		, 0x0598, 0x01C8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__SRC_BT_CFG_28		, 0x0598, 0x01C8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__EPDC_SDSHR		, 0x0598, 0x01C8, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB2__WEIM_WEIM_EB_2		, 0x059C, 0x01CC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB2__ECSPI1_SS0		, 0x059C, 0x01CC, 1, 0x07E4, 2, 0)
++MX6_PAD_DECL(EIM_EB2__CCM_DI1_EXT_CLK	, 0x059C, 0x01CC, 2, 0x07D0, 1, 0)
++MX6_PAD_DECL(EIM_EB2__IPU1_CSI1_D_19		, 0x059C, 0x01CC, 3, 0x08AC, 1, 0)
++MX6_PAD_DECL(EIM_EB2__HDMI_TX_DDC_SCL	, 0x059C, 0x01CC, 4, 0x0860, 0, 0)
++MX6_PAD_DECL(EIM_EB2__GPIO_2_30		, 0x059C, 0x01CC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB2__I2C2_SCL		, 0x059C, 0x01CC, 6 | IOMUX_CONFIG_SION, 0x0870, 0, 0)
++MX6_PAD_DECL(EIM_EB2__SRC_BT_CFG_30		, 0x059C, 0x01CC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB2__EPDC_SDDO_5		, 0x059C, 0x01CC, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__WEIM_WEIM_EB_3		, 0x05A0, 0x01D0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__ECSPI4_RDY		, 0x05A0, 0x01D0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__UART3_CTS		, 0x05A0, 0x01D0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__UART3_RTS		, 0x05A0, 0x01D0, 2, 0x0908, 3, 0)
++MX6_PAD_DECL(EIM_EB3__UART1_RI		, 0x05A0, 0x01D0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__IPU1_CSI1_HSYNC	, 0x05A0, 0x01D0, 4, 0x08B4, 1, 0)
++MX6_PAD_DECL(EIM_EB3__GPIO_2_31		, 0x05A0, 0x01D0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__IPU1_DI1_PIN3		, 0x05A0, 0x01D0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__SRC_BT_CFG_31		, 0x05A0, 0x01D0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__EPDC_SDCE_0		, 0x05A0, 0x01D0, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__WEIM_ACLK_FREERUN	, 0x05A0, 0x01D0, 9, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__WEIM_WEIM_LBA		, 0x05A4, 0x01D4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__IPU1_DI1_PIN17		, 0x05A4, 0x01D4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__ECSPI2_SS1		, 0x05A4, 0x01D4, 2, 0x0804, 1, 0)
++MX6_PAD_DECL(EIM_LBA__GPIO_2_27		, 0x05A4, 0x01D4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__TPSMP_HDATA_11		, 0x05A4, 0x01D4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__SRC_BT_CFG_26		, 0x05A4, 0x01D4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__EPDC_SDDO_4		, 0x05A4, 0x01D4, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__WEIM_WEIM_OE		, 0x05A8, 0x01D8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__IPU1_DI1_PIN7		, 0x05A8, 0x01D8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__ECSPI2_MISO		, 0x05A8, 0x01D8, 2, 0x07F8, 2, 0)
++MX6_PAD_DECL(EIM_OE__MIPI_CORE_DPHY_TEST_OUT_26	, 0x05A8, 0x01D8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__GPIO_2_25		, 0x05A8, 0x01D8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__TPSMP_HDATA_9		, 0x05A8, 0x01D8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__EPDC_PWRIRQ		, 0x05A8, 0x01D8, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__WEIM_WEIM_RW		, 0x05AC, 0x01DC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__IPU1_DI1_PIN8		, 0x05AC, 0x01DC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__ECSPI2_SS0		, 0x05AC, 0x01DC, 2, 0x0800, 2, 0)
++MX6_PAD_DECL(EIM_RW__MIPI_CORE_DPHY_TEST_OUT_27	, 0x05AC, 0x01DC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__GPIO_2_26		, 0x05AC, 0x01DC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__TPSMP_HDATA_10		, 0x05AC, 0x01DC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__SRC_BT_CFG_29		, 0x05AC, 0x01DC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__EPDC_SDDO_7		, 0x05AC, 0x01DC, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__WEIM_WEIM_WAIT	, 0x05B0, 0x01E0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__WEIM_WEIM_DTACK_B	, 0x05B0, 0x01E0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__GPIO_5_0		, 0x05B0, 0x01E0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__TPSMP_HDATA_30	, 0x05B0, 0x01E0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__SRC_BT_CFG_25		, 0x05B0, 0x01E0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__ENET_RX_EN		, 0x05B4, 0x01E4, 1, 0x0828, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__ESAI1_SCKT		, 0x05B4, 0x01E4, 2, 0x0840, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__SPDIF_SPDIF_EXTCLK	, 0x05B4, 0x01E4, 3, 0x08F4, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__GPIO_1_25		, 0x05B4, 0x01E4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__PHY_TDO		, 0x05B4, 0x01E4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__ANATOP_USBPHY1_TSTO_RX_FS_RXD	, 0x05B4, 0x01E4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__MLB_MLBDAT		, 0x05B8, 0x01E8, 0, 0x08E0, 0, 0)
++MX6_PAD_DECL(ENET_MDC__ENET_MDC		, 0x05B8, 0x01E8, 1, 0x0000, 0,  0)
++MX6_PAD_DECL(ENET_MDC__ESAI1_TX5_RX0		, 0x05B8, 0x01E8, 2, 0x0858, 0, 0)
++MX6_PAD_DECL(ENET_MDC__ENET_1588_EVENT1_IN	, 0x05B8, 0x01E8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__GPIO_1_31		, 0x05B8, 0x01E8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__ANATOP_USBPHY2_TSTO_RX_DISCON_DET	, 0x05B8, 0x01E8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__ENET_MDIO		, 0x05BC, 0x01EC, 1, 0x0810, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__ESAI1_SCKR		, 0x05BC, 0x01EC, 2, 0x083C, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__SDMA_DEBUG_BUS_DEVICE_3	, 0x05BC, 0x01EC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__ENET_1588_EVENT1_OUT	, 0x05BC, 0x01EC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__GPIO_1_22		, 0x05BC, 0x01EC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__SPDIF_PLOCK		, 0x05BC, 0x01EC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__ENET_TX_CLK	, 0x05C0, 0x01F0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__ESAI1_FSR		, 0x05C0, 0x01F0, 2, 0x082C, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__SDMA_DEBUG_BUS_DEVICE_4	, 0x05C0, 0x01F0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__GPIO_1_23		, 0x05C0, 0x01F0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__SPDIF_SRCLK	, 0x05C0, 0x01F0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__ANATOP_USBPHY1_TSTO_RX_SQUELCH	, 0x05C0, 0x01F0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__ANATOP_USBOTG_ID	, 0x05C4, 0x01F4, 0, 0x0790, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__ENET_RX_ER		, 0x05C4, 0x01F4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__ESAI1_HCKR		, 0x05C4, 0x01F4, 2, 0x0834, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__SPDIF_IN1		, 0x05C4, 0x01F4, 3, 0x08F0, 1, 0)
++MX6_PAD_DECL(ENET_RX_ER__ENET_1588_EVENT2_OUT	, 0x05C4, 0x01F4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__GPIO_1_24		, 0x05C4, 0x01F4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__PHY_TDI		, 0x05C4, 0x01F4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__ANATOP_USBPHY1_TSTO_RX_HS_RXD	, 0x05C4, 0x01F4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__OSC32K_32K_OUT	, 0x05C8, 0x01F8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__ENET_RDATA_0		, 0x05C8, 0x01F8, 1, 0x0818, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__ESAI1_HCKT		, 0x05C8, 0x01F8, 2, 0x0838, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__SPDIF_OUT1		, 0x05C8, 0x01F8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__GPIO_1_27		, 0x05C8, 0x01F8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__PHY_TMS		, 0x05C8, 0x01F8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__ANATOP_USBPHY1_TSTO_PLL_CLK20DIV	, 0x05C8, 0x01F8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__MLB_MLBSIG		, 0x05CC, 0x01FC, 0, 0x08E4, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__ENET_RDATA_1		, 0x05CC, 0x01FC, 1, 0x081C, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__ESAI1_FST		, 0x05CC, 0x01FC, 2, 0x0830, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__ENET_1588_EVENT3_OUT	, 0x05CC, 0x01FC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__GPIO_1_26		, 0x05CC, 0x01FC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__PHY_TCK		, 0x05CC, 0x01FC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__ANATOP_USBPHY1_TSTO_RX_DISCON_DET	, 0x05CC, 0x01FC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__ENET_TX_EN		, 0x05D0, 0x0200, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__ESAI1_TX3_RX2	, 0x05D0, 0x0200, 2, 0x0850, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__GPIO_1_28		, 0x05D0, 0x0200, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__ANATOP_USBPHY2_TSTO_RX_SQUELCH	, 0x05D0, 0x0200, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__I2C4_SCL		, 0x05D0, 0x0200, 9 | IOMUX_CONFIG_SION, 0x0880, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__ENET_TDATA_0		, 0x05D4, 0x0204, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__ESAI1_TX4_RX1	, 0x05D4, 0x0204, 2, 0x0854, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__GPIO_1_30		, 0x05D4, 0x0204, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__ANATOP_USBPHY2_TSTO_RX_FS_RXD	, 0x05D4, 0x0204, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__MLB_MLBCLK		, 0x05D8, 0x0208, 0, 0x08DC, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__ENET_TDATA_1		, 0x05D8, 0x0208, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__ESAI1_TX2_RX3	, 0x05D8, 0x0208, 2, 0x084C, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__ENET_1588_EVENT0_IN	, 0x05D8, 0x0208, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__GPIO_1_29		, 0x05D8, 0x0208, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__ANATOP_USBPHY2_TSTO_RX_HS_RXD	, 0x05D8, 0x0208, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__I2C4_SDA		, 0x05D8, 0x0208, 9 | IOMUX_CONFIG_SION, 0x0884, 0, 0)
++MX6_PAD_DECL(GPIO_0__CCM_CLKO		, 0x05DC, 0x020C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__KPP_COL_5		, 0x05DC, 0x020C, 2, 0x08C0, 1, 0)
++MX6_PAD_DECL(GPIO_0__ASRC_ASRC_EXT_CLK	, 0x05DC, 0x020C, 3, 0x0794, 0, 0)
++MX6_PAD_DECL(GPIO_0__EPIT1_EPITO		, 0x05DC, 0x020C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__GPIO_1_0		, 0x05DC, 0x020C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__USBOH3_USBH1_PWR	, 0x05DC, 0x020C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__SNVS_HP_WRAPPER_SNVS_VIO_5	, 0x05DC, 0x020C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__ESAI1_SCKR		, 0x05E0, 0x0210, 0, 0x083C, 1, 0)
++MX6_PAD_DECL(GPIO_1__WDOG2_WDOG_B		, 0x05E0, 0x0210, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__KPP_ROW_5		, 0x05E0, 0x0210, 2, 0x08CC, 1, 0)
++MX6_PAD_DECL(GPIO_1__USB_OTG_ID		, 0x05E0, 0x0210, 3, 0x0790, 1, 0)
++MX6_PAD_DECL(GPIO_1__PWM2_PWMO		, 0x05E0, 0x0210, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__GPIO_1_1		, 0x05E0, 0x0210, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__USDHC1_CD		, 0x05E0, 0x0210, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__SRC_TESTER_ACK		, 0x05E0, 0x0210, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__ESAI1_TX3_RX2		, 0x05E4, 0x0214, 0, 0x0850, 1, 0)
++MX6_PAD_DECL(GPIO_16__ENET_1588_EVENT2_IN	, 0x05E4, 0x0214, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT	, 0x05E4, 0x0214, 2, 0x080C, 0, 0)
++MX6_PAD_DECL(GPIO_16__USDHC1_LCTL		, 0x05E4, 0x0214, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__SPDIF_IN1		, 0x05E4, 0x0214, 4, 0x08F0, 2, 0)
++MX6_PAD_DECL(GPIO_16__GPIO_7_11		, 0x05E4, 0x0214, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__I2C3_SDA		, 0x05E4, 0x0214, 6 | IOMUX_CONFIG_SION, 0x087C, 1, 0)
++MX6_PAD_DECL(GPIO_16__SJC_DE_B		, 0x05E4, 0x0214, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__ESAI1_TX0		, 0x05E8, 0x0218, 0, 0x0844, 0, 0)
++MX6_PAD_DECL(GPIO_17__ENET_1588_EVENT3_IN	, 0x05E8, 0x0218, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__CCM_PMIC_RDY		, 0x05E8, 0x0218, 2, 0x07D4, 1, 0)
++MX6_PAD_DECL(GPIO_17__SDMA_SDMA_EXT_EVENT_0	, 0x05E8, 0x0218, 3, 0x08E8, 1, 0)
++MX6_PAD_DECL(GPIO_17__SPDIF_OUT1		, 0x05E8, 0x0218, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__GPIO_7_12		, 0x05E8, 0x0218, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__SJC_JTAG_ACT		, 0x05E8, 0x0218, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__ESAI1_TX1		, 0x05EC, 0x021C, 0, 0x0848, 0, 0)
++MX6_PAD_DECL(GPIO_18__ENET_RX_CLK		, 0x05EC, 0x021C, 1, 0x0814, 0, 0)
++MX6_PAD_DECL(GPIO_18__USDHC3_VSELECT		, 0x05EC, 0x021C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__SDMA_SDMA_EXT_EVENT_1	, 0x05EC, 0x021C, 3, 0x08EC, 1, 0)
++MX6_PAD_DECL(GPIO_18__ASRC_ASRC_EXT_CLK	, 0x05EC, 0x021C, 4, 0x0794, 1, 0)
++MX6_PAD_DECL(GPIO_18__GPIO_7_13		, 0x05EC, 0x021C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__SNVS_HP_WRAPPER_SNVS_VIO_5_CTL	, 0x05EC, 0x021C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__SRC_SYSTEM_RST		, 0x05EC, 0x021C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__KPP_COL_5		, 0x05F0, 0x0220, 0, 0x08C0, 2, 0)
++MX6_PAD_DECL(GPIO_19__ENET_1588_EVENT0_OUT	, 0x05F0, 0x0220, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__SPDIF_OUT1		, 0x05F0, 0x0220, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__CCM_CLKO		, 0x05F0, 0x0220, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__ECSPI1_RDY		, 0x05F0, 0x0220, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__GPIO_4_5		, 0x05F0, 0x0220, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__ENET_TX_ER		, 0x05F0, 0x0220, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__SRC_INT_BOOT		, 0x05F0, 0x0220, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__ESAI1_FST		, 0x05F4, 0x0224, 0, 0x0830, 1, 0)
++MX6_PAD_DECL(GPIO_2__OBSERVE_MUX_OBSRV_INT_OUT2	, 0x05F4, 0x0224, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__KPP_ROW_6		, 0x05F4, 0x0224, 2, 0x08D0, 1, 0)
++MX6_PAD_DECL(GPIO_2__CCM_CCM_OUT_1		, 0x05F4, 0x0224, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__CSU_CSU_ALARM_AUT_0	, 0x05F4, 0x0224, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__GPIO_1_2		, 0x05F4, 0x0224, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__USDHC2_WP		, 0x05F4, 0x0224, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__MLB_MLBDAT		, 0x05F4, 0x0224, 7, 0x08E0, 1, 0)
++MX6_PAD_DECL(GPIO_3__ESAI1_HCKR		, 0x05F8, 0x0228, 0, 0x0834, 1, 0)
++MX6_PAD_DECL(GPIO_3__OBSERVE_MUX_OBSRV_INT_OUT0	, 0x05F8, 0x0228, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__I2C3_SCL		, 0x05F8, 0x0228, 2 | IOMUX_CONFIG_SION, 0x0878, 1, 0)
++MX6_PAD_DECL(GPIO_3__ANATOP_ANATOP_24M_OUT	, 0x05F8, 0x0228, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__CCM_CLKO2		, 0x05F8, 0x0228, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__GPIO_1_3		, 0x05F8, 0x0228, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__USBOH3_USBH1_OC		, 0x05F8, 0x0228, 6, 0x0924, 1, 0)
++MX6_PAD_DECL(GPIO_3__MLB_MLBCLK		, 0x05F8, 0x0228, 7, 0x08DC, 1, 0)
++MX6_PAD_DECL(GPIO_4__ESAI1_HCKT		, 0x05FC, 0x022C, 0, 0x0838, 1, 0)
++MX6_PAD_DECL(GPIO_4__OBSERVE_MUX_OBSRV_INT_OUT3	, 0x05FC, 0x022C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__KPP_COL_7		, 0x05FC, 0x022C, 2, 0x08C8, 1, 0)
++MX6_PAD_DECL(GPIO_4__CCM_CCM_OUT_2		, 0x05FC, 0x022C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__CSU_CSU_ALARM_AUT_1	, 0x05FC, 0x022C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__GPIO_1_4		, 0x05FC, 0x022C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__USDHC2_CD		, 0x05FC, 0x022C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__OCOTP_CTRL_WRAPPER_FUSE_LATCHED	, 0x05FC, 0x022C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__ESAI1_TX2_RX3		, 0x0600, 0x0230, 0, 0x084C, 1, 0)
++MX6_PAD_DECL(GPIO_5__OBSERVE_MUX_OBSRV_INT_OUT4	, 0x0600, 0x0230, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__KPP_ROW_7		, 0x0600, 0x0230, 2, 0x08D4, 1, 0)
++MX6_PAD_DECL(GPIO_5__CCM_CLKO		, 0x0600, 0x0230, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__CSU_CSU_ALARM_AUT_2	, 0x0600, 0x0230, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__GPIO_1_5		, 0x0600, 0x0230, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__I2C3_SCL		, 0x0600, 0x0230, 6 | IOMUX_CONFIG_SION, 0x0878, 2, 0)
++MX6_PAD_DECL(GPIO_5__SIMBA_EVENTI		, 0x0600, 0x0230, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__ESAI1_SCKT		, 0x0604, 0x0234, 0, 0x0840, 1, 0)
++MX6_PAD_DECL(GPIO_6__OBSERVE_MUX_OBSRV_INT_OUT1	, 0x0604, 0x0234, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__I2C3_SDA		, 0x0604, 0x0234, 2 | IOMUX_CONFIG_SION, 0x087C, 2, 0)
++MX6_PAD_DECL(GPIO_6__CCM_CCM_OUT_0		, 0x0604, 0x0234, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__CSU_CSU_INT_DEB		, 0x0604, 0x0234, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__GPIO_1_6		, 0x0604, 0x0234, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__USDHC2_LCTL		, 0x0604, 0x0234, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__MLB_MLBSIG		, 0x0604, 0x0234, 7, 0x08E4, 1, 0)
++MX6_PAD_DECL(GPIO_7__ESAI1_TX4_RX1		, 0x0608, 0x0238, 0, 0x0854, 1, 0)
++MX6_PAD_DECL(GPIO_7__EPIT1_EPITO		, 0x0608, 0x0238, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__CAN1_TXCAN		, 0x0608, 0x0238, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__UART2_TXD		, 0x0608, 0x0238, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__UART2_RXD		, 0x0608, 0x0238, 4, 0x0904, 2, 0)
++MX6_PAD_DECL(GPIO_7__GPIO_1_7		, 0x0608, 0x0238, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__SPDIF_PLOCK		, 0x0608, 0x0238, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__USBOH3_OTGUSB_HOST_MODE	, 0x0608, 0x0238, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__I2C4_SCL		, 0x0608, 0x0238, 8 | IOMUX_CONFIG_SION, 0x0880, 1, 0)
++MX6_PAD_DECL(GPIO_8__ESAI1_TX5_RX0		, 0x060C, 0x023C, 0, 0x0858, 1, 0)
++MX6_PAD_DECL(GPIO_8__ANATOP_ANATOP_32K_OUT	, 0x060C, 0x023C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__EPIT2_EPITO		, 0x060C, 0x023C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__CAN1_RXCAN		, 0x060C, 0x023C, 3, 0x07C8, 0, 0)
++MX6_PAD_DECL(GPIO_8__UART2_TXD		, 0x060C, 0x023C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__UART2_RXD		, 0x060C, 0x023C, 4, 0x0904, 3, 0)
++MX6_PAD_DECL(GPIO_8__GPIO_1_8		, 0x060C, 0x023C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__SPDIF_SRCLK		, 0x060C, 0x023C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__USBOH3_OTGUSB_PWRCTL_WAKEUP	, 0x060C, 0x023C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__I2C4_SDA		, 0x060C, 0x023C, 8 | IOMUX_CONFIG_SION, 0x0884, 1, 0)
++MX6_PAD_DECL(GPIO_9__ESAI1_FSR		, 0x0610, 0x0240, 0, 0x082C, 1, 0)
++MX6_PAD_DECL(GPIO_9__WDOG1_WDOG_B		, 0x0610, 0x0240, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__KPP_COL_6		, 0x0610, 0x0240, 2, 0x08C4, 1, 0)
++MX6_PAD_DECL(GPIO_9__CCM_REF_EN_B		, 0x0610, 0x0240, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__PWM1_PWMO		, 0x0610, 0x0240, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__GPIO_1_9		, 0x0610, 0x0240, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__USDHC1_WP		, 0x0610, 0x0240, 6, 0x092C, 1, 0)
++MX6_PAD_DECL(GPIO_9__SRC_EARLY_RST		, 0x0610, 0x0240, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_MOD__SJC_MOD		, 0x0614, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TCK__SJC_TCK		, 0x0618, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TDI__SJC_TDI		, 0x061C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TDO__SJC_TDO		, 0x0620, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TMS__SJC_TMS		, 0x0624, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TRSTB__SJC_TRSTB		, 0x0628, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__ECSPI1_SCLK		, 0x062C, 0x0244, 0, 0x07D8, 3, 0)
++MX6_PAD_DECL(KEY_COL0__ENET_RDATA_3		, 0x062C, 0x0244, 1, 0x0824, 0, 0)
++MX6_PAD_DECL(KEY_COL0__AUDMUX_AUD5_TXC	, 0x062C, 0x0244, 2, 0x07C0, 1, 0)
++MX6_PAD_DECL(KEY_COL0__KPP_COL_0		, 0x062C, 0x0244, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__UART4_TXD		, 0x062C, 0x0244, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__UART4_RXD		, 0x062C, 0x0244, 4, 0x0914, 2, 0)
++MX6_PAD_DECL(KEY_COL0__GPIO_4_6		, 0x062C, 0x0244, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__DCIC1_DCIC_OUT	, 0x062C, 0x0244, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__SRC_ANY_PU_RST	, 0x062C, 0x0244, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__ECSPI1_MISO		, 0x0630, 0x0248, 0, 0x07DC, 3, 0)
++MX6_PAD_DECL(KEY_COL1__ENET_MDIO		, 0x0630, 0x0248, 1, 0x0810, 1, 0)
++MX6_PAD_DECL(KEY_COL1__AUDMUX_AUD5_TXFS	, 0x0630, 0x0248, 2, 0x07C4, 1, 0)
++MX6_PAD_DECL(KEY_COL1__KPP_COL_1		, 0x0630, 0x0248, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__UART5_TXD		, 0x0630, 0x0248, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__UART5_RXD		, 0x0630, 0x0248, 4, 0x091C, 2, 0)
++MX6_PAD_DECL(KEY_COL1__GPIO_4_8		, 0x0630, 0x0248, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__USDHC1_VSELECT	, 0x0630, 0x0248, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__PL301_SIM_MX6DL_PER1_HADDR_1	, 0x0630, 0x0248, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__ECSPI1_SS1		, 0x0634, 0x024C, 0, 0x07E8, 2, 0)
++MX6_PAD_DECL(KEY_COL2__ENET_RDATA_2		, 0x0634, 0x024C, 1, 0x0820, 0, 0)
++MX6_PAD_DECL(KEY_COL2__CAN1_TXCAN		, 0x0634, 0x024C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__KPP_COL_2		, 0x0634, 0x024C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__ENET_MDC		, 0x0634, 0x024C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__GPIO_4_10		, 0x0634, 0x024C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__USBOH3_H1USB_PWRCTL_WAKEUP	, 0x0634, 0x024C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__PL301_SIM_MX6DL_PER1_HADDR_3	, 0x0634, 0x024C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__ECSPI1_SS3		, 0x0638, 0x0250, 0, 0x07F0, 1, 0)
++MX6_PAD_DECL(KEY_COL3__ENET_CRS		, 0x0638, 0x0250, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__HDMI_TX_DDC_SCL	, 0x0638, 0x0250, 2, 0x0860, 1, 0)
++MX6_PAD_DECL(KEY_COL3__KPP_COL_3		, 0x0638, 0x0250, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__I2C2_SCL		, 0x0638, 0x0250, 4 | IOMUX_CONFIG_SION, 0x0870, 1, 0)
++MX6_PAD_DECL(KEY_COL3__GPIO_4_12		, 0x0638, 0x0250, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__SPDIF_IN1		, 0x0638, 0x0250, 6, 0x08F0, 3, 0)
++MX6_PAD_DECL(KEY_COL3__PL301_SIM_MX6DL_PER1_HADDR_5	, 0x0638, 0x0250, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__CAN2_TXCAN		, 0x063C, 0x0254, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__IPU1_SISG_4		, 0x063C, 0x0254, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__USBOH3_USBOTG_OC	, 0x063C, 0x0254, 2, 0x0920, 1, 0)
++MX6_PAD_DECL(KEY_COL4__KPP_COL_4		, 0x063C, 0x0254, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__UART5_CTS		, 0x063C, 0x0254, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__UART5_RTS		, 0x063C, 0x0254, 4, 0x0918, 2, 0)
++MX6_PAD_DECL(KEY_COL4__GPIO_4_14		, 0x063C, 0x0254, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__MMDC_MMDC_DEBUG_49	, 0x063C, 0x0254, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__PL301_SIM_MX6DL_PER1_HADDR_7	, 0x063C, 0x0254, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__ECSPI1_MOSI		, 0x0640, 0x0258, 0, 0x07E0, 3, 0)
++MX6_PAD_DECL(KEY_ROW0__ENET_TDATA_3		, 0x0640, 0x0258, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__AUDMUX_AUD5_TXD	, 0x0640, 0x0258, 2, 0x07B4, 1, 0)
++MX6_PAD_DECL(KEY_ROW0__KPP_ROW_0		, 0x0640, 0x0258, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__UART4_TXD		, 0x0640, 0x0258, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__UART4_RXD		, 0x0640, 0x0258, 4, 0x0914, 3, 0)
++MX6_PAD_DECL(KEY_ROW0__GPIO_4_7		, 0x0640, 0x0258, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__DCIC2_DCIC_OUT	, 0x0640, 0x0258, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__PL301_SIM_MX6DL_PER1_HADDR_0	, 0x0640, 0x0258, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__ECSPI1_SS0		, 0x0644, 0x025C, 0, 0x07E4, 3, 0)
++MX6_PAD_DECL(KEY_ROW1__ENET_COL		, 0x0644, 0x025C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__AUDMUX_AUD5_RXD	, 0x0644, 0x025C, 2, 0x07B0, 1, 0)
++MX6_PAD_DECL(KEY_ROW1__KPP_ROW_1		, 0x0644, 0x025C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__UART5_TXD		, 0x0644, 0x025C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__UART5_RXD		, 0x0644, 0x025C, 4, 0x091C, 3, 0)
++MX6_PAD_DECL(KEY_ROW1__GPIO_4_9		, 0x0644, 0x025C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__USDHC2_VSELECT	, 0x0644, 0x025C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__PL301_SIM_MX6DL_PER1_HADDR_2	, 0x0644, 0x025C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__ECSPI1_SS2		, 0x0648, 0x0260, 0, 0x07EC, 1, 0)
++MX6_PAD_DECL(KEY_ROW2__ENET_TDATA_2		, 0x0648, 0x0260, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__CAN1_RXCAN		, 0x0648, 0x0260, 2, 0x07C8, 1, 0)
++MX6_PAD_DECL(KEY_ROW2__KPP_ROW_2		, 0x0648, 0x0260, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__USDHC2_VSELECT	, 0x0648, 0x0260, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__GPIO_4_11		, 0x0648, 0x0260, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__HDMI_TX_CEC_LINE	, 0x0648, 0x0260, 6, 0x085C, 1, 0)
++MX6_PAD_DECL(KEY_ROW2__PL301_SIM_MX6DL_PER1_HADDR_4	, 0x0648, 0x0260, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__OSC32K_32K_OUT	, 0x064C, 0x0264, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__ASRC_ASRC_EXT_CLK	, 0x064C, 0x0264, 1, 0x0794, 2, 0)
++MX6_PAD_DECL(KEY_ROW3__HDMI_TX_DDC_SDA	, 0x064C, 0x0264, 2, 0x0864, 1, 0)
++MX6_PAD_DECL(KEY_ROW3__KPP_ROW_3		, 0x064C, 0x0264, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__I2C2_SDA		, 0x064C, 0x0264, 4 | IOMUX_CONFIG_SION, 0x0874, 1, 0)
++MX6_PAD_DECL(KEY_ROW3__GPIO_4_13		, 0x064C, 0x0264, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__USDHC1_VSELECT	, 0x064C, 0x0264, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__PL301_SIM_MX6DL_PER1_HADDR_6	, 0x064C, 0x0264, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__CAN2_RXCAN		, 0x0650, 0x0268, 0, 0x07CC, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__IPU1_SISG_5		, 0x0650, 0x0268, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__USBOH3_USBOTG_PWR	, 0x0650, 0x0268, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__KPP_ROW_4		, 0x0650, 0x0268, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__UART5_CTS		, 0x0650, 0x0268, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__UART5_RTS		, 0x0650, 0x0268, 4, 0x0918, 3, 0)
++MX6_PAD_DECL(KEY_ROW4__GPIO_4_15		, 0x0650, 0x0268, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__MMDC_MMDC_DEBUG_50	, 0x0650, 0x0268, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__PL301_SIM_MX6DL_PER1_HADDR_8	, 0x0650, 0x0268, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_CLK_P__LDB_LVDS0_CLK	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX0_P__LDB_LVDS0_TX0	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX1_P__LDB_LVDS0_TX1	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX2_P__LDB_LVDS0_TX2	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX3_P__LDB_LVDS0_TX3	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_CLK_P__LDB_LVDS1_CLK	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX0_P__LDB_LVDS1_TX0	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX1_P__LDB_LVDS1_TX1	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX2_P__LDB_LVDS1_TX2	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX3_P__LDB_LVDS1_TX3	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__RAWNAND_ALE		, 0x0654, 0x026C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__USDHC4_RST		, 0x0654, 0x026C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__PCIE_CTRL_DIAG_STATUS_BUS_MUX_0	, 0x0654, 0x026C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__USBOH3_UH3_DFD_OUT_12	, 0x0654, 0x026C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__USBOH3_UH2_DFD_OUT_12	, 0x0654, 0x026C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__GPIO_6_8		, 0x0654, 0x026C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__MIPI_CORE_DPHY_TEST_IN_24	, 0x0654, 0x026C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__USDHC3_CLKI		, 0x0654, 0x026C, 8, 0x0934, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__RAWNAND_CLE		, 0x0658, 0x0270, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__PCIE_CTRL_DIAG_STATUS_BUS_MUX_31	, 0x0658, 0x0270, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__USBOH3_UH3_DFD_OUT_11	, 0x0658, 0x0270, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__USBOH3_UH2_DFD_OUT_11	, 0x0658, 0x0270, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__GPIO_6_7		, 0x0658, 0x0270, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__MIPI_CORE_DPHY_TEST_IN_23	, 0x0658, 0x0270, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__USDHC3_CLKO		, 0x0658, 0x0270, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__RAWNAND_CE0N		, 0x065C, 0x0274, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__USBOH3_UH3_DFD_OUT_15	, 0x065C, 0x0274, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__USBOH3_UH2_DFD_OUT_15	, 0x065C, 0x0274, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__GPIO_6_11		, 0x065C, 0x0274, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__USDHC1_CLKO		, 0x065C, 0x0274, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__RAWNAND_CE1N		, 0x0660, 0x0278, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__USDHC4_VSELECT	, 0x0660, 0x0278, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__USDHC3_VSELECT	, 0x0660, 0x0278, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__PCIE_CTRL_DIAG_STATUS_BUS_MUX_3	, 0x0660, 0x0278, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__GPIO_6_14		, 0x0660, 0x0278, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__PL301_SIM_MX6DL_PER1_HREADYOUT	, 0x0660, 0x0278, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__USDHC1_CLKI		, 0x0660, 0x0278, 8, 0x0928, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__RAWNAND_CE2N		, 0x0664, 0x027C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__IPU1_SISG_0		, 0x0664, 0x027C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__ESAI1_TX0		, 0x0664, 0x027C, 2, 0x0844, 1, 0)
++MX6_PAD_DECL(NANDF_CS2__WEIM_WEIM_CRE	, 0x0664, 0x027C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__CCM_CLKO2		, 0x0664, 0x027C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__GPIO_6_15		, 0x0664, 0x027C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__USDHC2_CLKO		, 0x0664, 0x027C, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__RAWNAND_CE3N		, 0x0668, 0x0280, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__IPU1_SISG_1		, 0x0668, 0x0280, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__ESAI1_TX1		, 0x0668, 0x0280, 2, 0x0848, 1, 0)
++MX6_PAD_DECL(NANDF_CS3__WEIM_WEIM_A_26	, 0x0668, 0x0280, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__PCIE_CTRL_DIAG_STATUS_BUS_MUX_4	, 0x0668, 0x0280, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__GPIO_6_16		, 0x0668, 0x0280, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__TPSMP_CLK		, 0x0668, 0x0280, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__USDHC2_CLKI		, 0x0668, 0x0280, 8, 0x0930, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__I2C4_SDA		, 0x0668, 0x0280, 9 | IOMUX_CONFIG_SION, 0x0884, 2, 0)
++MX6_PAD_DECL(NANDF_D0__RAWNAND_D0		, 0x066C, 0x0284, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__USDHC1_DAT4		, 0x066C, 0x0284, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__GPU3D_GPU_DEBUG_OUT_0	, 0x066C, 0x0284, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__USBOH3_UH2_DFD_OUT_16	, 0x066C, 0x0284, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__USBOH3_UH3_DFD_OUT_16	, 0x066C, 0x0284, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__GPIO_2_0		, 0x066C, 0x0284, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__IPU1_IPU_DIAG_BUS_0	, 0x066C, 0x0284, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__RAWNAND_D1		, 0x0670, 0x0288, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__USDHC1_DAT5		, 0x0670, 0x0288, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__GPU3D_GPU_DEBUG_OUT_1	, 0x0670, 0x0288, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__USBOH3_UH2_DFD_OUT_17	, 0x0670, 0x0288, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__USBOH3_UH3_DFD_OUT_17	, 0x0670, 0x0288, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__GPIO_2_1		, 0x0670, 0x0288, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__IPU1_IPU_DIAG_BUS_1	, 0x0670, 0x0288, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__RAWNAND_D2		, 0x0674, 0x028C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__USDHC1_DAT6		, 0x0674, 0x028C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__GPU3D_GPU_DEBUG_OUT_2	, 0x0674, 0x028C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__USBOH3_UH2_DFD_OUT_18	, 0x0674, 0x028C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__USBOH3_UH3_DFD_OUT_18	, 0x0674, 0x028C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__GPIO_2_2		, 0x0674, 0x028C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__IPU1_IPU_DIAG_BUS_2	, 0x0674, 0x028C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__RAWNAND_D3		, 0x0678, 0x0290, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__USDHC1_DAT7		, 0x0678, 0x0290, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__GPU3D_GPU_DEBUG_OUT_3	, 0x0678, 0x0290, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__USBOH3_UH2_DFD_OUT_19	, 0x0678, 0x0290, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__USBOH3_UH3_DFD_OUT_19	, 0x0678, 0x0290, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__GPIO_2_3		, 0x0678, 0x0290, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__IPU1_IPU_DIAG_BUS_3	, 0x0678, 0x0290, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__RAWNAND_D4		, 0x067C, 0x0294, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__USDHC2_DAT4		, 0x067C, 0x0294, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__GPU3D_GPU_DEBUG_OUT_4	, 0x067C, 0x0294, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__USBOH3_UH2_DFD_OUT_20	, 0x067C, 0x0294, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__USBOH3_UH3_DFD_OUT_20	, 0x067C, 0x0294, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__GPIO_2_4		, 0x067C, 0x0294, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__IPU1_IPU_DIAG_BUS_4	, 0x067C, 0x0294, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__RAWNAND_D5		, 0x0680, 0x0298, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__USDHC2_DAT5		, 0x0680, 0x0298, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__GPU3D_GPU_DEBUG_OUT_5	, 0x0680, 0x0298, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__USBOH3_UH2_DFD_OUT_21	, 0x0680, 0x0298, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__USBOH3_UH3_DFD_OUT_21	, 0x0680, 0x0298, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__GPIO_2_5		, 0x0680, 0x0298, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__IPU1_IPU_DIAG_BUS_5	, 0x0680, 0x0298, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__RAWNAND_D6		, 0x0684, 0x029C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__USDHC2_DAT6		, 0x0684, 0x029C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__GPU3D_GPU_DEBUG_OUT_6	, 0x0684, 0x029C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__USBOH3_UH2_DFD_OUT_22	, 0x0684, 0x029C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__USBOH3_UH3_DFD_OUT_22	, 0x0684, 0x029C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__GPIO_2_6		, 0x0684, 0x029C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__IPU1_IPU_DIAG_BUS_6	, 0x0684, 0x029C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__RAWNAND_D7		, 0x0688, 0x02A0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__USDHC2_DAT7		, 0x0688, 0x02A0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__GPU3D_GPU_DEBUG_OUT_7	, 0x0688, 0x02A0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__USBOH3_UH2_DFD_OUT_23	, 0x0688, 0x02A0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__USBOH3_UH3_DFD_OUT_23	, 0x0688, 0x02A0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__GPIO_2_7		, 0x0688, 0x02A0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__IPU1_IPU_DIAG_BUS_7	, 0x0688, 0x02A0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__RAWNAND_READY0	, 0x068C, 0x02A4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__PCIE_CTRL_DIAG_STATUS_BUS_MUX_2	, 0x068C, 0x02A4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__USBOH3_UH3_DFD_OUT_14	, 0x068C, 0x02A4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__USBOH3_UH2_DFD_OUT_14	, 0x068C, 0x02A4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__GPIO_6_10		, 0x068C, 0x02A4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__MIPI_CORE_DPHY_TEST_OUT_33	, 0x068C, 0x02A4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__USDHC4_CLKI		, 0x068C, 0x02A4, 8, 0x0938, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__RAWNAND_RESETN	, 0x0690, 0x02A8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__PCIE_CTRL_DIAG_STATUS_BUS_MUX_1	, 0x0690, 0x02A8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__USBOH3_UH3_DFD_OUT_13	, 0x0690, 0x02A8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__USBOH3_UH2_DFD_OUT_13	, 0x0690, 0x02A8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__GPIO_6_9		, 0x0690, 0x02A8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__MIPI_CORE_DPHY_TEST_OUT_32	, 0x0690, 0x02A8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__USDHC4_CLKO		, 0x0690, 0x02A8, 8, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__I2C4_SCL		, 0x0690, 0x02A8, 9 | IOMUX_CONFIG_SION, 0x0880, 2, 0)
++MX6_PAD_DECL(PMIC_ON_REQ__SNVS_LP_WRAPPER_SNVS_WAKEUP_ALARM	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(PMIC_STBY_REQ__CCM_PMIC_VSTBY_REQ	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(POR_B__SRC_POR_B		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RESET_IN_B__SRC_RESET_B		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD0__MIPI_HSI_CTRL_RX_READY	, 0x0694, 0x02AC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD0__ENET_RGMII_RD0	, 0x0694, 0x02AC, 1, 0x0818, 1, 0)
++MX6_PAD_DECL(RGMII_RD0__GPIO_6_25		, 0x0694, 0x02AC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD0__MIPI_CORE_DPHY_TEST_IN_6	, 0x0694, 0x02AC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__MIPI_HSI_CTRL_TX_FLAG	, 0x0698, 0x02B0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__ENET_RGMII_RD1	, 0x0698, 0x02B0, 1, 0x081C, 1, 0)
++MX6_PAD_DECL(RGMII_RD1__GPIO_6_27		, 0x0698, 0x02B0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__MIPI_CORE_DPHY_TEST_IN_8	, 0x0698, 0x02B0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__SJC_FAIL		, 0x0698, 0x02B0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD2__MIPI_HSI_CTRL_TX_DATA	, 0x069C, 0x02B4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD2__ENET_RGMII_RD2	, 0x069C, 0x02B4, 1, 0x0820, 1, 0)
++MX6_PAD_DECL(RGMII_RD2__GPIO_6_28		, 0x069C, 0x02B4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD2__MIPI_CORE_DPHY_TEST_IN_9	, 0x069C, 0x02B4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD3__MIPI_HSI_CTRL_TX_WAKE	, 0x06A0, 0x02B8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD3__ENET_RGMII_RD3	, 0x06A0, 0x02B8, 1, 0x0824, 1, 0)
++MX6_PAD_DECL(RGMII_RD3__GPIO_6_29		, 0x06A0, 0x02B8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD3__MIPI_CORE_DPHY_TEST_IN_10	, 0x06A0, 0x02B8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__USBOH3_H3_DATA	, 0x06A4, 0x02BC, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__RGMII_RX_CTL	, 0x06A4, 0x02BC, 1, 0x0828, 1, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__GPIO_6_24		, 0x06A4, 0x02BC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__MIPI_CORE_DPHY_TEST_IN_5	, 0x06A4, 0x02BC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RXC__USBOH3_H3_STROBE	, 0x06A8, 0x02C0, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RXC__USBOH3_H3_STROBE_START	, 0x06A8, 0x02C0, 0 | IOMUX_CONFIG_SION, 0x0000, 0, PAD_CTL_PUS_47K_UP)
++MX6_PAD_DECL(RGMII_RXC__ENET_RGMII_RXC	, 0x06A8, 0x02C0, 1, 0x0814, 1, 0)
++MX6_PAD_DECL(RGMII_RXC__GPIO_6_30		, 0x06A8, 0x02C0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RXC__MIPI_CORE_DPHY_TEST_IN_11	, 0x06A8, 0x02C0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__MIPI_HSI_CTRL_TX_READY	, 0x06AC, 0x02C4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__ENET_RGMII_TD0	, 0x06AC, 0x02C4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__GPIO_6_20		, 0x06AC, 0x02C4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__MIPI_CORE_DPHY_TEST_IN_1	, 0x06AC, 0x02C4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__MIPI_HSI_CTRL_RX_FLAG	, 0x06B0, 0x02C8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__ENET_RGMII_TD1	, 0x06B0, 0x02C8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__GPIO_6_21		, 0x06B0, 0x02C8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__MIPI_CORE_DPHY_TEST_IN_2	, 0x06B0, 0x02C8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__CCM_PLL3_BYP		, 0x06B0, 0x02C8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__MIPI_HSI_CTRL_RX_DATA	, 0x06B4, 0x02CC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__ENET_RGMII_TD2	, 0x06B4, 0x02CC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__GPIO_6_22		, 0x06B4, 0x02CC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__MIPI_CORE_DPHY_TEST_IN_3	, 0x06B4, 0x02CC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__CCM_PLL2_BYP		, 0x06B4, 0x02CC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__MIPI_HSI_CTRL_RX_WAKE	, 0x06B8, 0x02D0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__ENET_RGMII_TD3	, 0x06B8, 0x02D0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__GPIO_6_23		, 0x06B8, 0x02D0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__MIPI_CORE_DPHY_TEST_IN_4	, 0x06B8, 0x02D0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__USBOH3_H2_STROBE	, 0x06BC, 0x02D4, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__USBOH3_H2_STROBE_START	, 0x06BC, 0x02D4, 0 | IOMUX_CONFIG_SION, 0x0000, 0, PAD_CTL_PUS_47K_UP)
++MX6_PAD_DECL(RGMII_TX_CTL__RGMII_TX_CTL	, 0x06BC, 0x02D4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__GPIO_6_26		, 0x06BC, 0x02D4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__MIPI_CORE_DPHY_TEST_IN_7	, 0x06BC, 0x02D4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__ENET_ANATOP_ETHERNET_REF_OUT	, 0x06BC, 0x02D4, 7, 0x080C, 1, 0)
++MX6_PAD_DECL(RGMII_TXC__USBOH3_H2_DATA	, 0x06C0, 0x02D8, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__ENET_RGMII_TXC	, 0x06C0, 0x02D8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__SPDIF_SPDIF_EXTCLK	, 0x06C0, 0x02D8, 2, 0x08F4, 1, 0)
++MX6_PAD_DECL(RGMII_TXC__GPIO_6_19		, 0x06C0, 0x02D8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__MIPI_CORE_DPHY_TEST_IN_0	, 0x06C0, 0x02D8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__ANATOP_ANATOP_24M_OUT	, 0x06C0, 0x02D8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__USDHC1_CLK		, 0x06C4, 0x02DC, 0, 0x0928, 1, 0)
++MX6_PAD_DECL(SD1_CLK__OSC32K_32K_OUT		, 0x06C4, 0x02DC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__GPT_CLKIN		, 0x06C4, 0x02DC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__GPIO_1_20		, 0x06C4, 0x02DC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__PHY_DTB_0		, 0x06C4, 0x02DC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__USDHC1_CMD		, 0x06C8, 0x02E0, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__PWM4_PWMO		, 0x06C8, 0x02E0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__GPT_CMPOUT1		, 0x06C8, 0x02E0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__GPIO_1_18		, 0x06C8, 0x02E0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__ANATOP_ANATOP_TESTO_5	, 0x06C8, 0x02E0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__USDHC1_DAT0		, 0x06CC, 0x02E4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__CAAM_WRAPPER_RNG_OSC_OBS	, 0x06CC, 0x02E4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__GPT_CAPIN1		, 0x06CC, 0x02E4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__PCIE_CTRL_DIAG_STATUS_BUS_MUX_8	, 0x06CC, 0x02E4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__GPIO_1_16		, 0x06CC, 0x02E4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__HDMI_TX_OPHYDTB_1	, 0x06CC, 0x02E4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__ANATOP_ANATOP_TESTO_7	, 0x06CC, 0x02E4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__USDHC1_DAT1		, 0x06D0, 0x02E8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__PWM3_PWMO		, 0x06D0, 0x02E8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__GPT_CAPIN2		, 0x06D0, 0x02E8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__PCIE_CTRL_DIAG_STATUS_BUS_MUX_7	, 0x06D0, 0x02E8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__GPIO_1_17		, 0x06D0, 0x02E8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__HDMI_TX_OPHYDTB_0	, 0x06D0, 0x02E8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__ANATOP_ANATOP_TESTO_8	, 0x06D0, 0x02E8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__USDHC1_DAT2		, 0x06D4, 0x02EC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__GPT_CMPOUT2		, 0x06D4, 0x02EC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__PWM2_PWMO		, 0x06D4, 0x02EC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__WDOG1_WDOG_B		, 0x06D4, 0x02EC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__GPIO_1_19		, 0x06D4, 0x02EC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__WDOG1_WDOG_RST_B_DEB	, 0x06D4, 0x02EC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__ANATOP_ANATOP_TESTO_4	, 0x06D4, 0x02EC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__USDHC1_DAT3		, 0x06D8, 0x02F0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__GPT_CMPOUT3		, 0x06D8, 0x02F0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__PWM1_PWMO		, 0x06D8, 0x02F0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__WDOG2_WDOG_B		, 0x06D8, 0x02F0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__GPIO_1_21		, 0x06D8, 0x02F0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__WDOG2_WDOG_RST_B_DEB	, 0x06D8, 0x02F0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__ANATOP_ANATOP_TESTO_6	, 0x06D8, 0x02F0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__USDHC2_CLK		, 0x06DC, 0x02F4, 0, 0x0930, 1, 0)
++MX6_PAD_DECL(SD2_CLK__KPP_COL_5		, 0x06DC, 0x02F4, 2, 0x08C0, 3, 0)
++MX6_PAD_DECL(SD2_CLK__AUDMUX_AUD4_RXFS	, 0x06DC, 0x02F4, 3, 0x07A4, 1, 0)
++MX6_PAD_DECL(SD2_CLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_9	, 0x06DC, 0x02F4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__GPIO_1_10		, 0x06DC, 0x02F4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__PHY_DTB_1		, 0x06DC, 0x02F4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CMD__USDHC2_CMD		, 0x06E0, 0x02F8, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CMD__KPP_ROW_5		, 0x06E0, 0x02F8, 2, 0x08CC, 2, 0)
++MX6_PAD_DECL(SD2_CMD__AUDMUX_AUD4_RXC	, 0x06E0, 0x02F8, 3, 0x07A0, 1, 0)
++MX6_PAD_DECL(SD2_CMD__PCIE_CTRL_DIAG_STATUS_BUS_MUX_10	, 0x06E0, 0x02F8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CMD__GPIO_1_11		, 0x06E0, 0x02F8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__USDHC2_DAT0		, 0x06E4, 0x02FC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__AUDMUX_AUD4_RXD	, 0x06E4, 0x02FC, 3, 0x0798, 1, 0)
++MX6_PAD_DECL(SD2_DAT0__KPP_ROW_7		, 0x06E4, 0x02FC, 4, 0x08D4, 2, 0)
++MX6_PAD_DECL(SD2_DAT0__GPIO_1_15		, 0x06E4, 0x02FC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__DCIC2_DCIC_OUT	, 0x06E4, 0x02FC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__ANATOP_ANATOP_TESTO_2	, 0x06E4, 0x02FC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__USDHC2_DAT1		, 0x06E8, 0x0300, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__WEIM_WEIM_CS_2	, 0x06E8, 0x0300, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__AUDMUX_AUD4_TXFS	, 0x06E8, 0x0300, 3, 0x07AC, 1, 0)
++MX6_PAD_DECL(SD2_DAT1__KPP_COL_7		, 0x06E8, 0x0300, 4, 0x08C8, 2, 0)
++MX6_PAD_DECL(SD2_DAT1__GPIO_1_14		, 0x06E8, 0x0300, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__CCM_WAIT		, 0x06E8, 0x0300, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__ANATOP_ANATOP_TESTO_0	, 0x06E8, 0x0300, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__USDHC2_DAT2		, 0x06EC, 0x0304, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__WEIM_WEIM_CS_3	, 0x06EC, 0x0304, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__AUDMUX_AUD4_TXD	, 0x06EC, 0x0304, 3, 0x079C, 1, 0)
++MX6_PAD_DECL(SD2_DAT2__KPP_ROW_6		, 0x06EC, 0x0304, 4, 0x08D0, 2, 0)
++MX6_PAD_DECL(SD2_DAT2__GPIO_1_13		, 0x06EC, 0x0304, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__CCM_STOP		, 0x06EC, 0x0304, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__ANATOP_ANATOP_TESTO_1	, 0x06EC, 0x0304, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__USDHC2_DAT3		, 0x06F0, 0x0308, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__KPP_COL_6		, 0x06F0, 0x0308, 2, 0x08C4, 2, 0)
++MX6_PAD_DECL(SD2_DAT3__AUDMUX_AUD4_TXC	, 0x06F0, 0x0308, 3, 0x07A8, 1, 0)
++MX6_PAD_DECL(SD2_DAT3__PCIE_CTRL_DIAG_STATUS_BUS_MUX_11	, 0x06F0, 0x0308, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__GPIO_1_12		, 0x06F0, 0x0308, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__SJC_DONE		, 0x06F0, 0x0308, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__ANATOP_ANATOP_TESTO_3	, 0x06F0, 0x0308, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__USDHC3_CLK		, 0x06F4, 0x030C, 0, 0x0934, 1, 0)
++MX6_PAD_DECL(SD3_CLK__UART2_CTS		, 0x06F4, 0x030C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__UART2_RTS		, 0x06F4, 0x030C, 1, 0x0900, 2, 0)
++MX6_PAD_DECL(SD3_CLK__CAN1_RXCAN		, 0x06F4, 0x030C, 2, 0x07C8, 2, 0)
++MX6_PAD_DECL(SD3_CLK__USBOH3_UH3_DFD_OUT_5	, 0x06F4, 0x030C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__USBOH3_UH2_DFD_OUT_5	, 0x06F4, 0x030C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__GPIO_7_3		, 0x06F4, 0x030C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__MIPI_CORE_DPHY_TEST_IN_17	, 0x06F4, 0x030C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__ANATOP_ANATOP_TESTO_14	, 0x06F4, 0x030C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__USDHC3_CMD		, 0x06F8, 0x0310, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__UART2_CTS		, 0x06F8, 0x0310, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__UART2_RTS		, 0x06F8, 0x0310, 1, 0x0900, 3, 0)
++MX6_PAD_DECL(SD3_CMD__CAN1_TXCAN		, 0x06F8, 0x0310, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__USBOH3_UH3_DFD_OUT_4	, 0x06F8, 0x0310, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__USBOH3_UH2_DFD_OUT_4	, 0x06F8, 0x0310, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__GPIO_7_2		, 0x06F8, 0x0310, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__MIPI_CORE_DPHY_TEST_IN_16	, 0x06F8, 0x0310, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__ANATOP_ANATOP_TESTO_13	, 0x06F8, 0x0310, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__USDHC3_DAT0		, 0x06FC, 0x0314, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__UART1_CTS		, 0x06FC, 0x0314, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__UART1_RTS		, 0x06FC, 0x0314, 1, 0x08F8, 2, 0)
++MX6_PAD_DECL(SD3_DAT0__CAN2_TXCAN		, 0x06FC, 0x0314, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__USBOH3_UH3_DFD_OUT_6	, 0x06FC, 0x0314, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__USBOH3_UH2_DFD_OUT_6	, 0x06FC, 0x0314, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__GPIO_7_4		, 0x06FC, 0x0314, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__MIPI_CORE_DPHY_TEST_IN_18	, 0x06FC, 0x0314, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__ANATOP_ANATOP_TESTO_15	, 0x06FC, 0x0314, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__USDHC3_DAT1		, 0x0700, 0x0318, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__UART1_CTS		, 0x0700, 0x0318, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__UART1_RTS		, 0x0700, 0x0318, 1, 0x08F8, 3, 0)
++MX6_PAD_DECL(SD3_DAT1__CAN2_RXCAN		, 0x0700, 0x0318, 2, 0x07CC, 1, 0)
++MX6_PAD_DECL(SD3_DAT1__USBOH3_UH3_DFD_OUT_7	, 0x0700, 0x0318, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__USBOH3_UH2_DFD_OUT_7	, 0x0700, 0x0318, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__GPIO_7_5		, 0x0700, 0x0318, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__MIPI_CORE_DPHY_TEST_IN_19	, 0x0700, 0x0318, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__ANATOP_ANATOP_TESTI_0	, 0x0700, 0x0318, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__USDHC3_DAT2		, 0x0704, 0x031C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__PCIE_CTRL_DIAG_STATUS_BUS_MUX_28	, 0x0704, 0x031C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__USBOH3_UH3_DFD_OUT_8	, 0x0704, 0x031C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__USBOH3_UH2_DFD_OUT_8	, 0x0704, 0x031C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__GPIO_7_6		, 0x0704, 0x031C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__MIPI_CORE_DPHY_TEST_IN_20	, 0x0704, 0x031C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__ANATOP_ANATOP_TESTI_1	, 0x0704, 0x031C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__USDHC3_DAT3		, 0x0708, 0x0320, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__UART3_CTS		, 0x0708, 0x0320, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__UART3_RTS		, 0x0708, 0x0320, 1, 0x0908, 4, 0)
++MX6_PAD_DECL(SD3_DAT3__PCIE_CTRL_DIAG_STATUS_BUS_MUX_29	, 0x0708, 0x0320, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__USBOH3_UH3_DFD_OUT_9	, 0x0708, 0x0320, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__USBOH3_UH2_DFD_OUT_9	, 0x0708, 0x0320, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__GPIO_7_7		, 0x0708, 0x0320, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__MIPI_CORE_DPHY_TEST_IN_21	, 0x0708, 0x0320, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__ANATOP_ANATOP_TESTI_2	, 0x0708, 0x0320, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__USDHC3_DAT4		, 0x070C, 0x0324, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__UART2_TXD		, 0x070C, 0x0324, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__UART2_RXD		, 0x070C, 0x0324, 1, 0x0904, 4, 0)
++MX6_PAD_DECL(SD3_DAT4__PCIE_CTRL_DIAG_STATUS_BUS_MUX_27	, 0x070C, 0x0324, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__USBOH3_UH3_DFD_OUT_3	, 0x070C, 0x0324, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__USBOH3_UH2_DFD_OUT_3	, 0x070C, 0x0324, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__GPIO_7_1		, 0x070C, 0x0324, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__MIPI_CORE_DPHY_TEST_IN_15	, 0x070C, 0x0324, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__ANATOP_ANATOP_TESTO_12	, 0x070C, 0x0324, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__USDHC3_DAT5		, 0x0710, 0x0328, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__UART2_TXD		, 0x0710, 0x0328, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__UART2_RXD		, 0x0710, 0x0328, 1, 0x0904, 5, 0)
++MX6_PAD_DECL(SD3_DAT5__PCIE_CTRL_DIAG_STATUS_BUS_MUX_26	, 0x0710, 0x0328, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__USBOH3_UH3_DFD_OUT_2	, 0x0710, 0x0328, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__USBOH3_UH2_DFD_OUT_2	, 0x0710, 0x0328, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__GPIO_7_0		, 0x0710, 0x0328, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__MIPI_CORE_DPHY_TEST_IN_14	, 0x0710, 0x0328, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__ANATOP_ANATOP_TESTO_11	, 0x0710, 0x0328, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__USDHC3_DAT6		, 0x0714, 0x032C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__UART1_TXD		, 0x0714, 0x032C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__UART1_RXD		, 0x0714, 0x032C, 1, 0x08FC, 2, 0)
++MX6_PAD_DECL(SD3_DAT6__PCIE_CTRL_DIAG_STATUS_BUS_MUX_25	, 0x0714, 0x032C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__USBOH3_UH3_DFD_OUT_1	, 0x0714, 0x032C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__USBOH3_UH2_DFD_OUT_1	, 0x0714, 0x032C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__GPIO_6_18		, 0x0714, 0x032C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__MIPI_CORE_DPHY_TEST_IN_13	, 0x0714, 0x032C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__ANATOP_ANATOP_TESTO_10	, 0x0714, 0x032C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__USDHC3_DAT7		, 0x0718, 0x0330, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__UART1_TXD		, 0x0718, 0x0330, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__UART1_RXD		, 0x0718, 0x0330, 1, 0x08FC, 3, 0)
++MX6_PAD_DECL(SD3_DAT7__PCIE_CTRL_DIAG_STATUS_BUS_MUX_24	, 0x0718, 0x0330, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__USBOH3_UH3_DFD_OUT_0	, 0x0718, 0x0330, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__USBOH3_UH2_DFD_OUT_0	, 0x0718, 0x0330, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__GPIO_6_17		, 0x0718, 0x0330, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__MIPI_CORE_DPHY_TEST_IN_12	, 0x0718, 0x0330, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__ANATOP_USBPHY2_TSTO_PLL_CLK20DIV	, 0x0718, 0x0330, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__USDHC3_RST		, 0x071C, 0x0334, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__UART3_CTS		, 0x071C, 0x0334, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__UART3_RTS		, 0x071C, 0x0334, 1, 0x0908, 5, 0)
++MX6_PAD_DECL(SD3_RST__PCIE_CTRL_DIAG_STATUS_BUS_MUX_30	, 0x071C, 0x0334, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__USBOH3_UH3_DFD_OUT_10	, 0x071C, 0x0334, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__USBOH3_UH2_DFD_OUT_10	, 0x071C, 0x0334, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__GPIO_7_8		, 0x071C, 0x0334, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__MIPI_CORE_DPHY_TEST_IN_22	, 0x071C, 0x0334, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__ANATOP_ANATOP_TESTI_3	, 0x071C, 0x0334, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__USDHC4_CLK		, 0x0720, 0x0338, 0, 0x0938, 1, 0)
++MX6_PAD_DECL(SD4_CLK__RAWNAND_WRN		, 0x0720, 0x0338, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__UART3_TXD		, 0x0720, 0x0338, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__UART3_RXD		, 0x0720, 0x0338, 2, 0x090C, 2, 0)
++MX6_PAD_DECL(SD4_CLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_6	, 0x0720, 0x0338, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__GPIO_7_10		, 0x0720, 0x0338, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__USDHC4_CMD		, 0x0724, 0x033C, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__RAWNAND_RDN		, 0x0724, 0x033C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__UART3_TXD		, 0x0724, 0x033C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__UART3_RXD		, 0x0724, 0x033C, 2, 0x090C, 3, 0)
++MX6_PAD_DECL(SD4_CMD__PCIE_CTRL_DIAG_STATUS_BUS_MUX_5	, 0x0724, 0x033C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__GPIO_7_9		, 0x0724, 0x033C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__RAWNAND_D8		, 0x0728, 0x0340, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__USDHC4_DAT0		, 0x0728, 0x0340, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__RAWNAND_DQS		, 0x0728, 0x0340, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__USBOH3_UH2_DFD_OUT_24	, 0x0728, 0x0340, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__USBOH3_UH3_DFD_OUT_24	, 0x0728, 0x0340, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__GPIO_2_8		, 0x0728, 0x0340, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__IPU1_IPU_DIAG_BUS_8	, 0x0728, 0x0340, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__RAWNAND_D9		, 0x072C, 0x0344, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__USDHC4_DAT1		, 0x072C, 0x0344, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__PWM3_PWMO		, 0x072C, 0x0344, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__USBOH3_UH2_DFD_OUT_25	, 0x072C, 0x0344, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__USBOH3_UH3_DFD_OUT_25	, 0x072C, 0x0344, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__GPIO_2_9		, 0x072C, 0x0344, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__IPU1_IPU_DIAG_BUS_9	, 0x072C, 0x0344, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__RAWNAND_D10		, 0x0730, 0x0348, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__USDHC4_DAT2		, 0x0730, 0x0348, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__PWM4_PWMO		, 0x0730, 0x0348, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__USBOH3_UH2_DFD_OUT_26	, 0x0730, 0x0348, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__USBOH3_UH3_DFD_OUT_26	, 0x0730, 0x0348, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__GPIO_2_10		, 0x0730, 0x0348, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__IPU1_IPU_DIAG_BUS_10	, 0x0730, 0x0348, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__RAWNAND_D11		, 0x0734, 0x034C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__USDHC4_DAT3		, 0x0734, 0x034C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__USBOH3_UH2_DFD_OUT_27	, 0x0734, 0x034C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__USBOH3_UH3_DFD_OUT_27	, 0x0734, 0x034C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__GPIO_2_11		, 0x0734, 0x034C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__IPU1_IPU_DIAG_BUS_11	, 0x0734, 0x034C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__RAWNAND_D12		, 0x0738, 0x0350, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__USDHC4_DAT4		, 0x0738, 0x0350, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__UART2_TXD		, 0x0738, 0x0350, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__UART2_RXD		, 0x0738, 0x0350, 2, 0x0904, 6, 0)
++MX6_PAD_DECL(SD4_DAT4__USBOH3_UH2_DFD_OUT_28	, 0x0738, 0x0350, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__USBOH3_UH3_DFD_OUT_28	, 0x0738, 0x0350, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__GPIO_2_12		, 0x0738, 0x0350, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__IPU1_IPU_DIAG_BUS_12	, 0x0738, 0x0350, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__RAWNAND_D13		, 0x073C, 0x0354, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__USDHC4_DAT5		, 0x073C, 0x0354, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__UART2_CTS		, 0x073C, 0x0354, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__UART2_RTS		, 0x073C, 0x0354, 2, 0x0900, 4, 0)
++MX6_PAD_DECL(SD4_DAT5__USBOH3_UH2_DFD_OUT_29	, 0x073C, 0x0354, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__USBOH3_UH3_DFD_OUT_29	, 0x073C, 0x0354, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__GPIO_2_13		, 0x073C, 0x0354, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__IPU1_IPU_DIAG_BUS_13	, 0x073C, 0x0354, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__RAWNAND_D14		, 0x0740, 0x0358, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__USDHC4_DAT6		, 0x0740, 0x0358, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__UART2_CTS		, 0x0740, 0x0358, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__UART2_RTS		, 0x0740, 0x0358, 2, 0x0900, 5, 0)
++MX6_PAD_DECL(SD4_DAT6__USBOH3_UH2_DFD_OUT_30	, 0x0740, 0x0358, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__USBOH3_UH3_DFD_OUT_30	, 0x0740, 0x0358, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__GPIO_2_14		, 0x0740, 0x0358, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__IPU1_IPU_DIAG_BUS_14	, 0x0740, 0x0358, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__RAWNAND_D15		, 0x0744, 0x035C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__USDHC4_DAT7		, 0x0744, 0x035C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__UART2_TXD		, 0x0744, 0x035C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__UART2_RXD		, 0x0744, 0x035C, 2, 0x0904, 7, 0)
++MX6_PAD_DECL(SD4_DAT7__USBOH3_UH2_DFD_OUT_31	, 0x0744, 0x035C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__USBOH3_UH3_DFD_OUT_31	, 0x0744, 0x035C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__GPIO_2_15		, 0x0744, 0x035C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__IPU1_IPU_DIAG_BUS_15	, 0x0744, 0x035C, 6, 0x0000, 0, 0)
+ 
+-enum {
+-	MX6_PAD_CSI0_DAT10__IPU1_CSI0_D_10	= IOMUX_PAD(0x0360, 0x004C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__AUDMUX_AUD3_RXC	= IOMUX_PAD(0x0360, 0x004C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__ECSPI2_MISO		= IOMUX_PAD(0x0360, 0x004C, 2, 0x07F8, 0, 0),
+-	MX6_PAD_CSI0_DAT10__UART1_TXD		= IOMUX_PAD(0x0360, 0x004C, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__UART1_RXD		= IOMUX_PAD(0x0360, 0x004C, 3, 0x08FC, 0, 0),
+-	MX6_PAD_CSI0_DAT10__SDMA_DEBUG_PC_4	= IOMUX_PAD(0x0360, 0x004C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__GPIO_5_28		= IOMUX_PAD(0x0360, 0x004C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__MMDC_MMDC_DEBUG_33	= IOMUX_PAD(0x0360, 0x004C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__SIMBA_TRACE_7	= IOMUX_PAD(0x0360, 0x004C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__IPU1_CSI0_D_11	= IOMUX_PAD(0x0364, 0x0050, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__AUDMUX_AUD3_RXFS	= IOMUX_PAD(0x0364, 0x0050, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__ECSPI2_SS0		= IOMUX_PAD(0x0364, 0x0050, 2, 0x0800, 0, 0),
+-	MX6_PAD_CSI0_DAT11__UART1_TXD		= IOMUX_PAD(0x0364, 0x0050, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__UART1_RXD		= IOMUX_PAD(0x0364, 0x0050, 3, 0x08FC, 1, 0),
+-	MX6_PAD_CSI0_DAT11__SDMA_DEBUG_PC_5	= IOMUX_PAD(0x0364, 0x0050, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__GPIO_5_29		= IOMUX_PAD(0x0364, 0x0050, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__MMDC_MMDC_DEBUG_34	= IOMUX_PAD(0x0364, 0x0050, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__SIMBA_TRACE_8	= IOMUX_PAD(0x0364, 0x0050, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__IPU1_CSI0_D_12	= IOMUX_PAD(0x0368, 0x0054, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__WEIM_WEIM_D_8	= IOMUX_PAD(0x0368, 0x0054, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__PCIE_CTRL_DIAG_STATUS_BUS_MUX_16	= IOMUX_PAD(0x0368, 0x0054, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__UART4_TXD		= IOMUX_PAD(0x0368, 0x0054, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__UART4_RXD		= IOMUX_PAD(0x0368, 0x0054, 3, 0x0914, 0, 0),
+-	MX6_PAD_CSI0_DAT12__SDMA_DEBUG_PC_6	= IOMUX_PAD(0x0368, 0x0054, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__GPIO_5_30		= IOMUX_PAD(0x0368, 0x0054, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__MMDC_MMDC_DEBUG_35	= IOMUX_PAD(0x0368, 0x0054, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__SIMBA_TRACE_9	= IOMUX_PAD(0x0368, 0x0054, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__IPU1_CSI0_D_13	= IOMUX_PAD(0x036C, 0x0058, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__WEIM_WEIM_D_9	= IOMUX_PAD(0x036C, 0x0058, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__PCIE_CTRL_DIAG_STATUS_BUS_MUX_17	= IOMUX_PAD(0x036C, 0x0058, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__UART4_TXD		= IOMUX_PAD(0x036C, 0x0058, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__UART4_RXD		= IOMUX_PAD(0x036C, 0x0058, 3, 0x0914, 1, 0),
+-	MX6_PAD_CSI0_DAT13__SDMA_DEBUG_PC_7	= IOMUX_PAD(0x036C, 0x0058, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__GPIO_5_31		= IOMUX_PAD(0x036C, 0x0058, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__MMDC_MMDC_DEBUG_36	= IOMUX_PAD(0x036C, 0x0058, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__SIMBA_TRACE_10	= IOMUX_PAD(0x036C, 0x0058, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__IPU1_CSI0_D_14	= IOMUX_PAD(0x0370, 0x005C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__WEIM_WEIM_D_10	= IOMUX_PAD(0x0370, 0x005C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__PCIE_CTRL_DIAG_STATUS_BUS_MUX_18	= IOMUX_PAD(0x0370, 0x005C, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__UART5_TXD		= IOMUX_PAD(0x0370, 0x005C, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__UART5_RXD		= IOMUX_PAD(0x0370, 0x005C, 3, 0x091C, 0, 0),
+-	MX6_PAD_CSI0_DAT14__SDMA_DEBUG_PC_8	= IOMUX_PAD(0x0370, 0x005C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__GPIO_6_0		= IOMUX_PAD(0x0370, 0x005C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__MMDC_MMDC_DEBUG_37	= IOMUX_PAD(0x0370, 0x005C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__SIMBA_TRACE_11	= IOMUX_PAD(0x0370, 0x005C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__IPU1_CSI0_D_15	= IOMUX_PAD(0x0374, 0x0060, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__WEIM_WEIM_D_11	= IOMUX_PAD(0x0374, 0x0060, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__PCIE_CTRL_DIAG_STATUS_BUS_MUX_19	= IOMUX_PAD(0x0374, 0x0060, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__UART5_TXD		= IOMUX_PAD(0x0374, 0x0060, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__UART5_RXD		= IOMUX_PAD(0x0374, 0x0060, 3, 0x091C, 1, 0),
+-	MX6_PAD_CSI0_DAT15__SDMA_DEBUG_PC_9	= IOMUX_PAD(0x0374, 0x0060, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__GPIO_6_1		= IOMUX_PAD(0x0374, 0x0060, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__MMDC_MMDC_DEBUG_38	= IOMUX_PAD(0x0374, 0x0060, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__SIMBA_TRACE_12	= IOMUX_PAD(0x0374, 0x0060, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__IPU1_CSI0_D_16	= IOMUX_PAD(0x0378, 0x0064, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__WEIM_WEIM_D_12	= IOMUX_PAD(0x0378, 0x0064, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__PCIE_CTRL_DIAG_STATUS_BUS_MUX_20	= IOMUX_PAD(0x0378, 0x0064, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__UART4_CTS		= IOMUX_PAD(0x0378, 0x0064, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__UART4_RTS		= IOMUX_PAD(0x0378, 0x0064, 3, 0x0910, 0, 0),
+-	MX6_PAD_CSI0_DAT16__SDMA_DEBUG_PC_10	= IOMUX_PAD(0x0378, 0x0064, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__GPIO_6_2		= IOMUX_PAD(0x0378, 0x0064, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__MMDC_MMDC_DEBUG_39	= IOMUX_PAD(0x0378, 0x0064, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__SIMBA_TRACE_13	= IOMUX_PAD(0x0378, 0x0064, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__IPU1_CSI0_D_17	= IOMUX_PAD(0x037C, 0x0068, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__WEIM_WEIM_D_13	= IOMUX_PAD(0x037C, 0x0068, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__PCIE_CTRL_DIAG_STATUS_BUS_MUX_21	= IOMUX_PAD(0x037C, 0x0068, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__UART4_CTS		= IOMUX_PAD(0x037C, 0x0068, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__UART4_RTS		= IOMUX_PAD(0x037C, 0x0068, 3, 0x0910, 1, 0),
+-	MX6_PAD_CSI0_DAT17__SDMA_DEBUG_PC_11	= IOMUX_PAD(0x037C, 0x0068, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__GPIO_6_3		= IOMUX_PAD(0x037C, 0x0068, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__MMDC_MMDC_DEBUG_40	= IOMUX_PAD(0x037C, 0x0068, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__SIMBA_TRACE_14	= IOMUX_PAD(0x037C, 0x0068, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__IPU1_CSI0_D_18	= IOMUX_PAD(0x0380, 0x006C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__WEIM_WEIM_D_14	= IOMUX_PAD(0x0380, 0x006C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__PCIE_CTRL_DIAG_STATUS_BUS_MUX_22	= IOMUX_PAD(0x0380, 0x006C, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__UART5_CTS		= IOMUX_PAD(0x0380, 0x006C, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__UART5_RTS		= IOMUX_PAD(0x0380, 0x006C, 3, 0x0918, 0, 0),
+-	MX6_PAD_CSI0_DAT18__SDMA_DEBUG_PC_12	= IOMUX_PAD(0x0380, 0x006C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__GPIO_6_4		= IOMUX_PAD(0x0380, 0x006C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__MMDC_MMDC_DEBUG_41	= IOMUX_PAD(0x0380, 0x006C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__SIMBA_TRACE_15	= IOMUX_PAD(0x0380, 0x006C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__IPU1_CSI0_D_19	= IOMUX_PAD(0x0384, 0x0070, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__WEIM_WEIM_D_15	= IOMUX_PAD(0x0384, 0x0070, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__PCIE_CTRL_DIAG_STATUS_BUS_MUX_23	= IOMUX_PAD(0x0384, 0x0070, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__UART5_CTS		= IOMUX_PAD(0x0384, 0x0070, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__UART5_RTS		= IOMUX_PAD(0x0384, 0x0070, 3, 0x0918, 1, 0),
+-	MX6_PAD_CSI0_DAT19__SDMA_DEBUG_PC_13	= IOMUX_PAD(0x0384, 0x0070, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__GPIO_6_5		= IOMUX_PAD(0x0384, 0x0070, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__MMDC_MMDC_DEBUG_42	= IOMUX_PAD(0x0384, 0x0070, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__ANATOP_ANATOP_TESTO_9	= IOMUX_PAD(0x0384, 0x0070, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__IPU1_CSI0_D_4	= IOMUX_PAD(0x0388, 0x0074, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__WEIM_WEIM_D_2	= IOMUX_PAD(0x0388, 0x0074, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__ECSPI1_SCLK		= IOMUX_PAD(0x0388, 0x0074, 2, 0x07D8, 0, 0),
+-	MX6_PAD_CSI0_DAT4__KPP_COL_5		= IOMUX_PAD(0x0388, 0x0074, 3, 0x08C0, 0, 0),
+-	MX6_PAD_CSI0_DAT4__AUDMUX_AUD3_TXC	= IOMUX_PAD(0x0388, 0x0074, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__GPIO_5_22		= IOMUX_PAD(0x0388, 0x0074, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__MMDC_MMDC_DEBUG_43	= IOMUX_PAD(0x0388, 0x0074, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__SIMBA_TRACE_1	= IOMUX_PAD(0x0388, 0x0074, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__IPU1_CSI0_D_5	= IOMUX_PAD(0x038C, 0x0078, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__WEIM_WEIM_D_3	= IOMUX_PAD(0x038C, 0x0078, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__ECSPI1_MOSI		= IOMUX_PAD(0x038C, 0x0078, 2, 0x07E0, 0, 0),
+-	MX6_PAD_CSI0_DAT5__KPP_ROW_5		= IOMUX_PAD(0x038C, 0x0078, 3, 0x08CC, 0, 0),
+-	MX6_PAD_CSI0_DAT5__AUDMUX_AUD3_TXD	= IOMUX_PAD(0x038C, 0x0078, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__GPIO_5_23		= IOMUX_PAD(0x038C, 0x0078, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__MMDC_MMDC_DEBUG_44	= IOMUX_PAD(0x038C, 0x0078, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__SIMBA_TRACE_2	= IOMUX_PAD(0x038C, 0x0078, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__IPU1_CSI0_D_6	= IOMUX_PAD(0x0390, 0x007C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__WEIM_WEIM_D_4	= IOMUX_PAD(0x0390, 0x007C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__ECSPI1_MISO		= IOMUX_PAD(0x0390, 0x007C, 2, 0x07DC, 0, 0),
+-	MX6_PAD_CSI0_DAT6__KPP_COL_6		= IOMUX_PAD(0x0390, 0x007C, 3, 0x08C4, 0, 0),
+-	MX6_PAD_CSI0_DAT6__AUDMUX_AUD3_TXFS	= IOMUX_PAD(0x0390, 0x007C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__GPIO_5_24		= IOMUX_PAD(0x0390, 0x007C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__MMDC_MMDC_DEBUG_45	= IOMUX_PAD(0x0390, 0x007C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__SIMBA_TRACE_3	= IOMUX_PAD(0x0390, 0x007C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__IPU1_CSI0_D_7	= IOMUX_PAD(0x0394, 0x0080, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__WEIM_WEIM_D_5	= IOMUX_PAD(0x0394, 0x0080, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__ECSPI1_SS0		= IOMUX_PAD(0x0394, 0x0080, 2, 0x07E4, 0, 0),
+-	MX6_PAD_CSI0_DAT7__KPP_ROW_6		= IOMUX_PAD(0x0394, 0x0080, 3, 0x08D0, 0, 0),
+-	MX6_PAD_CSI0_DAT7__AUDMUX_AUD3_RXD	= IOMUX_PAD(0x0394, 0x0080, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__GPIO_5_25		= IOMUX_PAD(0x0394, 0x0080, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__MMDC_MMDC_DEBUG_46	= IOMUX_PAD(0x0394, 0x0080, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__SIMBA_TRACE_4	= IOMUX_PAD(0x0394, 0x0080, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__IPU1_CSI0_D_8	= IOMUX_PAD(0x0398, 0x0084, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__WEIM_WEIM_D_6	= IOMUX_PAD(0x0398, 0x0084, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__ECSPI2_SCLK		= IOMUX_PAD(0x0398, 0x0084, 2, 0x07F4, 0, 0),
+-	MX6_PAD_CSI0_DAT8__KPP_COL_7		= IOMUX_PAD(0x0398, 0x0084, 3, 0x08C8, 0, 0),
+-	MX6_PAD_CSI0_DAT8__I2C1_SDA		= IOMUX_PAD(0x0398, 0x0084, 4 | IOMUX_CONFIG_SION, 0x086C, 0, 0),
+-	MX6_PAD_CSI0_DAT8__GPIO_5_26		= IOMUX_PAD(0x0398, 0x0084, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__MMDC_MMDC_DEBUG_47	= IOMUX_PAD(0x0398, 0x0084, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__SIMBA_TRACE_5	= IOMUX_PAD(0x0398, 0x0084, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__IPU1_CSI0_D_9	= IOMUX_PAD(0x039C, 0x0088, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__WEIM_WEIM_D_7	= IOMUX_PAD(0x039C, 0x0088, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__ECSPI2_MOSI		= IOMUX_PAD(0x039C, 0x0088, 2, 0x07FC, 0, 0),
+-	MX6_PAD_CSI0_DAT9__KPP_ROW_7		= IOMUX_PAD(0x039C, 0x0088, 3, 0x08D4, 0, 0),
+-	MX6_PAD_CSI0_DAT9__I2C1_SCL		= IOMUX_PAD(0x039C, 0x0088, 4 | IOMUX_CONFIG_SION, 0x0868, 0, 0),
+-	MX6_PAD_CSI0_DAT9__GPIO_5_27		= IOMUX_PAD(0x039C, 0x0088, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__MMDC_MMDC_DEBUG_48	= IOMUX_PAD(0x039C, 0x0088, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__SIMBA_TRACE_6	= IOMUX_PAD(0x039C, 0x0088, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__IPU1_CSI0_DATA_EN	= IOMUX_PAD(0x03A0, 0x008C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__WEIM_WEIM_D_0	= IOMUX_PAD(0x03A0, 0x008C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__PCIE_CTRL_DIAG_STATUS_BUS_MUX_14	= IOMUX_PAD(0x03A0, 0x008C, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__SDMA_DEBUG_PC_2	= IOMUX_PAD(0x03A0, 0x008C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__GPIO_5_20		= IOMUX_PAD(0x03A0, 0x008C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__MMDC_MMDC_DEBUG_31	= IOMUX_PAD(0x03A0, 0x008C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__SIMBA_TRCLK	= IOMUX_PAD(0x03A0, 0x008C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__IPU1_CSI0_HSYNC	= IOMUX_PAD(0x03A4, 0x0090, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_13	= IOMUX_PAD(0x03A4, 0x0090, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__CCM_CLKO		= IOMUX_PAD(0x03A4, 0x0090, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__SDMA_DEBUG_PC_1	= IOMUX_PAD(0x03A4, 0x0090, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__GPIO_5_19		= IOMUX_PAD(0x03A4, 0x0090, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__MMDC_MMDC_DEBUG_30	= IOMUX_PAD(0x03A4, 0x0090, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__SIMBA_TRCTL		= IOMUX_PAD(0x03A4, 0x0090, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__IPU1_CSI0_PIXCLK	= IOMUX_PAD(0x03A8, 0x0094, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_12	= IOMUX_PAD(0x03A8, 0x0094, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__SDMA_DEBUG_PC_0	= IOMUX_PAD(0x03A8, 0x0094, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__GPIO_5_18		= IOMUX_PAD(0x03A8, 0x0094, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__MMDC_MMDC_DEBUG_29	= IOMUX_PAD(0x03A8, 0x0094, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__SIMBA_EVENTO	= IOMUX_PAD(0x03A8, 0x0094, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__IPU1_CSI0_VSYNC	= IOMUX_PAD(0x03AC, 0x0098, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__WEIM_WEIM_D_1	= IOMUX_PAD(0x03AC, 0x0098, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__PCIE_CTRL_DIAG_STATUS_BUS_MUX_15	= IOMUX_PAD(0x03AC, 0x0098, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__SDMA_DEBUG_PC_3	= IOMUX_PAD(0x03AC, 0x0098, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__GPIO_5_21		= IOMUX_PAD(0x03AC, 0x0098, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__MMDC_MMDC_DEBUG_32	= IOMUX_PAD(0x03AC, 0x0098, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__SIMBA_TRACE_0	= IOMUX_PAD(0x03AC, 0x0098, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK	= IOMUX_PAD(0x03B0, 0x009C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_DISP_CLK__LCDIF_CLK		= IOMUX_PAD(0x03B0, 0x009C, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__MIPI_CORE_DPHY_TEST_OUT_28	= IOMUX_PAD(0x03B0, 0x009C, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__SDMA_DEBUG_CORE_STATE_0	= IOMUX_PAD(0x03B0, 0x009C, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__GPIO_4_16		= IOMUX_PAD(0x03B0, 0x009C, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__MMDC_MMDC_DEBUG_0	= IOMUX_PAD(0x03B0, 0x009C, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__TPSMP_HDATA_DIR	= IOMUX_PAD(0x03B0, 0x009C, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__LCDIF_WR_RWN	= IOMUX_PAD(0x03B0, 0x009C, 8, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__IPU1_DI0_PIN15	= IOMUX_PAD(0x03B4, 0x00A0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN15__LCDIF_ENABLE		= IOMUX_PAD(0x03B4, 0x00A0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__AUDMUX_AUD6_TXC	= IOMUX_PAD(0x03B4, 0x00A0, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__MIPI_CORE_DPHY_TEST_OUT_29	= IOMUX_PAD(0x03B4, 0x00A0, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__SDMA_DEBUG_CORE_STATE_1	= IOMUX_PAD(0x03B4, 0x00A0, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__GPIO_4_17		= IOMUX_PAD(0x03B4, 0x00A0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__MMDC_MMDC_DEBUG_1	= IOMUX_PAD(0x03B4, 0x00A0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__PL301_SIM_MX6DL_PER1_HSIZE_0	= IOMUX_PAD(0x03B4, 0x00A0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__LCDIF_RD_E		= IOMUX_PAD(0x03B4, 0x00A0, 8, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN2		= IOMUX_PAD(0x03B8, 0x00A4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN2__LCDIF_HSYNC		= IOMUX_PAD(0x03B8, 0x00A4, 1, 0x08D8, 0, 0),
+-	MX6_PAD_DI0_PIN2__AUDMUX_AUD6_TXD	= IOMUX_PAD(0x03B8, 0x00A4, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__MIPI_CORE_DPHY_TEST_OUT_30	= IOMUX_PAD(0x03B8, 0x00A4, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__SDMA_DEBUG_CORE_STATE_2	= IOMUX_PAD(0x03B8, 0x00A4, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__GPIO_4_18		= IOMUX_PAD(0x03B8, 0x00A4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__MMDC_MMDC_DEBUG_2	= IOMUX_PAD(0x03B8, 0x00A4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__PL301_SIM_MX6DL_PER1_HADDR_9	= IOMUX_PAD(0x03B8, 0x00A4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__LCDIF_RS		= IOMUX_PAD(0x03B8, 0x00A4, 8, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__IPU1_DI0_PIN3		= IOMUX_PAD(0x03BC, 0x00A8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN3__LCDIF_VSYNC		= IOMUX_PAD(0x03BC, 0x00A8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__AUDMUX_AUD6_TXFS	= IOMUX_PAD(0x03BC, 0x00A8, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__MIPI_CORE_DPHY_TEST_OUT_31	= IOMUX_PAD(0x03BC, 0x00A8, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__SDMA_DEBUG_CORE_STATE_3	= IOMUX_PAD(0x03BC, 0x00A8, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__GPIO_4_19		= IOMUX_PAD(0x03BC, 0x00A8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__MMDC_MMDC_DEBUG_3	= IOMUX_PAD(0x03BC, 0x00A8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__PL301_SIM_MX6DL_PER1_HADDR_10	= IOMUX_PAD(0x03BC, 0x00A8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__LCDIF_CS		= IOMUX_PAD(0x03BC, 0x00A8, 8, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__IPU1_DI0_PIN4		= IOMUX_PAD(0x03C0, 0x00AC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN4__LCDIF_BUSY		= IOMUX_PAD(0x03C0, 0x00AC, 1, 0x08D8, 1, 0),
+-	MX6_PAD_DI0_PIN4__AUDMUX_AUD6_RXD	= IOMUX_PAD(0x03C0, 0x00AC, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__USDHC1_WP		= IOMUX_PAD(0x03C0, 0x00AC, 3, 0x092C, 0, 0),
+-	MX6_PAD_DI0_PIN4__SDMA_DEBUG_YIELD	= IOMUX_PAD(0x03C0, 0x00AC, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__GPIO_4_20		= IOMUX_PAD(0x03C0, 0x00AC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__MMDC_MMDC_DEBUG_4	= IOMUX_PAD(0x03C0, 0x00AC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__PL301_SIM_MX6DL_PER1_HADDR_11	= IOMUX_PAD(0x03C0, 0x00AC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__LCDIF_RESET		= IOMUX_PAD(0x03C0, 0x00AC, 8, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__IPU1_DISP0_DAT_0	= IOMUX_PAD(0x03C4, 0x00B0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT0__LCDIF_DAT_0		= IOMUX_PAD(0x03C4, 0x00B0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__ECSPI3_SCLK		= IOMUX_PAD(0x03C4, 0x00B0, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__USDHC1_USDHC_DEBUG_0	= IOMUX_PAD(0x03C4, 0x00B0, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__SDMA_DEBUG_CORE_RUN	= IOMUX_PAD(0x03C4, 0x00B0, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__GPIO_4_21		= IOMUX_PAD(0x03C4, 0x00B0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__MMDC_MMDC_DEBUG_5	= IOMUX_PAD(0x03C4, 0x00B0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__PL301_SIM_MX6DL_PER1_HSIZE_1	= IOMUX_PAD(0x03C4, 0x00B0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__IPU1_DISP0_DAT_1	= IOMUX_PAD(0x03C8, 0x00B4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT1__LCDIF_DAT_1		= IOMUX_PAD(0x03C8, 0x00B4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__ECSPI3_MOSI		= IOMUX_PAD(0x03C8, 0x00B4, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__USDHC1_USDHC_DEBUG_1	= IOMUX_PAD(0x03C8, 0x00B4, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__SDMA_DEBUG_EVENT_CHANNEL_SEL	= IOMUX_PAD(0x03C8, 0x00B4, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__GPIO_4_22		= IOMUX_PAD(0x03C8, 0x00B4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__MMDC_MMDC_DEBUG_6	= IOMUX_PAD(0x03C8, 0x00B4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__PL301_SIM_MX6DL_PER1_HADDR_12	= IOMUX_PAD(0x03C8, 0x00B4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__IPU1_DISP0_DAT_10	= IOMUX_PAD(0x03CC, 0x00B8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT10__LCDIF_DAT_10	= IOMUX_PAD(0x03CC, 0x00B8, 1, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT10__USDHC1_USDHC_DEBUG_6	= IOMUX_PAD(0x03CC, 0x00B8, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__SDMA_DEBUG_EVENT_CHANNEL_3	= IOMUX_PAD(0x03CC, 0x00B8, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__GPIO_4_31		= IOMUX_PAD(0x03CC, 0x00B8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__MMDC_MMDC_DEBUG_15	= IOMUX_PAD(0x03CC, 0x00B8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__PL301_SIM_MX6DL_PER1_HADDR_21	= IOMUX_PAD(0x03CC, 0x00B8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__IPU1_DISP0_DAT_11	= IOMUX_PAD(0x03D0, 0x00BC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT11__LCDIF_DAT_11	= IOMUX_PAD(0x03D0, 0x00BC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__USDHC1_USDHC_DEBUG_7	= IOMUX_PAD(0x03D0, 0x00BC, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__SDMA_DEBUG_EVENT_CHANNEL_4	= IOMUX_PAD(0x03D0, 0x00BC, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__GPIO_5_5		= IOMUX_PAD(0x03D0, 0x00BC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__MMDC_MMDC_DEBUG_16	= IOMUX_PAD(0x03D0, 0x00BC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__PL301_SIM_MX6DL_PER1_HADDR_22	= IOMUX_PAD(0x03D0, 0x00BC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__IPU1_DISP0_DAT_12	= IOMUX_PAD(0x03D4, 0x00C0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT12__LCDIF_DAT_12	= IOMUX_PAD(0x03D4, 0x00C0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__SDMA_DEBUG_EVENT_CHANNEL_5	= IOMUX_PAD(0x03D4, 0x00C0, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__GPIO_5_6		= IOMUX_PAD(0x03D4, 0x00C0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__MMDC_MMDC_DEBUG_17	= IOMUX_PAD(0x03D4, 0x00C0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__PL301_SIM_MX6DL_PER1_HADDR_23	= IOMUX_PAD(0x03D4, 0x00C0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__IPU1_DISP0_DAT_13	= IOMUX_PAD(0x03D8, 0x00C4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT13__LCDIF_DAT_13	= IOMUX_PAD(0x03D8, 0x00C4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__AUDMUX_AUD5_RXFS	= IOMUX_PAD(0x03D8, 0x00C4, 3, 0x07BC, 0, 0),
+-	MX6_PAD_DISP0_DAT13__SDMA_DEBUG_EVT_CHN_LINES_0	= IOMUX_PAD(0x03D8, 0x00C4, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__GPIO_5_7		= IOMUX_PAD(0x03D8, 0x00C4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__MMDC_MMDC_DEBUG_18	= IOMUX_PAD(0x03D8, 0x00C4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__PL301_SIM_MX6DL_PER1_HADDR_24	= IOMUX_PAD(0x03D8, 0x00C4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__IPU1_DISP0_DAT_14	= IOMUX_PAD(0x03DC, 0x00C8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT14__LCDIF_DAT_14	= IOMUX_PAD(0x03DC, 0x00C8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__AUDMUX_AUD5_RXC	= IOMUX_PAD(0x03DC, 0x00C8, 3, 0x07B8, 0, 0),
+-	MX6_PAD_DISP0_DAT14__SDMA_DEBUG_EVT_CHN_LINES_1	= IOMUX_PAD(0x03DC, 0x00C8, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__GPIO_5_8		= IOMUX_PAD(0x03DC, 0x00C8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__MMDC_MMDC_DEBUG_19	= IOMUX_PAD(0x03DC, 0x00C8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__PL301_SIM_MX6DL_PER1_HSIZE_2	= IOMUX_PAD(0x03DC, 0x00C8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__IPU1_DISP0_DAT_15	= IOMUX_PAD(0x03E0, 0x00CC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT15__LCDIF_DAT_15	= IOMUX_PAD(0x03E0, 0x00CC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__ECSPI1_SS1		= IOMUX_PAD(0x03E0, 0x00CC, 2, 0x07E8, 0, 0),
+-	MX6_PAD_DISP0_DAT15__ECSPI2_SS1		= IOMUX_PAD(0x03E0, 0x00CC, 3, 0x0804, 0, 0),
+-	MX6_PAD_DISP0_DAT15__SDMA_DEBUG_EVT_CHN_LINES_2	= IOMUX_PAD(0x03E0, 0x00CC, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__GPIO_5_9		= IOMUX_PAD(0x03E0, 0x00CC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__MMDC_MMDC_DEBUG_20	= IOMUX_PAD(0x03E0, 0x00CC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__PL301_SIM_MX6DL_PER1_HADDR_25	= IOMUX_PAD(0x03E0, 0x00CC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__IPU1_DISP0_DAT_16	= IOMUX_PAD(0x03E4, 0x00D0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT16__LCDIF_DAT_16	= IOMUX_PAD(0x03E4, 0x00D0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__ECSPI2_MOSI	= IOMUX_PAD(0x03E4, 0x00D0, 2, 0x07FC, 1, 0),
+-	MX6_PAD_DISP0_DAT16__AUDMUX_AUD5_TXC	= IOMUX_PAD(0x03E4, 0x00D0, 3, 0x07C0, 0, 0),
+-	MX6_PAD_DISP0_DAT16__SDMA_SDMA_EXT_EVENT_0	= IOMUX_PAD(0x03E4, 0x00D0, 4, 0x08E8, 0, 0),
+-	MX6_PAD_DISP0_DAT16__GPIO_5_10		= IOMUX_PAD(0x03E4, 0x00D0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__MMDC_MMDC_DEBUG_21	= IOMUX_PAD(0x03E4, 0x00D0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__PL301_SIM_MX6DL_PER1_HADDR_26	= IOMUX_PAD(0x03E4, 0x00D0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__IPU1_DISP0_DAT_17	= IOMUX_PAD(0x03E8, 0x00D4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT17__LCDIF_DAT_17	= IOMUX_PAD(0x03E8, 0x00D4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__ECSPI2_MISO	= IOMUX_PAD(0x03E8, 0x00D4, 2, 0x07F8, 1, 0),
+-	MX6_PAD_DISP0_DAT17__AUDMUX_AUD5_TXD	= IOMUX_PAD(0x03E8, 0x00D4, 3, 0x07B4, 0, 0),
+-	MX6_PAD_DISP0_DAT17__SDMA_SDMA_EXT_EVENT_1	= IOMUX_PAD(0x03E8, 0x00D4, 4, 0x08EC, 0, 0),
+-	MX6_PAD_DISP0_DAT17__GPIO_5_11		= IOMUX_PAD(0x03E8, 0x00D4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__MMDC_MMDC_DEBUG_22	= IOMUX_PAD(0x03E8, 0x00D4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__PL301_SIM_MX6DL_PER1_HADDR_27	= IOMUX_PAD(0x03E8, 0x00D4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__IPU1_DISP0_DAT_18	= IOMUX_PAD(0x03EC, 0x00D8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT18__LCDIF_DAT_18	= IOMUX_PAD(0x03EC, 0x00D8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__ECSPI2_SS0		= IOMUX_PAD(0x03EC, 0x00D8, 2, 0x0800, 1, 0),
+-	MX6_PAD_DISP0_DAT18__AUDMUX_AUD5_TXFS	= IOMUX_PAD(0x03EC, 0x00D8, 3, 0x07C4, 0, 0),
+-	MX6_PAD_DISP0_DAT18__AUDMUX_AUD4_RXFS	= IOMUX_PAD(0x03EC, 0x00D8, 4, 0x07A4, 0, 0),
+-	MX6_PAD_DISP0_DAT18__GPIO_5_12		= IOMUX_PAD(0x03EC, 0x00D8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__MMDC_MMDC_DEBUG_23	= IOMUX_PAD(0x03EC, 0x00D8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__WEIM_WEIM_CS_2	= IOMUX_PAD(0x03EC, 0x00D8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__IPU1_DISP0_DAT_19	= IOMUX_PAD(0x03F0, 0x00DC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT19__LCDIF_DAT_19	= IOMUX_PAD(0x03F0, 0x00DC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__ECSPI2_SCLK	= IOMUX_PAD(0x03F0, 0x00DC, 2, 0x07F4, 1, 0),
+-	MX6_PAD_DISP0_DAT19__AUDMUX_AUD5_RXD	= IOMUX_PAD(0x03F0, 0x00DC, 3, 0x07B0, 0, 0),
+-	MX6_PAD_DISP0_DAT19__AUDMUX_AUD4_RXC	= IOMUX_PAD(0x03F0, 0x00DC, 4, 0x07A0, 0, 0),
+-	MX6_PAD_DISP0_DAT19__GPIO_5_13		= IOMUX_PAD(0x03F0, 0x00DC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__MMDC_MMDC_DEBUG_24	= IOMUX_PAD(0x03F0, 0x00DC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__WEIM_WEIM_CS_3	= IOMUX_PAD(0x03F0, 0x00DC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__IPU1_DISP0_DAT_2	= IOMUX_PAD(0x03F4, 0x00E0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT2__LCDIF_DAT_2		= IOMUX_PAD(0x03F4, 0x00E0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__ECSPI3_MISO		= IOMUX_PAD(0x03F4, 0x00E0, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__USDHC1_USDHC_DEBUG_2	= IOMUX_PAD(0x03F4, 0x00E0, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__SDMA_DEBUG_MODE	= IOMUX_PAD(0x03F4, 0x00E0, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__GPIO_4_23		= IOMUX_PAD(0x03F4, 0x00E0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__MMDC_MMDC_DEBUG_7	= IOMUX_PAD(0x03F4, 0x00E0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__PL301_SIM_MX6DL_PER1_HADDR_13	= IOMUX_PAD(0x03F4, 0x00E0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__IPU1_DISP0_DAT_20	= IOMUX_PAD(0x03F8, 0x00E4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT20__LCDIF_DAT_20	= IOMUX_PAD(0x03F8, 0x00E4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__ECSPI1_SCLK	= IOMUX_PAD(0x03F8, 0x00E4, 2, 0x07D8, 1, 0),
+-	MX6_PAD_DISP0_DAT20__AUDMUX_AUD4_TXC	= IOMUX_PAD(0x03F8, 0x00E4, 3, 0x07A8, 0, 0),
+-	MX6_PAD_DISP0_DAT20__SDMA_DEBUG_EVT_CHN_LINES_7	= IOMUX_PAD(0x03F8, 0x00E4, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__GPIO_5_14		= IOMUX_PAD(0x03F8, 0x00E4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__MMDC_MMDC_DEBUG_25	= IOMUX_PAD(0x03F8, 0x00E4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__PL301_SIM_MX6DL_PER1_HADDR_28	= IOMUX_PAD(0x03F8, 0x00E4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__IPU1_DISP0_DAT_21	= IOMUX_PAD(0x03FC, 0x00E8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT21__LCDIF_DAT_21	= IOMUX_PAD(0x03FC, 0x00E8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__ECSPI1_MOSI	= IOMUX_PAD(0x03FC, 0x00E8, 2, 0x07E0, 1, 0),
+-	MX6_PAD_DISP0_DAT21__AUDMUX_AUD4_TXD	= IOMUX_PAD(0x03FC, 0x00E8, 3, 0x079C, 0, 0),
+-	MX6_PAD_DISP0_DAT21__SDMA_DEBUG_BUS_DEVICE_0	= IOMUX_PAD(0x03FC, 0x00E8, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__GPIO_5_15		= IOMUX_PAD(0x03FC, 0x00E8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__MMDC_MMDC_DEBUG_26	= IOMUX_PAD(0x03FC, 0x00E8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__PL301_SIM_MX6DL_PER1_HADDR_29	= IOMUX_PAD(0x03FC, 0x00E8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__IPU1_DISP0_DAT_22	= IOMUX_PAD(0x0400, 0x00EC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT22__LCDIF_DAT_22	= IOMUX_PAD(0x0400, 0x00EC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__ECSPI1_MISO	= IOMUX_PAD(0x0400, 0x00EC, 2, 0x07DC, 1, 0),
+-	MX6_PAD_DISP0_DAT22__AUDMUX_AUD4_TXFS	= IOMUX_PAD(0x0400, 0x00EC, 3, 0x07AC, 0, 0),
+-	MX6_PAD_DISP0_DAT22__SDMA_DEBUG_BUS_DEVICE_1	= IOMUX_PAD(0x0400, 0x00EC, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__GPIO_5_16		= IOMUX_PAD(0x0400, 0x00EC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__MMDC_MMDC_DEBUG_27	= IOMUX_PAD(0x0400, 0x00EC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__PL301_SIM_MX6DL_PER1_HADDR_30	= IOMUX_PAD(0x0400, 0x00EC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__IPU1_DISP0_DAT_23	= IOMUX_PAD(0x0404, 0x00F0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT23__LCDIF_DAT_23	= IOMUX_PAD(0x0404, 0x00F0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__ECSPI1_SS0		= IOMUX_PAD(0x0404, 0x00F0, 2, 0x07E4, 1, 0),
+-	MX6_PAD_DISP0_DAT23__AUDMUX_AUD4_RXD	= IOMUX_PAD(0x0404, 0x00F0, 3, 0x0798, 0, 0),
+-	MX6_PAD_DISP0_DAT23__SDMA_DEBUG_BUS_DEVICE_2	= IOMUX_PAD(0x0404, 0x00F0, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__GPIO_5_17		= IOMUX_PAD(0x0404, 0x00F0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__MMDC_MMDC_DEBUG_28	= IOMUX_PAD(0x0404, 0x00F0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__PL301_SIM_MX6DL_PER1_HADDR_31	= IOMUX_PAD(0x0404, 0x00F0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__IPU1_DISP0_DAT_3	= IOMUX_PAD(0x0408, 0x00F4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT3__LCDIF_DAT_3		= IOMUX_PAD(0x0408, 0x00F4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__ECSPI3_SS0		= IOMUX_PAD(0x0408, 0x00F4, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__USDHC1_USDHC_DEBUG_3	= IOMUX_PAD(0x0408, 0x00F4, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__SDMA_DEBUG_BUS_ERROR	= IOMUX_PAD(0x0408, 0x00F4, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__GPIO_4_24		= IOMUX_PAD(0x0408, 0x00F4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__MMDC_MMDC_DEBUG_8	= IOMUX_PAD(0x0408, 0x00F4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__PL301_SIM_MX6DL_PER1_HADDR_14	= IOMUX_PAD(0x0408, 0x00F4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__IPU1_DISP0_DAT_4	= IOMUX_PAD(0x040C, 0x00F8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT4__LCDIF_DAT_4		= IOMUX_PAD(0x040C, 0x00F8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__ECSPI3_SS1		= IOMUX_PAD(0x040C, 0x00F8, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__USDHC1_USDHC_DEBUG_4	= IOMUX_PAD(0x040C, 0x00F8, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__SDMA_DEBUG_BUS_RWB	= IOMUX_PAD(0x040C, 0x00F8, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__GPIO_4_25		= IOMUX_PAD(0x040C, 0x00F8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__MMDC_MMDC_DEBUG_9	= IOMUX_PAD(0x040C, 0x00F8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__PL301_SIM_MX6DL_PER1_HADDR_15	= IOMUX_PAD(0x040C, 0x00F8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__IPU1_DISP0_DAT_5	= IOMUX_PAD(0x0410, 0x00FC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT5__LCDIF_DAT_5		= IOMUX_PAD(0x0410, 0x00FC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__ECSPI3_SS2		= IOMUX_PAD(0x0410, 0x00FC, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__AUDMUX_AUD6_RXFS	= IOMUX_PAD(0x0410, 0x00FC, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__SDMA_DEBUG_MATCHED_DMBUS	= IOMUX_PAD(0x0410, 0x00FC, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__GPIO_4_26		= IOMUX_PAD(0x0410, 0x00FC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__MMDC_MMDC_DEBUG_10	= IOMUX_PAD(0x0410, 0x00FC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__PL301_SIM_MX6DL_PER1_HADDR_16	= IOMUX_PAD(0x0410, 0x00FC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__IPU1_DISP0_DAT_6	= IOMUX_PAD(0x0414, 0x0100, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT6__LCDIF_DAT_6		= IOMUX_PAD(0x0414, 0x0100, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__ECSPI3_SS3		= IOMUX_PAD(0x0414, 0x0100, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__AUDMUX_AUD6_RXC	= IOMUX_PAD(0x0414, 0x0100, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__SDMA_DEBUG_RTBUFFER_WRITE	= IOMUX_PAD(0x0414, 0x0100, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__GPIO_4_27		= IOMUX_PAD(0x0414, 0x0100, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__MMDC_MMDC_DEBUG_11	= IOMUX_PAD(0x0414, 0x0100, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__PL301_SIM_MX6DL_PER1_HADDR_17	= IOMUX_PAD(0x0414, 0x0100, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__IPU1_DISP0_DAT_7	= IOMUX_PAD(0x0418, 0x0104, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT7__LCDIF_DAT_7		= IOMUX_PAD(0x0418, 0x0104, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__ECSPI3_RDY		= IOMUX_PAD(0x0418, 0x0104, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__USDHC1_USDHC_DEBUG_5	= IOMUX_PAD(0x0418, 0x0104, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__SDMA_DEBUG_EVENT_CHANNEL_0	= IOMUX_PAD(0x0418, 0x0104, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__GPIO_4_28		= IOMUX_PAD(0x0418, 0x0104, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__MMDC_MMDC_DEBUG_12	= IOMUX_PAD(0x0418, 0x0104, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__PL301_SIM_MX6DL_PER1_HADDR_18	= IOMUX_PAD(0x0418, 0x0104, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__IPU1_DISP0_DAT_8	= IOMUX_PAD(0x041C, 0x0108, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT8__LCDIF_DAT_8		= IOMUX_PAD(0x041C, 0x0108, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__PWM1_PWMO		= IOMUX_PAD(0x041C, 0x0108, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__WDOG1_WDOG_B	= IOMUX_PAD(0x041C, 0x0108, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__SDMA_DEBUG_EVENT_CHANNEL_1	= IOMUX_PAD(0x041C, 0x0108, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__GPIO_4_29		= IOMUX_PAD(0x041C, 0x0108, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__MMDC_MMDC_DEBUG_13	= IOMUX_PAD(0x041C, 0x0108, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__PL301_SIM_MX6DL_PER1_HADDR_19	= IOMUX_PAD(0x041C, 0x0108, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__IPU1_DISP0_DAT_9	= IOMUX_PAD(0x0420, 0x010C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT9__LCDIF_DAT_9		= IOMUX_PAD(0x0420, 0x010C, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__PWM2_PWMO		= IOMUX_PAD(0x0420, 0x010C, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__WDOG2_WDOG_B	= IOMUX_PAD(0x0420, 0x010C, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__SDMA_DEBUG_EVENT_CHANNEL_2	= IOMUX_PAD(0x0420, 0x010C, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__GPIO_4_30		= IOMUX_PAD(0x0420, 0x010C, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__MMDC_MMDC_DEBUG_14	= IOMUX_PAD(0x0420, 0x010C, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__PL301_SIM_MX6DL_PER1_HADDR_20	= IOMUX_PAD(0x0420, 0x010C, 7, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A0__MMDC_DRAM_A_0		= IOMUX_PAD(0x0424, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A1__MMDC_DRAM_A_1		= IOMUX_PAD(0x0428, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A10__MMDC_DRAM_A_10	= IOMUX_PAD(0x042C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A11__MMDC_DRAM_A_11	= IOMUX_PAD(0x0430, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A12__MMDC_DRAM_A_12	= IOMUX_PAD(0x0434, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A13__MMDC_DRAM_A_13	= IOMUX_PAD(0x0438, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A14__MMDC_DRAM_A_14	= IOMUX_PAD(0x043C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A15__MMDC_DRAM_A_15	= IOMUX_PAD(0x0440, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A2__MMDC_DRAM_A_2		= IOMUX_PAD(0x0444, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A3__MMDC_DRAM_A_3		= IOMUX_PAD(0x0448, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A4__MMDC_DRAM_A_4		= IOMUX_PAD(0x044C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A5__MMDC_DRAM_A_5		= IOMUX_PAD(0x0450, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A6__MMDC_DRAM_A_6		= IOMUX_PAD(0x0454, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A7__MMDC_DRAM_A_7		= IOMUX_PAD(0x0458, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A8__MMDC_DRAM_A_8		= IOMUX_PAD(0x045C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A9__MMDC_DRAM_A_9		= IOMUX_PAD(0x0460, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_CAS__MMDC_DRAM_CAS		= IOMUX_PAD(0x0464, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_CS0__MMDC_DRAM_CS_0	= IOMUX_PAD(0x0468, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_CS1__MMDC_DRAM_CS_1	= IOMUX_PAD(0x046C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D0__MMDC_DRAM_D_0		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D1__MMDC_DRAM_D_1		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D10__MMDC_DRAM_D_10	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D11__MMDC_DRAM_D_11	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D12__MMDC_DRAM_D_12	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D13__MMDC_DRAM_D_13	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D14__MMDC_DRAM_D_14	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D15__MMDC_DRAM_D_15	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D16__MMDC_DRAM_D_16	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D17__MMDC_DRAM_D_17	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D18__MMDC_DRAM_D_18	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D19__MMDC_DRAM_D_19	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D2__MMDC_DRAM_D_2		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D20__MMDC_DRAM_D_20	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D21__MMDC_DRAM_D_21	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D22__MMDC_DRAM_D_22	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D23__MMDC_DRAM_D_23	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D24__MMDC_DRAM_D_24	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D25__MMDC_DRAM_D_25	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D26__MMDC_DRAM_D_26	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D27__MMDC_DRAM_D_27	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D28__MMDC_DRAM_D_28	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D29__MMDC_DRAM_D_29	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D3__MMDC_DRAM_D_3		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D30__MMDC_DRAM_D_30	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D31__MMDC_DRAM_D_31	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D32__MMDC_DRAM_D_32	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D33__MMDC_DRAM_D_33	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D34__MMDC_DRAM_D_34	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D35__MMDC_DRAM_D_35	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D36__MMDC_DRAM_D_36	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D37__MMDC_DRAM_D_37	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D38__MMDC_DRAM_D_38	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D39__MMDC_DRAM_D_39	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D4__MMDC_DRAM_D_4		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D40__MMDC_DRAM_D_40	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D41__MMDC_DRAM_D_41	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D42__MMDC_DRAM_D_42	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D43__MMDC_DRAM_D_43	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D44__MMDC_DRAM_D_44	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D45__MMDC_DRAM_D_45	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D46__MMDC_DRAM_D_46	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D47__MMDC_DRAM_D_47	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D48__MMDC_DRAM_D_48	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D49__MMDC_DRAM_D_49	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D5__MMDC_DRAM_D_5		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D50__MMDC_DRAM_D_50	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D51__MMDC_DRAM_D_51	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D52__MMDC_DRAM_D_52	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D53__MMDC_DRAM_D_53	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D54__MMDC_DRAM_D_54	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D55__MMDC_DRAM_D_55	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D56__MMDC_DRAM_D_56	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D57__MMDC_DRAM_D_57	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D58__MMDC_DRAM_D_58	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D59__MMDC_DRAM_D_59	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D6__MMDC_DRAM_D_6		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D60__MMDC_DRAM_D_60	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D61__MMDC_DRAM_D_61	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D62__MMDC_DRAM_D_62	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D63__MMDC_DRAM_D_63	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D7__MMDC_DRAM_D_7		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D8__MMDC_DRAM_D_8		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D9__MMDC_DRAM_D_9		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM0__MMDC_DRAM_DQM_0	= IOMUX_PAD(0x0470, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM1__MMDC_DRAM_DQM_1	= IOMUX_PAD(0x0474, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM2__MMDC_DRAM_DQM_2	= IOMUX_PAD(0x0478, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM3__MMDC_DRAM_DQM_3	= IOMUX_PAD(0x047C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM4__MMDC_DRAM_DQM_4	= IOMUX_PAD(0x0480, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM5__MMDC_DRAM_DQM_5	= IOMUX_PAD(0x0484, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM6__MMDC_DRAM_DQM_6	= IOMUX_PAD(0x0488, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM7__MMDC_DRAM_DQM_7	= IOMUX_PAD(0x048C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_RAS__MMDC_DRAM_RAS		= IOMUX_PAD(0x0490, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_RESET__MMDC_DRAM_RESET	= IOMUX_PAD(0x0494, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDBA0__MMDC_DRAM_SDBA_0	= IOMUX_PAD(0x0498, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDBA1__MMDC_DRAM_SDBA_1	= IOMUX_PAD(0x049C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDBA2__MMDC_DRAM_SDBA_2	= IOMUX_PAD(0x04A0, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCKE0__MMDC_DRAM_SDCKE_0	= IOMUX_PAD(0x04A4, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCKE1__MMDC_DRAM_SDCKE_1	= IOMUX_PAD(0x04A8, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCLK_0__MMDC_DRAM_SDCLK0	= IOMUX_PAD(0x04AC, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCLK_1__MMDC_DRAM_SDCLK1	= IOMUX_PAD(0x04B0, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDODT0__MMDC_DRAM_ODT_0	= IOMUX_PAD(0x04B4, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDODT1__MMDC_DRAM_ODT_1	= IOMUX_PAD(0x04B8, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS0__MMDC_DRAM_SDQS_0	= IOMUX_PAD(0x04BC, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS1__MMDC_DRAM_SDQS_1	= IOMUX_PAD(0x04C0, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS2__MMDC_DRAM_SDQS_2	= IOMUX_PAD(0x04C4, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS3__MMDC_DRAM_SDQS_3	= IOMUX_PAD(0x04C8, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS4__MMDC_DRAM_SDQS_4	= IOMUX_PAD(0x04CC, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS5__MMDC_DRAM_SDQS_5	= IOMUX_PAD(0x04D0, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS6__MMDC_DRAM_SDQS_6	= IOMUX_PAD(0x04D4, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS7__MMDC_DRAM_SDQS_7	= IOMUX_PAD(0x04D8, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDWE__MMDC_DRAM_SDWE	= IOMUX_PAD(0x04DC, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__WEIM_WEIM_A_16		= IOMUX_PAD(0x04E0, 0x0110, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__IPU1_DI1_DISP_CLK	= IOMUX_PAD(0x04E0, 0x0110, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__IPU1_CSI1_PIXCLK	= IOMUX_PAD(0x04E0, 0x0110, 2, 0x08B8, 0, 0),
+-	MX6_PAD_EIM_A16__MIPI_CORE_DPHY_TEST_OUT_23	= IOMUX_PAD(0x04E0, 0x0110, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__GPIO_2_22		= IOMUX_PAD(0x04E0, 0x0110, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__TPSMP_HDATA_6		= IOMUX_PAD(0x04E0, 0x0110, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__SRC_BT_CFG_16		= IOMUX_PAD(0x04E0, 0x0110, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__EPDC_SDDO_0		= IOMUX_PAD(0x04E0, 0x0110, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__WEIM_WEIM_A_17		= IOMUX_PAD(0x04E4, 0x0114, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__IPU1_DISP1_DAT_12	= IOMUX_PAD(0x04E4, 0x0114, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__IPU1_CSI1_D_12		= IOMUX_PAD(0x04E4, 0x0114, 2, 0x0890, 0, 0),
+-	MX6_PAD_EIM_A17__MIPI_CORE_DPHY_TEST_OUT_22	= IOMUX_PAD(0x04E4, 0x0114, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__GPIO_2_21		= IOMUX_PAD(0x04E4, 0x0114, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__TPSMP_HDATA_5		= IOMUX_PAD(0x04E4, 0x0114, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__SRC_BT_CFG_17		= IOMUX_PAD(0x04E4, 0x0114, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__EPDC_PWRSTAT		= IOMUX_PAD(0x04E4, 0x0114, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__WEIM_WEIM_A_18		= IOMUX_PAD(0x04E8, 0x0118, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__IPU1_DISP1_DAT_13	= IOMUX_PAD(0x04E8, 0x0118, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__IPU1_CSI1_D_13		= IOMUX_PAD(0x04E8, 0x0118, 2, 0x0894, 0, 0),
+-	MX6_PAD_EIM_A18__MIPI_CORE_DPHY_TEST_OUT_21	= IOMUX_PAD(0x04E8, 0x0118, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__GPIO_2_20		= IOMUX_PAD(0x04E8, 0x0118, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__TPSMP_HDATA_4		= IOMUX_PAD(0x04E8, 0x0118, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__SRC_BT_CFG_18		= IOMUX_PAD(0x04E8, 0x0118, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__EPDC_PWRCTRL_0		= IOMUX_PAD(0x04E8, 0x0118, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__WEIM_WEIM_A_19		= IOMUX_PAD(0x04EC, 0x011C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__IPU1_DISP1_DAT_14	= IOMUX_PAD(0x04EC, 0x011C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__IPU1_CSI1_D_14		= IOMUX_PAD(0x04EC, 0x011C, 2, 0x0898, 0, 0),
+-	MX6_PAD_EIM_A19__MIPI_CORE_DPHY_TEST_OUT_20	= IOMUX_PAD(0x04EC, 0x011C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__GPIO_2_19		= IOMUX_PAD(0x04EC, 0x011C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__TPSMP_HDATA_3		= IOMUX_PAD(0x04EC, 0x011C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__SRC_BT_CFG_19		= IOMUX_PAD(0x04EC, 0x011C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__EPDC_PWRCTRL_1		= IOMUX_PAD(0x04EC, 0x011C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__WEIM_WEIM_A_20		= IOMUX_PAD(0x04F0, 0x0120, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__IPU1_DISP1_DAT_15	= IOMUX_PAD(0x04F0, 0x0120, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__IPU1_CSI1_D_15		= IOMUX_PAD(0x04F0, 0x0120, 2, 0x089C, 0, 0),
+-	MX6_PAD_EIM_A20__MIPI_CORE_DPHY_TEST_OUT_19	= IOMUX_PAD(0x04F0, 0x0120, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__GPIO_2_18		= IOMUX_PAD(0x04F0, 0x0120, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__TPSMP_HDATA_2		= IOMUX_PAD(0x04F0, 0x0120, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__SRC_BT_CFG_20		= IOMUX_PAD(0x04F0, 0x0120, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__EPDC_PWRCTRL_2		= IOMUX_PAD(0x04F0, 0x0120, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__WEIM_WEIM_A_21		= IOMUX_PAD(0x04F4, 0x0124, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__IPU1_DISP1_DAT_16	= IOMUX_PAD(0x04F4, 0x0124, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__IPU1_CSI1_D_16		= IOMUX_PAD(0x04F4, 0x0124, 2, 0x08A0, 0, 0),
+-	MX6_PAD_EIM_A21__MIPI_CORE_DPHY_TEST_OUT_18	= IOMUX_PAD(0x04F4, 0x0124, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__GPIO_2_17		= IOMUX_PAD(0x04F4, 0x0124, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__TPSMP_HDATA_1		= IOMUX_PAD(0x04F4, 0x0124, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__SRC_BT_CFG_21		= IOMUX_PAD(0x04F4, 0x0124, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__EPDC_GDCLK		= IOMUX_PAD(0x04F4, 0x0124, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__WEIM_WEIM_A_22		= IOMUX_PAD(0x04F8, 0x0128, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__IPU1_DISP1_DAT_17	= IOMUX_PAD(0x04F8, 0x0128, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__IPU1_CSI1_D_17		= IOMUX_PAD(0x04F8, 0x0128, 2, 0x08A4, 0, 0),
+-	MX6_PAD_EIM_A22__GPIO_2_16		= IOMUX_PAD(0x04F8, 0x0128, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__TPSMP_HDATA_0		= IOMUX_PAD(0x04F8, 0x0128, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__SRC_BT_CFG_22		= IOMUX_PAD(0x04F8, 0x0128, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__EPDC_GDSP		= IOMUX_PAD(0x04F8, 0x0128, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__WEIM_WEIM_A_23		= IOMUX_PAD(0x04FC, 0x012C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__IPU1_DISP1_DAT_18	= IOMUX_PAD(0x04FC, 0x012C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__IPU1_CSI1_D_18		= IOMUX_PAD(0x04FC, 0x012C, 2, 0x08A8, 0, 0),
+-	MX6_PAD_EIM_A23__IPU1_SISG_3		= IOMUX_PAD(0x04FC, 0x012C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__GPIO_6_6		= IOMUX_PAD(0x04FC, 0x012C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__PL301_SIM_MX6DL_PER1_HPROT_3	= IOMUX_PAD(0x04FC, 0x012C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__SRC_BT_CFG_23		= IOMUX_PAD(0x04FC, 0x012C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__EPDC_GDOE		= IOMUX_PAD(0x04FC, 0x012C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__WEIM_WEIM_A_24		= IOMUX_PAD(0x0500, 0x0130, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__IPU1_DISP1_DAT_19	= IOMUX_PAD(0x0500, 0x0130, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__IPU1_CSI1_D_19		= IOMUX_PAD(0x0500, 0x0130, 2, 0x08AC, 0, 0),
+-	MX6_PAD_EIM_A24__IPU1_SISG_2		= IOMUX_PAD(0x0500, 0x0130, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__GPIO_5_4		= IOMUX_PAD(0x0500, 0x0130, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__PL301_SIM_MX6DL_PER1_HPROT_2	= IOMUX_PAD(0x0500, 0x0130, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__SRC_BT_CFG_24		= IOMUX_PAD(0x0500, 0x0130, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__EPDC_GDRL		= IOMUX_PAD(0x0500, 0x0130, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__WEIM_WEIM_A_25		= IOMUX_PAD(0x0504, 0x0134, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__ECSPI4_SS1		= IOMUX_PAD(0x0504, 0x0134, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__ECSPI2_RDY		= IOMUX_PAD(0x0504, 0x0134, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__IPU1_DI1_PIN12		= IOMUX_PAD(0x0504, 0x0134, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__IPU1_DI0_D1_CS		= IOMUX_PAD(0x0504, 0x0134, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__GPIO_5_2		= IOMUX_PAD(0x0504, 0x0134, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__HDMI_TX_CEC_LINE	= IOMUX_PAD(0x0504, 0x0134, 6, 0x085C, 0, 0),
+-	MX6_PAD_EIM_A25__PL301_SIM_MX6DL_PER1_HBURST_0	= IOMUX_PAD(0x0504, 0x0134, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__EPDC_SDDO_15		= IOMUX_PAD(0x0504, 0x0134, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__WEIM_ACLK_FREERUN	= IOMUX_PAD(0x0504, 0x0134, 9, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__WEIM_WEIM_BCLK	= IOMUX_PAD(0x0508, 0x0138, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__IPU1_DI1_PIN16	= IOMUX_PAD(0x0508, 0x0138, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__GPIO_6_31		= IOMUX_PAD(0x0508, 0x0138, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__TPSMP_HDATA_31	= IOMUX_PAD(0x0508, 0x0138, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__EPDC_SDCE_9		= IOMUX_PAD(0x0508, 0x0138, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__WEIM_WEIM_CS_0		= IOMUX_PAD(0x050C, 0x013C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__IPU1_DI1_PIN5		= IOMUX_PAD(0x050C, 0x013C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__ECSPI2_SCLK		= IOMUX_PAD(0x050C, 0x013C, 2, 0x07F4, 2, 0),
+-	MX6_PAD_EIM_CS0__MIPI_CORE_DPHY_TEST_OUT_24	= IOMUX_PAD(0x050C, 0x013C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__GPIO_2_23		= IOMUX_PAD(0x050C, 0x013C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__TPSMP_HDATA_7		= IOMUX_PAD(0x050C, 0x013C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__EPDC_SDDO_6		= IOMUX_PAD(0x050C, 0x013C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__WEIM_WEIM_CS_1		= IOMUX_PAD(0x0510, 0x0140, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__IPU1_DI1_PIN6		= IOMUX_PAD(0x0510, 0x0140, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__ECSPI2_MOSI		= IOMUX_PAD(0x0510, 0x0140, 2, 0x07FC, 2, 0),
+-	MX6_PAD_EIM_CS1__MIPI_CORE_DPHY_TEST_OUT_25	= IOMUX_PAD(0x0510, 0x0140, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__GPIO_2_24		= IOMUX_PAD(0x0510, 0x0140, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__TPSMP_HDATA_8		= IOMUX_PAD(0x0510, 0x0140, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__EPDC_SDDO_8		= IOMUX_PAD(0x0510, 0x0140, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__WEIM_WEIM_D_16		= IOMUX_PAD(0x0514, 0x0144, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__ECSPI1_SCLK		= IOMUX_PAD(0x0514, 0x0144, 1, 0x07D8, 2, 0),
+-	MX6_PAD_EIM_D16__IPU1_DI0_PIN5		= IOMUX_PAD(0x0514, 0x0144, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__IPU1_CSI1_D_18		= IOMUX_PAD(0x0514, 0x0144, 3, 0x08A8, 1, 0),
+-	MX6_PAD_EIM_D16__HDMI_TX_DDC_SDA	= IOMUX_PAD(0x0514, 0x0144, 4, 0x0864, 0, 0),
+-	MX6_PAD_EIM_D16__GPIO_3_16		= IOMUX_PAD(0x0514, 0x0144, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__I2C2_SDA		= IOMUX_PAD(0x0514, 0x0144, 6 | IOMUX_CONFIG_SION, 0x0874, 0, 0),
+-	MX6_PAD_EIM_D16__TPSMP_HTRANS_0		= IOMUX_PAD(0x0514, 0x0144, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__EPDC_SDDO_10		= IOMUX_PAD(0x0514, 0x0144, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__WEIM_WEIM_D_17		= IOMUX_PAD(0x0518, 0x0148, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__ECSPI1_MISO		= IOMUX_PAD(0x0518, 0x0148, 1, 0x07DC, 2, 0),
+-	MX6_PAD_EIM_D17__IPU1_DI0_PIN6		= IOMUX_PAD(0x0518, 0x0148, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__IPU1_CSI1_PIXCLK	= IOMUX_PAD(0x0518, 0x0148, 3, 0x08B8, 1, 0),
+-	MX6_PAD_EIM_D17__DCIC1_DCIC_OUT		= IOMUX_PAD(0x0518, 0x0148, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__GPIO_3_17		= IOMUX_PAD(0x0518, 0x0148, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__I2C3_SCL		= IOMUX_PAD(0x0518, 0x0148, 6 | IOMUX_CONFIG_SION, 0x0878, 0, 0),
+-	MX6_PAD_EIM_D17__PL301_SIM_MX6DL_PER1_HBURST_1	= IOMUX_PAD(0x0518, 0x0148, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__EPDC_VCOM_0		= IOMUX_PAD(0x0518, 0x0148, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__WEIM_WEIM_D_18		= IOMUX_PAD(0x051C, 0x014C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__ECSPI1_MOSI		= IOMUX_PAD(0x051C, 0x014C, 1, 0x07E0, 2, 0),
+-	MX6_PAD_EIM_D18__IPU1_DI0_PIN7		= IOMUX_PAD(0x051C, 0x014C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__IPU1_CSI1_D_17		= IOMUX_PAD(0x051C, 0x014C, 3, 0x08A4, 1, 0),
+-	MX6_PAD_EIM_D18__IPU1_DI1_D0_CS		= IOMUX_PAD(0x051C, 0x014C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__GPIO_3_18		= IOMUX_PAD(0x051C, 0x014C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__I2C3_SDA		= IOMUX_PAD(0x051C, 0x014C, 6 | IOMUX_CONFIG_SION, 0x087C, 0, 0),
+-	MX6_PAD_EIM_D18__PL301_SIM_MX6DL_PER1_HBURST_2	= IOMUX_PAD(0x051C, 0x014C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__EPDC_VCOM_1		= IOMUX_PAD(0x051C, 0x014C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__WEIM_WEIM_D_19		= IOMUX_PAD(0x0520, 0x0150, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__ECSPI1_SS1		= IOMUX_PAD(0x0520, 0x0150, 1, 0x07E8, 1, 0),
+-	MX6_PAD_EIM_D19__IPU1_DI0_PIN8		= IOMUX_PAD(0x0520, 0x0150, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__IPU1_CSI1_D_16		= IOMUX_PAD(0x0520, 0x0150, 3, 0x08A0, 1, 0),
+-	MX6_PAD_EIM_D19__UART1_CTS		= IOMUX_PAD(0x0520, 0x0150, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__UART1_RTS		= IOMUX_PAD(0x0520, 0x0150, 4, 0x08F8, 0, 0),
+-	MX6_PAD_EIM_D19__GPIO_3_19		= IOMUX_PAD(0x0520, 0x0150, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__EPIT1_EPITO		= IOMUX_PAD(0x0520, 0x0150, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__PL301_SIM_MX6DL_PER1_HRESP	= IOMUX_PAD(0x0520, 0x0150, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__EPDC_SDDO_12		= IOMUX_PAD(0x0520, 0x0150, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__WEIM_WEIM_D_20		= IOMUX_PAD(0x0524, 0x0154, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__ECSPI4_SS0		= IOMUX_PAD(0x0524, 0x0154, 1, 0x0808, 0, 0),
+-	MX6_PAD_EIM_D20__IPU1_DI0_PIN16		= IOMUX_PAD(0x0524, 0x0154, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__IPU1_CSI1_D_15		= IOMUX_PAD(0x0524, 0x0154, 3, 0x089C, 1, 0),
+-	MX6_PAD_EIM_D20__UART1_CTS		= IOMUX_PAD(0x0524, 0x0154, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__UART1_RTS		= IOMUX_PAD(0x0524, 0x0154, 4, 0x08F8, 1, 0),
+-	MX6_PAD_EIM_D20__GPIO_3_20		= IOMUX_PAD(0x0524, 0x0154, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__EPIT2_EPITO		= IOMUX_PAD(0x0524, 0x0154, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__TPSMP_HTRANS_1		= IOMUX_PAD(0x0524, 0x0154, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__WEIM_WEIM_D_21		= IOMUX_PAD(0x0528, 0x0158, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__ECSPI4_SCLK		= IOMUX_PAD(0x0528, 0x0158, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__IPU1_DI0_PIN17		= IOMUX_PAD(0x0528, 0x0158, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__IPU1_CSI1_D_11		= IOMUX_PAD(0x0528, 0x0158, 3, 0x088C, 0, 0),
+-	MX6_PAD_EIM_D21__USBOH3_USBOTG_OC	= IOMUX_PAD(0x0528, 0x0158, 4, 0x0920, 0, 0),
+-	MX6_PAD_EIM_D21__GPIO_3_21		= IOMUX_PAD(0x0528, 0x0158, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__I2C1_SCL		= IOMUX_PAD(0x0528, 0x0158, 6 | IOMUX_CONFIG_SION, 0x0868, 1, 0),
+-	MX6_PAD_EIM_D21__SPDIF_IN1		= IOMUX_PAD(0x0528, 0x0158, 7, 0x08F0, 0, 0),
+-	MX6_PAD_EIM_D22__WEIM_WEIM_D_22		= IOMUX_PAD(0x052C, 0x015C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__ECSPI4_MISO		= IOMUX_PAD(0x052C, 0x015C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__IPU1_DI0_PIN1		= IOMUX_PAD(0x052C, 0x015C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__IPU1_CSI1_D_10		= IOMUX_PAD(0x052C, 0x015C, 3, 0x0888, 0, 0),
+-	MX6_PAD_EIM_D22__USBOH3_USBOTG_PWR	= IOMUX_PAD(0x052C, 0x015C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__GPIO_3_22		= IOMUX_PAD(0x052C, 0x015C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__SPDIF_OUT1		= IOMUX_PAD(0x052C, 0x015C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__PL301_SIM_MX6DL_PER1_HWRITE	= IOMUX_PAD(0x052C, 0x015C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__EPDC_SDCE_6		= IOMUX_PAD(0x052C, 0x015C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__WEIM_WEIM_D_23		= IOMUX_PAD(0x0530, 0x0160, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU1_DI0_D0_CS		= IOMUX_PAD(0x0530, 0x0160, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__UART3_CTS		= IOMUX_PAD(0x0530, 0x0160, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__UART3_RTS		= IOMUX_PAD(0x0530, 0x0160, 2, 0x0908, 0, 0),
+-	MX6_PAD_EIM_D23__UART1_DCD		= IOMUX_PAD(0x0530, 0x0160, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU1_CSI1_DATA_EN	= IOMUX_PAD(0x0530, 0x0160, 4, 0x08B0, 0, 0),
+-	MX6_PAD_EIM_D23__GPIO_3_23		= IOMUX_PAD(0x0530, 0x0160, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU1_DI1_PIN2		= IOMUX_PAD(0x0530, 0x0160, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU1_DI1_PIN14		= IOMUX_PAD(0x0530, 0x0160, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__EPDC_SDDO_11		= IOMUX_PAD(0x0530, 0x0160, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__WEIM_WEIM_D_24		= IOMUX_PAD(0x0534, 0x0164, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__ECSPI4_SS2		= IOMUX_PAD(0x0534, 0x0164, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__UART3_TXD		= IOMUX_PAD(0x0534, 0x0164, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__UART3_RXD		= IOMUX_PAD(0x0534, 0x0164, 2, 0x090C, 0, 0),
+-	MX6_PAD_EIM_D24__ECSPI1_SS2		= IOMUX_PAD(0x0534, 0x0164, 3, 0x07EC, 0, 0),
+-	MX6_PAD_EIM_D24__ECSPI2_SS2		= IOMUX_PAD(0x0534, 0x0164, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__GPIO_3_24		= IOMUX_PAD(0x0534, 0x0164, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__AUDMUX_AUD5_RXFS	= IOMUX_PAD(0x0534, 0x0164, 6, 0x07BC, 1, 0),
+-	MX6_PAD_EIM_D24__UART1_DTR		= IOMUX_PAD(0x0534, 0x0164, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__EPDC_SDCE_7		= IOMUX_PAD(0x0534, 0x0164, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__WEIM_WEIM_D_25		= IOMUX_PAD(0x0538, 0x0168, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__ECSPI4_SS3		= IOMUX_PAD(0x0538, 0x0168, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__UART3_TXD		= IOMUX_PAD(0x0538, 0x0168, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__UART3_RXD		= IOMUX_PAD(0x0538, 0x0168, 2, 0x090C, 1, 0),
+-	MX6_PAD_EIM_D25__ECSPI1_SS3		= IOMUX_PAD(0x0538, 0x0168, 3, 0x07F0, 0, 0),
+-	MX6_PAD_EIM_D25__ECSPI2_SS3		= IOMUX_PAD(0x0538, 0x0168, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__GPIO_3_25		= IOMUX_PAD(0x0538, 0x0168, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__AUDMUX_AUD5_RXC	= IOMUX_PAD(0x0538, 0x0168, 6, 0x07B8, 1, 0),
+-	MX6_PAD_EIM_D25__UART1_DSR		= IOMUX_PAD(0x0538, 0x0168, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__EPDC_SDCE_8		= IOMUX_PAD(0x0538, 0x0168, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__WEIM_WEIM_D_26		= IOMUX_PAD(0x053C, 0x016C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_DI1_PIN11		= IOMUX_PAD(0x053C, 0x016C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_CSI0_D_1		= IOMUX_PAD(0x053C, 0x016C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_CSI1_D_14		= IOMUX_PAD(0x053C, 0x016C, 3, 0x0898, 1, 0),
+-	MX6_PAD_EIM_D26__UART2_TXD		= IOMUX_PAD(0x053C, 0x016C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__UART2_RXD		= IOMUX_PAD(0x053C, 0x016C, 4, 0x0904, 0, 0),
+-	MX6_PAD_EIM_D26__GPIO_3_26		= IOMUX_PAD(0x053C, 0x016C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_SISG_2		= IOMUX_PAD(0x053C, 0x016C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_DISP1_DAT_22	= IOMUX_PAD(0x053C, 0x016C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__EPDC_SDOED		= IOMUX_PAD(0x053C, 0x016C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__WEIM_WEIM_D_27		= IOMUX_PAD(0x0540, 0x0170, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_DI1_PIN13		= IOMUX_PAD(0x0540, 0x0170, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_CSI0_D_0		= IOMUX_PAD(0x0540, 0x0170, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_CSI1_D_13		= IOMUX_PAD(0x0540, 0x0170, 3, 0x0894, 1, 0),
+-	MX6_PAD_EIM_D27__UART2_TXD		= IOMUX_PAD(0x0540, 0x0170, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__UART2_RXD		= IOMUX_PAD(0x0540, 0x0170, 4, 0x0904, 1, 0),
+-	MX6_PAD_EIM_D27__GPIO_3_27		= IOMUX_PAD(0x0540, 0x0170, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_SISG_3		= IOMUX_PAD(0x0540, 0x0170, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_DISP1_DAT_23	= IOMUX_PAD(0x0540, 0x0170, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__EPDC_SDOE		= IOMUX_PAD(0x0540, 0x0170, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__WEIM_WEIM_D_28		= IOMUX_PAD(0x0544, 0x0174, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__I2C1_SDA		= IOMUX_PAD(0x0544, 0x0174, 1 | IOMUX_CONFIG_SION, 0x086C, 1, 0),
+-	MX6_PAD_EIM_D28__ECSPI4_MOSI		= IOMUX_PAD(0x0544, 0x0174, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__IPU1_CSI1_D_12		= IOMUX_PAD(0x0544, 0x0174, 3, 0x0890, 1, 0),
+-	MX6_PAD_EIM_D28__UART2_CTS		= IOMUX_PAD(0x0544, 0x0174, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__UART2_RTS		= IOMUX_PAD(0x0544, 0x0174, 4, 0x0900, 0, 0),
+-	MX6_PAD_EIM_D28__GPIO_3_28		= IOMUX_PAD(0x0544, 0x0174, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__IPU1_EXT_TRIG		= IOMUX_PAD(0x0544, 0x0174, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__IPU1_DI0_PIN13		= IOMUX_PAD(0x0544, 0x0174, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__EPDC_PWRCTRL_3		= IOMUX_PAD(0x0544, 0x0174, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__WEIM_WEIM_D_29		= IOMUX_PAD(0x0548, 0x0178, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__IPU1_DI1_PIN15		= IOMUX_PAD(0x0548, 0x0178, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__ECSPI4_SS0		= IOMUX_PAD(0x0548, 0x0178, 2, 0x0808, 1, 0),
+-	MX6_PAD_EIM_D29__UART2_CTS		= IOMUX_PAD(0x0548, 0x0178, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__UART2_RTS		= IOMUX_PAD(0x0548, 0x0178, 4, 0x0900, 1, 0),
+-	MX6_PAD_EIM_D29__GPIO_3_29		= IOMUX_PAD(0x0548, 0x0178, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__IPU1_CSI1_VSYNC	= IOMUX_PAD(0x0548, 0x0178, 6, 0x08BC, 0, 0),
+-	MX6_PAD_EIM_D29__IPU1_DI0_PIN14		= IOMUX_PAD(0x0548, 0x0178, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__EPDC_PWRWAKE		= IOMUX_PAD(0x0548, 0x0178, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__WEIM_WEIM_D_30		= IOMUX_PAD(0x054C, 0x017C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__IPU1_DISP1_DAT_21	= IOMUX_PAD(0x054C, 0x017C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__IPU1_DI0_PIN11		= IOMUX_PAD(0x054C, 0x017C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__IPU1_CSI0_D_3		= IOMUX_PAD(0x054C, 0x017C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__UART3_CTS		= IOMUX_PAD(0x054C, 0x017C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__UART3_RTS		= IOMUX_PAD(0x054C, 0x017C, 4, 0x0908, 1, 0),
+-	MX6_PAD_EIM_D30__GPIO_3_30		= IOMUX_PAD(0x054C, 0x017C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__USBOH3_USBH1_OC	= IOMUX_PAD(0x054C, 0x017C, 6, 0x0924, 0, 0),
+-	MX6_PAD_EIM_D30__PL301_SIM_MX6DL_PER1_HPROT_0	= IOMUX_PAD(0x054C, 0x017C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__EPDC_SDOEZ		= IOMUX_PAD(0x054C, 0x017C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__WEIM_WEIM_D_31		= IOMUX_PAD(0x0550, 0x0180, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__IPU1_DISP1_DAT_20	= IOMUX_PAD(0x0550, 0x0180, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__IPU1_DI0_PIN12		= IOMUX_PAD(0x0550, 0x0180, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__IPU1_CSI0_D_2		= IOMUX_PAD(0x0550, 0x0180, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__UART3_CTS		= IOMUX_PAD(0x0550, 0x0180, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__UART3_RTS		= IOMUX_PAD(0x0550, 0x0180, 4, 0x0908, 2, 0),
+-	MX6_PAD_EIM_D31__GPIO_3_31		= IOMUX_PAD(0x0550, 0x0180, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__USBOH3_USBH1_PWR	= IOMUX_PAD(0x0550, 0x0180, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__PL301_SIM_MX6DL_PER1_HPROT_1	= IOMUX_PAD(0x0550, 0x0180, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__EPDC_SDCLK		= IOMUX_PAD(0x0550, 0x0180, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__WEIM_ACLK_FREERUN	= IOMUX_PAD(0x0550, 0x0180, 9, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__WEIM_WEIM_DA_A_0	= IOMUX_PAD(0x0554, 0x0184, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__IPU1_DISP1_DAT_9	= IOMUX_PAD(0x0554, 0x0184, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__IPU1_CSI1_D_9		= IOMUX_PAD(0x0554, 0x0184, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__MIPI_CORE_DPHY_TEST_OUT_2	= IOMUX_PAD(0x0554, 0x0184, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__GPIO_3_0		= IOMUX_PAD(0x0554, 0x0184, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__TPSMP_HDATA_14		= IOMUX_PAD(0x0554, 0x0184, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__SRC_BT_CFG_0		= IOMUX_PAD(0x0554, 0x0184, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__EPDC_SDCLKN		= IOMUX_PAD(0x0554, 0x0184, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__WEIM_WEIM_DA_A_1	= IOMUX_PAD(0x0558, 0x0188, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__IPU1_DISP1_DAT_8	= IOMUX_PAD(0x0558, 0x0188, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__IPU1_CSI1_D_8		= IOMUX_PAD(0x0558, 0x0188, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__MIPI_CORE_DPHY_TEST_OUT_3	= IOMUX_PAD(0x0558, 0x0188, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__ANATOP_USBPHY1_TSTI_TX_LS_MODE	= IOMUX_PAD(0x0558, 0x0188, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__GPIO_3_1		= IOMUX_PAD(0x0558, 0x0188, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__TPSMP_HDATA_15		= IOMUX_PAD(0x0558, 0x0188, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__SRC_BT_CFG_1		= IOMUX_PAD(0x0558, 0x0188, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__EPDC_SDLE		= IOMUX_PAD(0x0558, 0x0188, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__WEIM_WEIM_DA_A_10	= IOMUX_PAD(0x055C, 0x018C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__IPU1_DI1_PIN15	= IOMUX_PAD(0x055C, 0x018C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__IPU1_CSI1_DATA_EN	= IOMUX_PAD(0x055C, 0x018C, 2, 0x08B0, 1, 0),
+-	MX6_PAD_EIM_DA10__MIPI_CORE_DPHY_TEST_OUT_12	= IOMUX_PAD(0x055C, 0x018C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__GPIO_3_10		= IOMUX_PAD(0x055C, 0x018C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__TPSMP_HDATA_24	= IOMUX_PAD(0x055C, 0x018C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__SRC_BT_CFG_10		= IOMUX_PAD(0x055C, 0x018C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__EPDC_SDDO_1		= IOMUX_PAD(0x055C, 0x018C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__WEIM_WEIM_DA_A_11	= IOMUX_PAD(0x0560, 0x0190, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__IPU1_DI1_PIN2		= IOMUX_PAD(0x0560, 0x0190, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__IPU1_CSI1_HSYNC	= IOMUX_PAD(0x0560, 0x0190, 2, 0x08B4, 0, 0),
+-	MX6_PAD_EIM_DA11__MIPI_CORE_DPHY_TEST_OUT_13	= IOMUX_PAD(0x0560, 0x0190, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__SDMA_DEBUG_EVT_CHN_LINES_6	= IOMUX_PAD(0x0560, 0x0190, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__GPIO_3_11		= IOMUX_PAD(0x0560, 0x0190, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__TPSMP_HDATA_25	= IOMUX_PAD(0x0560, 0x0190, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__SRC_BT_CFG_11		= IOMUX_PAD(0x0560, 0x0190, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__EPDC_SDDO_3		= IOMUX_PAD(0x0560, 0x0190, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__WEIM_WEIM_DA_A_12	= IOMUX_PAD(0x0564, 0x0194, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__IPU1_DI1_PIN3		= IOMUX_PAD(0x0564, 0x0194, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__IPU1_CSI1_VSYNC	= IOMUX_PAD(0x0564, 0x0194, 2, 0x08BC, 1, 0),
+-	MX6_PAD_EIM_DA12__MIPI_CORE_DPHY_TEST_OUT_14	= IOMUX_PAD(0x0564, 0x0194, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__SDMA_DEBUG_EVT_CHN_LINES_3	= IOMUX_PAD(0x0564, 0x0194, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__GPIO_3_12		= IOMUX_PAD(0x0564, 0x0194, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__TPSMP_HDATA_26	= IOMUX_PAD(0x0564, 0x0194, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__SRC_BT_CFG_12		= IOMUX_PAD(0x0564, 0x0194, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__EPDC_SDDO_2		= IOMUX_PAD(0x0564, 0x0194, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__WEIM_WEIM_DA_A_13	= IOMUX_PAD(0x0568, 0x0198, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__IPU1_DI1_D0_CS	= IOMUX_PAD(0x0568, 0x0198, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__CCM_DI1_EXT_CLK	= IOMUX_PAD(0x0568, 0x0198, 2, 0x07D0, 0, 0),
+-	MX6_PAD_EIM_DA13__MIPI_CORE_DPHY_TEST_OUT_15	= IOMUX_PAD(0x0568, 0x0198, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__SDMA_DEBUG_EVT_CHN_LINES_4	= IOMUX_PAD(0x0568, 0x0198, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__GPIO_3_13		= IOMUX_PAD(0x0568, 0x0198, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__TPSMP_HDATA_27	= IOMUX_PAD(0x0568, 0x0198, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__SRC_BT_CFG_13		= IOMUX_PAD(0x0568, 0x0198, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__EPDC_SDDO_13		= IOMUX_PAD(0x0568, 0x0198, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__WEIM_WEIM_DA_A_14	= IOMUX_PAD(0x056C, 0x019C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__IPU1_DI1_D1_CS	= IOMUX_PAD(0x056C, 0x019C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__CCM_DI0_EXT_CLK	= IOMUX_PAD(0x056C, 0x019C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__MIPI_CORE_DPHY_TEST_OUT_16	= IOMUX_PAD(0x056C, 0x019C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__SDMA_DEBUG_EVT_CHN_LINES_5	= IOMUX_PAD(0x056C, 0x019C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__GPIO_3_14		= IOMUX_PAD(0x056C, 0x019C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__TPSMP_HDATA_28	= IOMUX_PAD(0x056C, 0x019C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__SRC_BT_CFG_14		= IOMUX_PAD(0x056C, 0x019C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__EPDC_SDDO_14		= IOMUX_PAD(0x056C, 0x019C, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__WEIM_WEIM_DA_A_15	= IOMUX_PAD(0x0570, 0x01A0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__IPU1_DI1_PIN1		= IOMUX_PAD(0x0570, 0x01A0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__IPU1_DI1_PIN4		= IOMUX_PAD(0x0570, 0x01A0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__MIPI_CORE_DPHY_TEST_OUT_17	= IOMUX_PAD(0x0570, 0x01A0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__GPIO_3_15		= IOMUX_PAD(0x0570, 0x01A0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__TPSMP_HDATA_29	= IOMUX_PAD(0x0570, 0x01A0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__SRC_BT_CFG_15		= IOMUX_PAD(0x0570, 0x01A0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__EPDC_SDDO_9		= IOMUX_PAD(0x0570, 0x01A0, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__WEIM_WEIM_DA_A_2	= IOMUX_PAD(0x0574, 0x01A4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__IPU1_DISP1_DAT_7	= IOMUX_PAD(0x0574, 0x01A4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__IPU1_CSI1_D_7		= IOMUX_PAD(0x0574, 0x01A4, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__MIPI_CORE_DPHY_TEST_OUT_4	= IOMUX_PAD(0x0574, 0x01A4, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__ANATOP_USBPHY1_TSTI_TX_HS_MODE	= IOMUX_PAD(0x0574, 0x01A4, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__GPIO_3_2		= IOMUX_PAD(0x0574, 0x01A4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__TPSMP_HDATA_16		= IOMUX_PAD(0x0574, 0x01A4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__SRC_BT_CFG_2		= IOMUX_PAD(0x0574, 0x01A4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__EPDC_BDR_0		= IOMUX_PAD(0x0574, 0x01A4, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__WEIM_WEIM_DA_A_3	= IOMUX_PAD(0x0578, 0x01A8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__IPU1_DISP1_DAT_6	= IOMUX_PAD(0x0578, 0x01A8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__IPU1_CSI1_D_6		= IOMUX_PAD(0x0578, 0x01A8, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__MIPI_CORE_DPHY_TEST_OUT_5	= IOMUX_PAD(0x0578, 0x01A8, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__ANATOP_USBPHY1_TSTI_TX_HIZ	= IOMUX_PAD(0x0578, 0x01A8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__GPIO_3_3		= IOMUX_PAD(0x0578, 0x01A8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__TPSMP_HDATA_17		= IOMUX_PAD(0x0578, 0x01A8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__SRC_BT_CFG_3		= IOMUX_PAD(0x0578, 0x01A8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__EPDC_BDR_1		= IOMUX_PAD(0x0578, 0x01A8, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__WEIM_WEIM_DA_A_4	= IOMUX_PAD(0x057C, 0x01AC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__IPU1_DISP1_DAT_5	= IOMUX_PAD(0x057C, 0x01AC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__IPU1_CSI1_D_5		= IOMUX_PAD(0x057C, 0x01AC, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__MIPI_CORE_DPHY_TEST_OUT_6	= IOMUX_PAD(0x057C, 0x01AC, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__ANATOP_USBPHY1_TSTI_TX_EN	= IOMUX_PAD(0x057C, 0x01AC, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__GPIO_3_4		= IOMUX_PAD(0x057C, 0x01AC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__TPSMP_HDATA_18		= IOMUX_PAD(0x057C, 0x01AC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__SRC_BT_CFG_4		= IOMUX_PAD(0x057C, 0x01AC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__EPDC_SDCE_0		= IOMUX_PAD(0x057C, 0x01AC, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__WEIM_WEIM_DA_A_5	= IOMUX_PAD(0x0580, 0x01B0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__IPU1_DISP1_DAT_4	= IOMUX_PAD(0x0580, 0x01B0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__IPU1_CSI1_D_4		= IOMUX_PAD(0x0580, 0x01B0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__MIPI_CORE_DPHY_TEST_OUT_7	= IOMUX_PAD(0x0580, 0x01B0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__ANATOP_USBPHY1_TSTI_TX_DP	= IOMUX_PAD(0x0580, 0x01B0, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__GPIO_3_5		= IOMUX_PAD(0x0580, 0x01B0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__TPSMP_HDATA_19		= IOMUX_PAD(0x0580, 0x01B0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__SRC_BT_CFG_5		= IOMUX_PAD(0x0580, 0x01B0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__EPDC_SDCE_1		= IOMUX_PAD(0x0580, 0x01B0, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__WEIM_WEIM_DA_A_6	= IOMUX_PAD(0x0584, 0x01B4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__IPU1_DISP1_DAT_3	= IOMUX_PAD(0x0584, 0x01B4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__IPU1_CSI1_D_3		= IOMUX_PAD(0x0584, 0x01B4, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__MIPI_CORE_DPHY_TEST_OUT_8	= IOMUX_PAD(0x0584, 0x01B4, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__ANATOP_USBPHY1_TSTI_TX_DN	= IOMUX_PAD(0x0584, 0x01B4, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__GPIO_3_6		= IOMUX_PAD(0x0584, 0x01B4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__TPSMP_HDATA_20		= IOMUX_PAD(0x0584, 0x01B4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__SRC_BT_CFG_6		= IOMUX_PAD(0x0584, 0x01B4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__EPDC_SDCE_2		= IOMUX_PAD(0x0584, 0x01B4, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__WEIM_WEIM_DA_A_7	= IOMUX_PAD(0x0588, 0x01B8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__IPU1_DISP1_DAT_2	= IOMUX_PAD(0x0588, 0x01B8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__IPU1_CSI1_D_2		= IOMUX_PAD(0x0588, 0x01B8, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__MIPI_CORE_DPHY_TEST_OUT_9	= IOMUX_PAD(0x0588, 0x01B8, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__GPIO_3_7		= IOMUX_PAD(0x0588, 0x01B8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__TPSMP_HDATA_21		= IOMUX_PAD(0x0588, 0x01B8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__SRC_BT_CFG_7		= IOMUX_PAD(0x0588, 0x01B8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__EPDC_SDCE_3		= IOMUX_PAD(0x0588, 0x01B8, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__WEIM_WEIM_DA_A_8	= IOMUX_PAD(0x058C, 0x01BC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__IPU1_DISP1_DAT_1	= IOMUX_PAD(0x058C, 0x01BC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__IPU1_CSI1_D_1		= IOMUX_PAD(0x058C, 0x01BC, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__MIPI_CORE_DPHY_TEST_OUT_10	= IOMUX_PAD(0x058C, 0x01BC, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__GPIO_3_8		= IOMUX_PAD(0x058C, 0x01BC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__TPSMP_HDATA_22		= IOMUX_PAD(0x058C, 0x01BC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__SRC_BT_CFG_8		= IOMUX_PAD(0x058C, 0x01BC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__EPDC_SDCE_4		= IOMUX_PAD(0x058C, 0x01BC, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__WEIM_WEIM_DA_A_9	= IOMUX_PAD(0x0590, 0x01C0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__IPU1_DISP1_DAT_0	= IOMUX_PAD(0x0590, 0x01C0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__IPU1_CSI1_D_0		= IOMUX_PAD(0x0590, 0x01C0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__MIPI_CORE_DPHY_TEST_OUT_11	= IOMUX_PAD(0x0590, 0x01C0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__GPIO_3_9		= IOMUX_PAD(0x0590, 0x01C0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__TPSMP_HDATA_23		= IOMUX_PAD(0x0590, 0x01C0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__SRC_BT_CFG_9		= IOMUX_PAD(0x0590, 0x01C0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__EPDC_SDCE_5		= IOMUX_PAD(0x0590, 0x01C0, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__WEIM_WEIM_EB_0		= IOMUX_PAD(0x0594, 0x01C4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__IPU1_DISP1_DAT_11	= IOMUX_PAD(0x0594, 0x01C4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__IPU1_CSI1_D_11		= IOMUX_PAD(0x0594, 0x01C4, 2, 0x088C, 1, 0),
+-	MX6_PAD_EIM_EB0__MIPI_CORE_DPHY_TEST_OUT_0	= IOMUX_PAD(0x0594, 0x01C4, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__CCM_PMIC_RDY		= IOMUX_PAD(0x0594, 0x01C4, 4, 0x07D4, 0, 0),
+-	MX6_PAD_EIM_EB0__GPIO_2_28		= IOMUX_PAD(0x0594, 0x01C4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__TPSMP_HDATA_12		= IOMUX_PAD(0x0594, 0x01C4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__SRC_BT_CFG_27		= IOMUX_PAD(0x0594, 0x01C4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__EPDC_PWRCOM		= IOMUX_PAD(0x0594, 0x01C4, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__WEIM_WEIM_EB_1		= IOMUX_PAD(0x0598, 0x01C8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__IPU1_DISP1_DAT_10	= IOMUX_PAD(0x0598, 0x01C8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__IPU1_CSI1_D_10		= IOMUX_PAD(0x0598, 0x01C8, 2, 0x0888, 1, 0),
+-	MX6_PAD_EIM_EB1__MIPI_CORE_DPHY_TEST_OUT_1	= IOMUX_PAD(0x0598, 0x01C8, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__GPIO_2_29		= IOMUX_PAD(0x0598, 0x01C8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__TPSMP_HDATA_13		= IOMUX_PAD(0x0598, 0x01C8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__SRC_BT_CFG_28		= IOMUX_PAD(0x0598, 0x01C8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__EPDC_SDSHR		= IOMUX_PAD(0x0598, 0x01C8, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB2__WEIM_WEIM_EB_2		= IOMUX_PAD(0x059C, 0x01CC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB2__ECSPI1_SS0		= IOMUX_PAD(0x059C, 0x01CC, 1, 0x07E4, 2, 0),
+-	MX6_PAD_EIM_EB2__CCM_DI1_EXT_CLK	= IOMUX_PAD(0x059C, 0x01CC, 2, 0x07D0, 1, 0),
+-	MX6_PAD_EIM_EB2__IPU1_CSI1_D_19		= IOMUX_PAD(0x059C, 0x01CC, 3, 0x08AC, 1, 0),
+-	MX6_PAD_EIM_EB2__HDMI_TX_DDC_SCL	= IOMUX_PAD(0x059C, 0x01CC, 4, 0x0860, 0, 0),
+-	MX6_PAD_EIM_EB2__GPIO_2_30		= IOMUX_PAD(0x059C, 0x01CC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB2__I2C2_SCL		= IOMUX_PAD(0x059C, 0x01CC, 6 | IOMUX_CONFIG_SION, 0x0870, 0, 0),
+-	MX6_PAD_EIM_EB2__SRC_BT_CFG_30		= IOMUX_PAD(0x059C, 0x01CC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB2__EPDC_SDDO_5		= IOMUX_PAD(0x059C, 0x01CC, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__WEIM_WEIM_EB_3		= IOMUX_PAD(0x05A0, 0x01D0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__ECSPI4_RDY		= IOMUX_PAD(0x05A0, 0x01D0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__UART3_CTS		= IOMUX_PAD(0x05A0, 0x01D0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__UART3_RTS		= IOMUX_PAD(0x05A0, 0x01D0, 2, 0x0908, 3, 0),
+-	MX6_PAD_EIM_EB3__UART1_RI		= IOMUX_PAD(0x05A0, 0x01D0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__IPU1_CSI1_HSYNC	= IOMUX_PAD(0x05A0, 0x01D0, 4, 0x08B4, 1, 0),
+-	MX6_PAD_EIM_EB3__GPIO_2_31		= IOMUX_PAD(0x05A0, 0x01D0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__IPU1_DI1_PIN3		= IOMUX_PAD(0x05A0, 0x01D0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__SRC_BT_CFG_31		= IOMUX_PAD(0x05A0, 0x01D0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__EPDC_SDCE_0		= IOMUX_PAD(0x05A0, 0x01D0, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__WEIM_ACLK_FREERUN	= IOMUX_PAD(0x05A0, 0x01D0, 9, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__WEIM_WEIM_LBA		= IOMUX_PAD(0x05A4, 0x01D4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__IPU1_DI1_PIN17		= IOMUX_PAD(0x05A4, 0x01D4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__ECSPI2_SS1		= IOMUX_PAD(0x05A4, 0x01D4, 2, 0x0804, 1, 0),
+-	MX6_PAD_EIM_LBA__GPIO_2_27		= IOMUX_PAD(0x05A4, 0x01D4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__TPSMP_HDATA_11		= IOMUX_PAD(0x05A4, 0x01D4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__SRC_BT_CFG_26		= IOMUX_PAD(0x05A4, 0x01D4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__EPDC_SDDO_4		= IOMUX_PAD(0x05A4, 0x01D4, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__WEIM_WEIM_OE		= IOMUX_PAD(0x05A8, 0x01D8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__IPU1_DI1_PIN7		= IOMUX_PAD(0x05A8, 0x01D8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__ECSPI2_MISO		= IOMUX_PAD(0x05A8, 0x01D8, 2, 0x07F8, 2, 0),
+-	MX6_PAD_EIM_OE__MIPI_CORE_DPHY_TEST_OUT_26	= IOMUX_PAD(0x05A8, 0x01D8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__GPIO_2_25		= IOMUX_PAD(0x05A8, 0x01D8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__TPSMP_HDATA_9		= IOMUX_PAD(0x05A8, 0x01D8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__EPDC_PWRIRQ		= IOMUX_PAD(0x05A8, 0x01D8, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__WEIM_WEIM_RW		= IOMUX_PAD(0x05AC, 0x01DC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__IPU1_DI1_PIN8		= IOMUX_PAD(0x05AC, 0x01DC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__ECSPI2_SS0		= IOMUX_PAD(0x05AC, 0x01DC, 2, 0x0800, 2, 0),
+-	MX6_PAD_EIM_RW__MIPI_CORE_DPHY_TEST_OUT_27	= IOMUX_PAD(0x05AC, 0x01DC, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__GPIO_2_26		= IOMUX_PAD(0x05AC, 0x01DC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__TPSMP_HDATA_10		= IOMUX_PAD(0x05AC, 0x01DC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__SRC_BT_CFG_29		= IOMUX_PAD(0x05AC, 0x01DC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__EPDC_SDDO_7		= IOMUX_PAD(0x05AC, 0x01DC, 8, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__WEIM_WEIM_WAIT	= IOMUX_PAD(0x05B0, 0x01E0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__WEIM_WEIM_DTACK_B	= IOMUX_PAD(0x05B0, 0x01E0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__GPIO_5_0		= IOMUX_PAD(0x05B0, 0x01E0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__TPSMP_HDATA_30	= IOMUX_PAD(0x05B0, 0x01E0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__SRC_BT_CFG_25		= IOMUX_PAD(0x05B0, 0x01E0, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__ENET_RX_EN		= IOMUX_PAD(0x05B4, 0x01E4, 1, 0x0828, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__ESAI1_SCKT		= IOMUX_PAD(0x05B4, 0x01E4, 2, 0x0840, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__SPDIF_SPDIF_EXTCLK	= IOMUX_PAD(0x05B4, 0x01E4, 3, 0x08F4, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__GPIO_1_25		= IOMUX_PAD(0x05B4, 0x01E4, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__PHY_TDO		= IOMUX_PAD(0x05B4, 0x01E4, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__ANATOP_USBPHY1_TSTO_RX_FS_RXD	= IOMUX_PAD(0x05B4, 0x01E4, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__MLB_MLBDAT		= IOMUX_PAD(0x05B8, 0x01E8, 0, 0x08E0, 0, 0),
+-	MX6_PAD_ENET_MDC__ENET_MDC		= IOMUX_PAD(0x05B8, 0x01E8, 1, 0x0000, 0,  0),
+-	MX6_PAD_ENET_MDC__ESAI1_TX5_RX0		= IOMUX_PAD(0x05B8, 0x01E8, 2, 0x0858, 0, 0),
+-	MX6_PAD_ENET_MDC__ENET_1588_EVENT1_IN	= IOMUX_PAD(0x05B8, 0x01E8, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__GPIO_1_31		= IOMUX_PAD(0x05B8, 0x01E8, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__ANATOP_USBPHY2_TSTO_RX_DISCON_DET	= IOMUX_PAD(0x05B8, 0x01E8, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__ENET_MDIO		= IOMUX_PAD(0x05BC, 0x01EC, 1, 0x0810, 0, 0),
+-	MX6_PAD_ENET_MDIO__ESAI1_SCKR		= IOMUX_PAD(0x05BC, 0x01EC, 2, 0x083C, 0, 0),
+-	MX6_PAD_ENET_MDIO__SDMA_DEBUG_BUS_DEVICE_3	= IOMUX_PAD(0x05BC, 0x01EC, 3, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__ENET_1588_EVENT1_OUT	= IOMUX_PAD(0x05BC, 0x01EC, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__GPIO_1_22		= IOMUX_PAD(0x05BC, 0x01EC, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__SPDIF_PLOCK		= IOMUX_PAD(0x05BC, 0x01EC, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__ENET_TX_CLK	= IOMUX_PAD(0x05C0, 0x01F0, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__ESAI1_FSR		= IOMUX_PAD(0x05C0, 0x01F0, 2, 0x082C, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__SDMA_DEBUG_BUS_DEVICE_4	= IOMUX_PAD(0x05C0, 0x01F0, 3, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__GPIO_1_23		= IOMUX_PAD(0x05C0, 0x01F0, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__SPDIF_SRCLK	= IOMUX_PAD(0x05C0, 0x01F0, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__ANATOP_USBPHY1_TSTO_RX_SQUELCH	= IOMUX_PAD(0x05C0, 0x01F0, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__ANATOP_USBOTG_ID	= IOMUX_PAD(0x05C4, 0x01F4, 0, 0x0790, 0, 0),
+-	MX6_PAD_ENET_RX_ER__ENET_RX_ER		= IOMUX_PAD(0x05C4, 0x01F4, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__ESAI1_HCKR		= IOMUX_PAD(0x05C4, 0x01F4, 2, 0x0834, 0, 0),
+-	MX6_PAD_ENET_RX_ER__SPDIF_IN1		= IOMUX_PAD(0x05C4, 0x01F4, 3, 0x08F0, 1, 0),
+-	MX6_PAD_ENET_RX_ER__ENET_1588_EVENT2_OUT	= IOMUX_PAD(0x05C4, 0x01F4, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__GPIO_1_24		= IOMUX_PAD(0x05C4, 0x01F4, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__PHY_TDI		= IOMUX_PAD(0x05C4, 0x01F4, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__ANATOP_USBPHY1_TSTO_RX_HS_RXD	= IOMUX_PAD(0x05C4, 0x01F4, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__OSC32K_32K_OUT	= IOMUX_PAD(0x05C8, 0x01F8, 0, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__ENET_RDATA_0		= IOMUX_PAD(0x05C8, 0x01F8, 1, 0x0818, 0, 0),
+-	MX6_PAD_ENET_RXD0__ESAI1_HCKT		= IOMUX_PAD(0x05C8, 0x01F8, 2, 0x0838, 0, 0),
+-	MX6_PAD_ENET_RXD0__SPDIF_OUT1		= IOMUX_PAD(0x05C8, 0x01F8, 3, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__GPIO_1_27		= IOMUX_PAD(0x05C8, 0x01F8, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__PHY_TMS		= IOMUX_PAD(0x05C8, 0x01F8, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__ANATOP_USBPHY1_TSTO_PLL_CLK20DIV	= IOMUX_PAD(0x05C8, 0x01F8, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__MLB_MLBSIG		= IOMUX_PAD(0x05CC, 0x01FC, 0, 0x08E4, 0, 0),
+-	MX6_PAD_ENET_RXD1__ENET_RDATA_1		= IOMUX_PAD(0x05CC, 0x01FC, 1, 0x081C, 0, 0),
+-	MX6_PAD_ENET_RXD1__ESAI1_FST		= IOMUX_PAD(0x05CC, 0x01FC, 2, 0x0830, 0, 0),
+-	MX6_PAD_ENET_RXD1__ENET_1588_EVENT3_OUT	= IOMUX_PAD(0x05CC, 0x01FC, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__GPIO_1_26		= IOMUX_PAD(0x05CC, 0x01FC, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__PHY_TCK		= IOMUX_PAD(0x05CC, 0x01FC, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__ANATOP_USBPHY1_TSTO_RX_DISCON_DET	= IOMUX_PAD(0x05CC, 0x01FC, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__ENET_TX_EN		= IOMUX_PAD(0x05D0, 0x0200, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__ESAI1_TX3_RX2	= IOMUX_PAD(0x05D0, 0x0200, 2, 0x0850, 0, 0),
+-	MX6_PAD_ENET_TX_EN__GPIO_1_28		= IOMUX_PAD(0x05D0, 0x0200, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__ANATOP_USBPHY2_TSTO_RX_SQUELCH	= IOMUX_PAD(0x05D0, 0x0200, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__I2C4_SCL		= IOMUX_PAD(0x05D0, 0x0200, 9 | IOMUX_CONFIG_SION, 0x0880, 0, 0),
+-	MX6_PAD_ENET_TXD0__ENET_TDATA_0		= IOMUX_PAD(0x05D4, 0x0204, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD0__ESAI1_TX4_RX1	= IOMUX_PAD(0x05D4, 0x0204, 2, 0x0854, 0, 0),
+-	MX6_PAD_ENET_TXD0__GPIO_1_30		= IOMUX_PAD(0x05D4, 0x0204, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD0__ANATOP_USBPHY2_TSTO_RX_FS_RXD	= IOMUX_PAD(0x05D4, 0x0204, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__MLB_MLBCLK		= IOMUX_PAD(0x05D8, 0x0208, 0, 0x08DC, 0, 0),
+-	MX6_PAD_ENET_TXD1__ENET_TDATA_1		= IOMUX_PAD(0x05D8, 0x0208, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__ESAI1_TX2_RX3	= IOMUX_PAD(0x05D8, 0x0208, 2, 0x084C, 0, 0),
+-	MX6_PAD_ENET_TXD1__ENET_1588_EVENT0_IN	= IOMUX_PAD(0x05D8, 0x0208, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__GPIO_1_29		= IOMUX_PAD(0x05D8, 0x0208, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__ANATOP_USBPHY2_TSTO_RX_HS_RXD	= IOMUX_PAD(0x05D8, 0x0208, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__I2C4_SDA		= IOMUX_PAD(0x05D8, 0x0208, 9 | IOMUX_CONFIG_SION, 0x0884, 0, 0),
+-	MX6_PAD_GPIO_0__CCM_CLKO		= IOMUX_PAD(0x05DC, 0x020C, 0, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__KPP_COL_5		= IOMUX_PAD(0x05DC, 0x020C, 2, 0x08C0, 1, 0),
+-	MX6_PAD_GPIO_0__ASRC_ASRC_EXT_CLK	= IOMUX_PAD(0x05DC, 0x020C, 3, 0x0794, 0, 0),
+-	MX6_PAD_GPIO_0__EPIT1_EPITO		= IOMUX_PAD(0x05DC, 0x020C, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__GPIO_1_0		= IOMUX_PAD(0x05DC, 0x020C, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__USBOH3_USBH1_PWR	= IOMUX_PAD(0x05DC, 0x020C, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__SNVS_HP_WRAPPER_SNVS_VIO_5	= IOMUX_PAD(0x05DC, 0x020C, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__ESAI1_SCKR		= IOMUX_PAD(0x05E0, 0x0210, 0, 0x083C, 1, 0),
+-	MX6_PAD_GPIO_1__WDOG2_WDOG_B		= IOMUX_PAD(0x05E0, 0x0210, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__KPP_ROW_5		= IOMUX_PAD(0x05E0, 0x0210, 2, 0x08CC, 1, 0),
+-	MX6_PAD_GPIO_1__USB_OTG_ID		= IOMUX_PAD(0x05E0, 0x0210, 3, 0x0790, 1, 0),
+-	MX6_PAD_GPIO_1__PWM2_PWMO		= IOMUX_PAD(0x05E0, 0x0210, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__GPIO_1_1		= IOMUX_PAD(0x05E0, 0x0210, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__USDHC1_CD		= IOMUX_PAD(0x05E0, 0x0210, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__SRC_TESTER_ACK		= IOMUX_PAD(0x05E0, 0x0210, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__ESAI1_TX3_RX2		= IOMUX_PAD(0x05E4, 0x0214, 0, 0x0850, 1, 0),
+-	MX6_PAD_GPIO_16__ENET_1588_EVENT2_IN	= IOMUX_PAD(0x05E4, 0x0214, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT	= IOMUX_PAD(0x05E4, 0x0214, 2, 0x080C, 0, 0),
+-	MX6_PAD_GPIO_16__USDHC1_LCTL		= IOMUX_PAD(0x05E4, 0x0214, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__SPDIF_IN1		= IOMUX_PAD(0x05E4, 0x0214, 4, 0x08F0, 2, 0),
+-	MX6_PAD_GPIO_16__GPIO_7_11		= IOMUX_PAD(0x05E4, 0x0214, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__I2C3_SDA		= IOMUX_PAD(0x05E4, 0x0214, 6 | IOMUX_CONFIG_SION, 0x087C, 1, 0),
+-	MX6_PAD_GPIO_16__SJC_DE_B		= IOMUX_PAD(0x05E4, 0x0214, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__ESAI1_TX0		= IOMUX_PAD(0x05E8, 0x0218, 0, 0x0844, 0, 0),
+-	MX6_PAD_GPIO_17__ENET_1588_EVENT3_IN	= IOMUX_PAD(0x05E8, 0x0218, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__CCM_PMIC_RDY		= IOMUX_PAD(0x05E8, 0x0218, 2, 0x07D4, 1, 0),
+-	MX6_PAD_GPIO_17__SDMA_SDMA_EXT_EVENT_0	= IOMUX_PAD(0x05E8, 0x0218, 3, 0x08E8, 1, 0),
+-	MX6_PAD_GPIO_17__SPDIF_OUT1		= IOMUX_PAD(0x05E8, 0x0218, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__GPIO_7_12		= IOMUX_PAD(0x05E8, 0x0218, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__SJC_JTAG_ACT		= IOMUX_PAD(0x05E8, 0x0218, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__ESAI1_TX1		= IOMUX_PAD(0x05EC, 0x021C, 0, 0x0848, 0, 0),
+-	MX6_PAD_GPIO_18__ENET_RX_CLK		= IOMUX_PAD(0x05EC, 0x021C, 1, 0x0814, 0, 0),
+-	MX6_PAD_GPIO_18__USDHC3_VSELECT		= IOMUX_PAD(0x05EC, 0x021C, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__SDMA_SDMA_EXT_EVENT_1	= IOMUX_PAD(0x05EC, 0x021C, 3, 0x08EC, 1, 0),
+-	MX6_PAD_GPIO_18__ASRC_ASRC_EXT_CLK	= IOMUX_PAD(0x05EC, 0x021C, 4, 0x0794, 1, 0),
+-	MX6_PAD_GPIO_18__GPIO_7_13		= IOMUX_PAD(0x05EC, 0x021C, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__SNVS_HP_WRAPPER_SNVS_VIO_5_CTL	= IOMUX_PAD(0x05EC, 0x021C, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__SRC_SYSTEM_RST		= IOMUX_PAD(0x05EC, 0x021C, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__KPP_COL_5		= IOMUX_PAD(0x05F0, 0x0220, 0, 0x08C0, 2, 0),
+-	MX6_PAD_GPIO_19__ENET_1588_EVENT0_OUT	= IOMUX_PAD(0x05F0, 0x0220, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__SPDIF_OUT1		= IOMUX_PAD(0x05F0, 0x0220, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__CCM_CLKO		= IOMUX_PAD(0x05F0, 0x0220, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__ECSPI1_RDY		= IOMUX_PAD(0x05F0, 0x0220, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__GPIO_4_5		= IOMUX_PAD(0x05F0, 0x0220, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__ENET_TX_ER		= IOMUX_PAD(0x05F0, 0x0220, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__SRC_INT_BOOT		= IOMUX_PAD(0x05F0, 0x0220, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__ESAI1_FST		= IOMUX_PAD(0x05F4, 0x0224, 0, 0x0830, 1, 0),
+-	MX6_PAD_GPIO_2__OBSERVE_MUX_OBSRV_INT_OUT2	= IOMUX_PAD(0x05F4, 0x0224, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__KPP_ROW_6		= IOMUX_PAD(0x05F4, 0x0224, 2, 0x08D0, 1, 0),
+-	MX6_PAD_GPIO_2__CCM_CCM_OUT_1		= IOMUX_PAD(0x05F4, 0x0224, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__CSU_CSU_ALARM_AUT_0	= IOMUX_PAD(0x05F4, 0x0224, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__GPIO_1_2		= IOMUX_PAD(0x05F4, 0x0224, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__USDHC2_WP		= IOMUX_PAD(0x05F4, 0x0224, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__MLB_MLBDAT		= IOMUX_PAD(0x05F4, 0x0224, 7, 0x08E0, 1, 0),
+-	MX6_PAD_GPIO_3__ESAI1_HCKR		= IOMUX_PAD(0x05F8, 0x0228, 0, 0x0834, 1, 0),
+-	MX6_PAD_GPIO_3__OBSERVE_MUX_OBSRV_INT_OUT0	= IOMUX_PAD(0x05F8, 0x0228, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__I2C3_SCL		= IOMUX_PAD(0x05F8, 0x0228, 2 | IOMUX_CONFIG_SION, 0x0878, 1, 0),
+-	MX6_PAD_GPIO_3__ANATOP_ANATOP_24M_OUT	= IOMUX_PAD(0x05F8, 0x0228, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__CCM_CLKO2		= IOMUX_PAD(0x05F8, 0x0228, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__GPIO_1_3		= IOMUX_PAD(0x05F8, 0x0228, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__USBOH3_USBH1_OC		= IOMUX_PAD(0x05F8, 0x0228, 6, 0x0924, 1, 0),
+-	MX6_PAD_GPIO_3__MLB_MLBCLK		= IOMUX_PAD(0x05F8, 0x0228, 7, 0x08DC, 1, 0),
+-	MX6_PAD_GPIO_4__ESAI1_HCKT		= IOMUX_PAD(0x05FC, 0x022C, 0, 0x0838, 1, 0),
+-	MX6_PAD_GPIO_4__OBSERVE_MUX_OBSRV_INT_OUT3	= IOMUX_PAD(0x05FC, 0x022C, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__KPP_COL_7		= IOMUX_PAD(0x05FC, 0x022C, 2, 0x08C8, 1, 0),
+-	MX6_PAD_GPIO_4__CCM_CCM_OUT_2		= IOMUX_PAD(0x05FC, 0x022C, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__CSU_CSU_ALARM_AUT_1	= IOMUX_PAD(0x05FC, 0x022C, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__GPIO_1_4		= IOMUX_PAD(0x05FC, 0x022C, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__USDHC2_CD		= IOMUX_PAD(0x05FC, 0x022C, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__OCOTP_CTRL_WRAPPER_FUSE_LATCHED	= IOMUX_PAD(0x05FC, 0x022C, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__ESAI1_TX2_RX3		= IOMUX_PAD(0x0600, 0x0230, 0, 0x084C, 1, 0),
+-	MX6_PAD_GPIO_5__OBSERVE_MUX_OBSRV_INT_OUT4	= IOMUX_PAD(0x0600, 0x0230, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__KPP_ROW_7		= IOMUX_PAD(0x0600, 0x0230, 2, 0x08D4, 1, 0),
+-	MX6_PAD_GPIO_5__CCM_CLKO		= IOMUX_PAD(0x0600, 0x0230, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__CSU_CSU_ALARM_AUT_2	= IOMUX_PAD(0x0600, 0x0230, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__GPIO_1_5		= IOMUX_PAD(0x0600, 0x0230, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__I2C3_SCL		= IOMUX_PAD(0x0600, 0x0230, 6 | IOMUX_CONFIG_SION, 0x0878, 2, 0),
+-	MX6_PAD_GPIO_5__SIMBA_EVENTI		= IOMUX_PAD(0x0600, 0x0230, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__ESAI1_SCKT		= IOMUX_PAD(0x0604, 0x0234, 0, 0x0840, 1, 0),
+-	MX6_PAD_GPIO_6__OBSERVE_MUX_OBSRV_INT_OUT1	= IOMUX_PAD(0x0604, 0x0234, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__I2C3_SDA		= IOMUX_PAD(0x0604, 0x0234, 2 | IOMUX_CONFIG_SION, 0x087C, 2, 0),
+-	MX6_PAD_GPIO_6__CCM_CCM_OUT_0		= IOMUX_PAD(0x0604, 0x0234, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__CSU_CSU_INT_DEB		= IOMUX_PAD(0x0604, 0x0234, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__GPIO_1_6		= IOMUX_PAD(0x0604, 0x0234, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__USDHC2_LCTL		= IOMUX_PAD(0x0604, 0x0234, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__MLB_MLBSIG		= IOMUX_PAD(0x0604, 0x0234, 7, 0x08E4, 1, 0),
+-	MX6_PAD_GPIO_7__ESAI1_TX4_RX1		= IOMUX_PAD(0x0608, 0x0238, 0, 0x0854, 1, 0),
+-	MX6_PAD_GPIO_7__EPIT1_EPITO		= IOMUX_PAD(0x0608, 0x0238, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__CAN1_TXCAN		= IOMUX_PAD(0x0608, 0x0238, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__UART2_TXD		= IOMUX_PAD(0x0608, 0x0238, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__UART2_RXD		= IOMUX_PAD(0x0608, 0x0238, 4, 0x0904, 2, 0),
+-	MX6_PAD_GPIO_7__GPIO_1_7		= IOMUX_PAD(0x0608, 0x0238, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__SPDIF_PLOCK		= IOMUX_PAD(0x0608, 0x0238, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__USBOH3_OTGUSB_HOST_MODE	= IOMUX_PAD(0x0608, 0x0238, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__I2C4_SCL		= IOMUX_PAD(0x0608, 0x0238, 8 | IOMUX_CONFIG_SION, 0x0880, 1, 0),
+-	MX6_PAD_GPIO_8__ESAI1_TX5_RX0		= IOMUX_PAD(0x060C, 0x023C, 0, 0x0858, 1, 0),
+-	MX6_PAD_GPIO_8__ANATOP_ANATOP_32K_OUT	= IOMUX_PAD(0x060C, 0x023C, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__EPIT2_EPITO		= IOMUX_PAD(0x060C, 0x023C, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__CAN1_RXCAN		= IOMUX_PAD(0x060C, 0x023C, 3, 0x07C8, 0, 0),
+-	MX6_PAD_GPIO_8__UART2_TXD		= IOMUX_PAD(0x060C, 0x023C, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__UART2_RXD		= IOMUX_PAD(0x060C, 0x023C, 4, 0x0904, 3, 0),
+-	MX6_PAD_GPIO_8__GPIO_1_8		= IOMUX_PAD(0x060C, 0x023C, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__SPDIF_SRCLK		= IOMUX_PAD(0x060C, 0x023C, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__USBOH3_OTGUSB_PWRCTL_WAKEUP	= IOMUX_PAD(0x060C, 0x023C, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__I2C4_SDA		= IOMUX_PAD(0x060C, 0x023C, 8 | IOMUX_CONFIG_SION, 0x0884, 1, 0),
+-	MX6_PAD_GPIO_9__ESAI1_FSR		= IOMUX_PAD(0x0610, 0x0240, 0, 0x082C, 1, 0),
+-	MX6_PAD_GPIO_9__WDOG1_WDOG_B		= IOMUX_PAD(0x0610, 0x0240, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__KPP_COL_6		= IOMUX_PAD(0x0610, 0x0240, 2, 0x08C4, 1, 0),
+-	MX6_PAD_GPIO_9__CCM_REF_EN_B		= IOMUX_PAD(0x0610, 0x0240, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__PWM1_PWMO		= IOMUX_PAD(0x0610, 0x0240, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__GPIO_1_9		= IOMUX_PAD(0x0610, 0x0240, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__USDHC1_WP		= IOMUX_PAD(0x0610, 0x0240, 6, 0x092C, 1, 0),
+-	MX6_PAD_GPIO_9__SRC_EARLY_RST		= IOMUX_PAD(0x0610, 0x0240, 7, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_MOD__SJC_MOD		= IOMUX_PAD(0x0614, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TCK__SJC_TCK		= IOMUX_PAD(0x0618, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TDI__SJC_TDI		= IOMUX_PAD(0x061C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TDO__SJC_TDO		= IOMUX_PAD(0x0620, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TMS__SJC_TMS		= IOMUX_PAD(0x0624, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TRSTB__SJC_TRSTB		= IOMUX_PAD(0x0628, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__ECSPI1_SCLK		= IOMUX_PAD(0x062C, 0x0244, 0, 0x07D8, 3, 0),
+-	MX6_PAD_KEY_COL0__ENET_RDATA_3		= IOMUX_PAD(0x062C, 0x0244, 1, 0x0824, 0, 0),
+-	MX6_PAD_KEY_COL0__AUDMUX_AUD5_TXC	= IOMUX_PAD(0x062C, 0x0244, 2, 0x07C0, 1, 0),
+-	MX6_PAD_KEY_COL0__KPP_COL_0		= IOMUX_PAD(0x062C, 0x0244, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__UART4_TXD		= IOMUX_PAD(0x062C, 0x0244, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__UART4_RXD		= IOMUX_PAD(0x062C, 0x0244, 4, 0x0914, 2, 0),
+-	MX6_PAD_KEY_COL0__GPIO_4_6		= IOMUX_PAD(0x062C, 0x0244, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__DCIC1_DCIC_OUT	= IOMUX_PAD(0x062C, 0x0244, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__SRC_ANY_PU_RST	= IOMUX_PAD(0x062C, 0x0244, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__ECSPI1_MISO		= IOMUX_PAD(0x0630, 0x0248, 0, 0x07DC, 3, 0),
+-	MX6_PAD_KEY_COL1__ENET_MDIO		= IOMUX_PAD(0x0630, 0x0248, 1, 0x0810, 1, 0),
+-	MX6_PAD_KEY_COL1__AUDMUX_AUD5_TXFS	= IOMUX_PAD(0x0630, 0x0248, 2, 0x07C4, 1, 0),
+-	MX6_PAD_KEY_COL1__KPP_COL_1		= IOMUX_PAD(0x0630, 0x0248, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__UART5_TXD		= IOMUX_PAD(0x0630, 0x0248, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__UART5_RXD		= IOMUX_PAD(0x0630, 0x0248, 4, 0x091C, 2, 0),
+-	MX6_PAD_KEY_COL1__GPIO_4_8		= IOMUX_PAD(0x0630, 0x0248, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__USDHC1_VSELECT	= IOMUX_PAD(0x0630, 0x0248, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__PL301_SIM_MX6DL_PER1_HADDR_1	= IOMUX_PAD(0x0630, 0x0248, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__ECSPI1_SS1		= IOMUX_PAD(0x0634, 0x024C, 0, 0x07E8, 2, 0),
+-	MX6_PAD_KEY_COL2__ENET_RDATA_2		= IOMUX_PAD(0x0634, 0x024C, 1, 0x0820, 0, 0),
+-	MX6_PAD_KEY_COL2__CAN1_TXCAN		= IOMUX_PAD(0x0634, 0x024C, 2, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__KPP_COL_2		= IOMUX_PAD(0x0634, 0x024C, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__ENET_MDC		= IOMUX_PAD(0x0634, 0x024C, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__GPIO_4_10		= IOMUX_PAD(0x0634, 0x024C, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__USBOH3_H1USB_PWRCTL_WAKEUP	= IOMUX_PAD(0x0634, 0x024C, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__PL301_SIM_MX6DL_PER1_HADDR_3	= IOMUX_PAD(0x0634, 0x024C, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__ECSPI1_SS3		= IOMUX_PAD(0x0638, 0x0250, 0, 0x07F0, 1, 0),
+-	MX6_PAD_KEY_COL3__ENET_CRS		= IOMUX_PAD(0x0638, 0x0250, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__HDMI_TX_DDC_SCL	= IOMUX_PAD(0x0638, 0x0250, 2, 0x0860, 1, 0),
+-	MX6_PAD_KEY_COL3__KPP_COL_3		= IOMUX_PAD(0x0638, 0x0250, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__I2C2_SCL		= IOMUX_PAD(0x0638, 0x0250, 4 | IOMUX_CONFIG_SION, 0x0870, 1, 0),
+-	MX6_PAD_KEY_COL3__GPIO_4_12		= IOMUX_PAD(0x0638, 0x0250, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__SPDIF_IN1		= IOMUX_PAD(0x0638, 0x0250, 6, 0x08F0, 3, 0),
+-	MX6_PAD_KEY_COL3__PL301_SIM_MX6DL_PER1_HADDR_5	= IOMUX_PAD(0x0638, 0x0250, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__CAN2_TXCAN		= IOMUX_PAD(0x063C, 0x0254, 0, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__IPU1_SISG_4		= IOMUX_PAD(0x063C, 0x0254, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__USBOH3_USBOTG_OC	= IOMUX_PAD(0x063C, 0x0254, 2, 0x0920, 1, 0),
+-	MX6_PAD_KEY_COL4__KPP_COL_4		= IOMUX_PAD(0x063C, 0x0254, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__UART5_CTS		= IOMUX_PAD(0x063C, 0x0254, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__UART5_RTS		= IOMUX_PAD(0x063C, 0x0254, 4, 0x0918, 2, 0),
+-	MX6_PAD_KEY_COL4__GPIO_4_14		= IOMUX_PAD(0x063C, 0x0254, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__MMDC_MMDC_DEBUG_49	= IOMUX_PAD(0x063C, 0x0254, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__PL301_SIM_MX6DL_PER1_HADDR_7	= IOMUX_PAD(0x063C, 0x0254, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__ECSPI1_MOSI		= IOMUX_PAD(0x0640, 0x0258, 0, 0x07E0, 3, 0),
+-	MX6_PAD_KEY_ROW0__ENET_TDATA_3		= IOMUX_PAD(0x0640, 0x0258, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__AUDMUX_AUD5_TXD	= IOMUX_PAD(0x0640, 0x0258, 2, 0x07B4, 1, 0),
+-	MX6_PAD_KEY_ROW0__KPP_ROW_0		= IOMUX_PAD(0x0640, 0x0258, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__UART4_TXD		= IOMUX_PAD(0x0640, 0x0258, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__UART4_RXD		= IOMUX_PAD(0x0640, 0x0258, 4, 0x0914, 3, 0),
+-	MX6_PAD_KEY_ROW0__GPIO_4_7		= IOMUX_PAD(0x0640, 0x0258, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__DCIC2_DCIC_OUT	= IOMUX_PAD(0x0640, 0x0258, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__PL301_SIM_MX6DL_PER1_HADDR_0	= IOMUX_PAD(0x0640, 0x0258, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__ECSPI1_SS0		= IOMUX_PAD(0x0644, 0x025C, 0, 0x07E4, 3, 0),
+-	MX6_PAD_KEY_ROW1__ENET_COL		= IOMUX_PAD(0x0644, 0x025C, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__AUDMUX_AUD5_RXD	= IOMUX_PAD(0x0644, 0x025C, 2, 0x07B0, 1, 0),
+-	MX6_PAD_KEY_ROW1__KPP_ROW_1		= IOMUX_PAD(0x0644, 0x025C, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__UART5_TXD		= IOMUX_PAD(0x0644, 0x025C, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__UART5_RXD		= IOMUX_PAD(0x0644, 0x025C, 4, 0x091C, 3, 0),
+-	MX6_PAD_KEY_ROW1__GPIO_4_9		= IOMUX_PAD(0x0644, 0x025C, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__USDHC2_VSELECT	= IOMUX_PAD(0x0644, 0x025C, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__PL301_SIM_MX6DL_PER1_HADDR_2	= IOMUX_PAD(0x0644, 0x025C, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__ECSPI1_SS2		= IOMUX_PAD(0x0648, 0x0260, 0, 0x07EC, 1, 0),
+-	MX6_PAD_KEY_ROW2__ENET_TDATA_2		= IOMUX_PAD(0x0648, 0x0260, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__CAN1_RXCAN		= IOMUX_PAD(0x0648, 0x0260, 2, 0x07C8, 1, 0),
+-	MX6_PAD_KEY_ROW2__KPP_ROW_2		= IOMUX_PAD(0x0648, 0x0260, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__USDHC2_VSELECT	= IOMUX_PAD(0x0648, 0x0260, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__GPIO_4_11		= IOMUX_PAD(0x0648, 0x0260, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__HDMI_TX_CEC_LINE	= IOMUX_PAD(0x0648, 0x0260, 6, 0x085C, 1, 0),
+-	MX6_PAD_KEY_ROW2__PL301_SIM_MX6DL_PER1_HADDR_4	= IOMUX_PAD(0x0648, 0x0260, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__OSC32K_32K_OUT	= IOMUX_PAD(0x064C, 0x0264, 0, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__ASRC_ASRC_EXT_CLK	= IOMUX_PAD(0x064C, 0x0264, 1, 0x0794, 2, 0),
+-	MX6_PAD_KEY_ROW3__HDMI_TX_DDC_SDA	= IOMUX_PAD(0x064C, 0x0264, 2, 0x0864, 1, 0),
+-	MX6_PAD_KEY_ROW3__KPP_ROW_3		= IOMUX_PAD(0x064C, 0x0264, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__I2C2_SDA		= IOMUX_PAD(0x064C, 0x0264, 4 | IOMUX_CONFIG_SION, 0x0874, 1, 0),
+-	MX6_PAD_KEY_ROW3__GPIO_4_13		= IOMUX_PAD(0x064C, 0x0264, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__USDHC1_VSELECT	= IOMUX_PAD(0x064C, 0x0264, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__PL301_SIM_MX6DL_PER1_HADDR_6	= IOMUX_PAD(0x064C, 0x0264, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__CAN2_RXCAN		= IOMUX_PAD(0x0650, 0x0268, 0, 0x07CC, 0, 0),
+-	MX6_PAD_KEY_ROW4__IPU1_SISG_5		= IOMUX_PAD(0x0650, 0x0268, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__USBOH3_USBOTG_PWR	= IOMUX_PAD(0x0650, 0x0268, 2, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__KPP_ROW_4		= IOMUX_PAD(0x0650, 0x0268, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__UART5_CTS		= IOMUX_PAD(0x0650, 0x0268, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__UART5_RTS		= IOMUX_PAD(0x0650, 0x0268, 4, 0x0918, 3, 0),
+-	MX6_PAD_KEY_ROW4__GPIO_4_15		= IOMUX_PAD(0x0650, 0x0268, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__MMDC_MMDC_DEBUG_50	= IOMUX_PAD(0x0650, 0x0268, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__PL301_SIM_MX6DL_PER1_HADDR_8	= IOMUX_PAD(0x0650, 0x0268, 7, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_CLK_P__LDB_LVDS0_CLK	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX0_P__LDB_LVDS0_TX0	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX1_P__LDB_LVDS0_TX1	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX2_P__LDB_LVDS0_TX2	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX3_P__LDB_LVDS0_TX3	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_CLK_P__LDB_LVDS1_CLK	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX0_P__LDB_LVDS1_TX0	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX1_P__LDB_LVDS1_TX1	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX2_P__LDB_LVDS1_TX2	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX3_P__LDB_LVDS1_TX3	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__RAWNAND_ALE		= IOMUX_PAD(0x0654, 0x026C, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__USDHC4_RST		= IOMUX_PAD(0x0654, 0x026C, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__PCIE_CTRL_DIAG_STATUS_BUS_MUX_0	= IOMUX_PAD(0x0654, 0x026C, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__USBOH3_UH3_DFD_OUT_12	= IOMUX_PAD(0x0654, 0x026C, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__USBOH3_UH2_DFD_OUT_12	= IOMUX_PAD(0x0654, 0x026C, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__GPIO_6_8		= IOMUX_PAD(0x0654, 0x026C, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__MIPI_CORE_DPHY_TEST_IN_24	= IOMUX_PAD(0x0654, 0x026C, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__USDHC3_CLKI		= IOMUX_PAD(0x0654, 0x026C, 8, 0x0934, 0, 0),
+-	MX6_PAD_NANDF_CLE__RAWNAND_CLE		= IOMUX_PAD(0x0658, 0x0270, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__PCIE_CTRL_DIAG_STATUS_BUS_MUX_31	= IOMUX_PAD(0x0658, 0x0270, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__USBOH3_UH3_DFD_OUT_11	= IOMUX_PAD(0x0658, 0x0270, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__USBOH3_UH2_DFD_OUT_11	= IOMUX_PAD(0x0658, 0x0270, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__GPIO_6_7		= IOMUX_PAD(0x0658, 0x0270, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__MIPI_CORE_DPHY_TEST_IN_23	= IOMUX_PAD(0x0658, 0x0270, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__USDHC3_CLKO		= IOMUX_PAD(0x0658, 0x0270, 8, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__RAWNAND_CE0N		= IOMUX_PAD(0x065C, 0x0274, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__USBOH3_UH3_DFD_OUT_15	= IOMUX_PAD(0x065C, 0x0274, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__USBOH3_UH2_DFD_OUT_15	= IOMUX_PAD(0x065C, 0x0274, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__GPIO_6_11		= IOMUX_PAD(0x065C, 0x0274, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__USDHC1_CLKO		= IOMUX_PAD(0x065C, 0x0274, 8, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__RAWNAND_CE1N		= IOMUX_PAD(0x0660, 0x0278, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__USDHC4_VSELECT	= IOMUX_PAD(0x0660, 0x0278, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__USDHC3_VSELECT	= IOMUX_PAD(0x0660, 0x0278, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__PCIE_CTRL_DIAG_STATUS_BUS_MUX_3	= IOMUX_PAD(0x0660, 0x0278, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__GPIO_6_14		= IOMUX_PAD(0x0660, 0x0278, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__PL301_SIM_MX6DL_PER1_HREADYOUT	= IOMUX_PAD(0x0660, 0x0278, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__USDHC1_CLKI		= IOMUX_PAD(0x0660, 0x0278, 8, 0x0928, 0, 0),
+-	MX6_PAD_NANDF_CS2__RAWNAND_CE2N		= IOMUX_PAD(0x0664, 0x027C, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__IPU1_SISG_0		= IOMUX_PAD(0x0664, 0x027C, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__ESAI1_TX0		= IOMUX_PAD(0x0664, 0x027C, 2, 0x0844, 1, 0),
+-	MX6_PAD_NANDF_CS2__WEIM_WEIM_CRE	= IOMUX_PAD(0x0664, 0x027C, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__CCM_CLKO2		= IOMUX_PAD(0x0664, 0x027C, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__GPIO_6_15		= IOMUX_PAD(0x0664, 0x027C, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__USDHC2_CLKO		= IOMUX_PAD(0x0664, 0x027C, 8, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__RAWNAND_CE3N		= IOMUX_PAD(0x0668, 0x0280, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__IPU1_SISG_1		= IOMUX_PAD(0x0668, 0x0280, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__ESAI1_TX1		= IOMUX_PAD(0x0668, 0x0280, 2, 0x0848, 1, 0),
+-	MX6_PAD_NANDF_CS3__WEIM_WEIM_A_26	= IOMUX_PAD(0x0668, 0x0280, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__PCIE_CTRL_DIAG_STATUS_BUS_MUX_4	= IOMUX_PAD(0x0668, 0x0280, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__GPIO_6_16		= IOMUX_PAD(0x0668, 0x0280, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__TPSMP_CLK		= IOMUX_PAD(0x0668, 0x0280, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__USDHC2_CLKI		= IOMUX_PAD(0x0668, 0x0280, 8, 0x0930, 0, 0),
+-	MX6_PAD_NANDF_CS3__I2C4_SDA		= IOMUX_PAD(0x0668, 0x0280, 9 | IOMUX_CONFIG_SION, 0x0884, 2, 0),
+-	MX6_PAD_NANDF_D0__RAWNAND_D0		= IOMUX_PAD(0x066C, 0x0284, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__USDHC1_DAT4		= IOMUX_PAD(0x066C, 0x0284, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__GPU3D_GPU_DEBUG_OUT_0	= IOMUX_PAD(0x066C, 0x0284, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__USBOH3_UH2_DFD_OUT_16	= IOMUX_PAD(0x066C, 0x0284, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__USBOH3_UH3_DFD_OUT_16	= IOMUX_PAD(0x066C, 0x0284, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__GPIO_2_0		= IOMUX_PAD(0x066C, 0x0284, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__IPU1_IPU_DIAG_BUS_0	= IOMUX_PAD(0x066C, 0x0284, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__RAWNAND_D1		= IOMUX_PAD(0x0670, 0x0288, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__USDHC1_DAT5		= IOMUX_PAD(0x0670, 0x0288, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__GPU3D_GPU_DEBUG_OUT_1	= IOMUX_PAD(0x0670, 0x0288, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__USBOH3_UH2_DFD_OUT_17	= IOMUX_PAD(0x0670, 0x0288, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__USBOH3_UH3_DFD_OUT_17	= IOMUX_PAD(0x0670, 0x0288, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__GPIO_2_1		= IOMUX_PAD(0x0670, 0x0288, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__IPU1_IPU_DIAG_BUS_1	= IOMUX_PAD(0x0670, 0x0288, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__RAWNAND_D2		= IOMUX_PAD(0x0674, 0x028C, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__USDHC1_DAT6		= IOMUX_PAD(0x0674, 0x028C, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__GPU3D_GPU_DEBUG_OUT_2	= IOMUX_PAD(0x0674, 0x028C, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__USBOH3_UH2_DFD_OUT_18	= IOMUX_PAD(0x0674, 0x028C, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__USBOH3_UH3_DFD_OUT_18	= IOMUX_PAD(0x0674, 0x028C, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__GPIO_2_2		= IOMUX_PAD(0x0674, 0x028C, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__IPU1_IPU_DIAG_BUS_2	= IOMUX_PAD(0x0674, 0x028C, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__RAWNAND_D3		= IOMUX_PAD(0x0678, 0x0290, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__USDHC1_DAT7		= IOMUX_PAD(0x0678, 0x0290, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__GPU3D_GPU_DEBUG_OUT_3	= IOMUX_PAD(0x0678, 0x0290, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__USBOH3_UH2_DFD_OUT_19	= IOMUX_PAD(0x0678, 0x0290, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__USBOH3_UH3_DFD_OUT_19	= IOMUX_PAD(0x0678, 0x0290, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__GPIO_2_3		= IOMUX_PAD(0x0678, 0x0290, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__IPU1_IPU_DIAG_BUS_3	= IOMUX_PAD(0x0678, 0x0290, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__RAWNAND_D4		= IOMUX_PAD(0x067C, 0x0294, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__USDHC2_DAT4		= IOMUX_PAD(0x067C, 0x0294, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__GPU3D_GPU_DEBUG_OUT_4	= IOMUX_PAD(0x067C, 0x0294, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__USBOH3_UH2_DFD_OUT_20	= IOMUX_PAD(0x067C, 0x0294, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__USBOH3_UH3_DFD_OUT_20	= IOMUX_PAD(0x067C, 0x0294, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__GPIO_2_4		= IOMUX_PAD(0x067C, 0x0294, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__IPU1_IPU_DIAG_BUS_4	= IOMUX_PAD(0x067C, 0x0294, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__RAWNAND_D5		= IOMUX_PAD(0x0680, 0x0298, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__USDHC2_DAT5		= IOMUX_PAD(0x0680, 0x0298, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__GPU3D_GPU_DEBUG_OUT_5	= IOMUX_PAD(0x0680, 0x0298, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__USBOH3_UH2_DFD_OUT_21	= IOMUX_PAD(0x0680, 0x0298, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__USBOH3_UH3_DFD_OUT_21	= IOMUX_PAD(0x0680, 0x0298, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__GPIO_2_5		= IOMUX_PAD(0x0680, 0x0298, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__IPU1_IPU_DIAG_BUS_5	= IOMUX_PAD(0x0680, 0x0298, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__RAWNAND_D6		= IOMUX_PAD(0x0684, 0x029C, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__USDHC2_DAT6		= IOMUX_PAD(0x0684, 0x029C, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__GPU3D_GPU_DEBUG_OUT_6	= IOMUX_PAD(0x0684, 0x029C, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__USBOH3_UH2_DFD_OUT_22	= IOMUX_PAD(0x0684, 0x029C, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__USBOH3_UH3_DFD_OUT_22	= IOMUX_PAD(0x0684, 0x029C, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__GPIO_2_6		= IOMUX_PAD(0x0684, 0x029C, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__IPU1_IPU_DIAG_BUS_6	= IOMUX_PAD(0x0684, 0x029C, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__RAWNAND_D7		= IOMUX_PAD(0x0688, 0x02A0, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__USDHC2_DAT7		= IOMUX_PAD(0x0688, 0x02A0, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__GPU3D_GPU_DEBUG_OUT_7	= IOMUX_PAD(0x0688, 0x02A0, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__USBOH3_UH2_DFD_OUT_23	= IOMUX_PAD(0x0688, 0x02A0, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__USBOH3_UH3_DFD_OUT_23	= IOMUX_PAD(0x0688, 0x02A0, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__GPIO_2_7		= IOMUX_PAD(0x0688, 0x02A0, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__IPU1_IPU_DIAG_BUS_7	= IOMUX_PAD(0x0688, 0x02A0, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__RAWNAND_READY0	= IOMUX_PAD(0x068C, 0x02A4, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__PCIE_CTRL_DIAG_STATUS_BUS_MUX_2	= IOMUX_PAD(0x068C, 0x02A4, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__USBOH3_UH3_DFD_OUT_14	= IOMUX_PAD(0x068C, 0x02A4, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__USBOH3_UH2_DFD_OUT_14	= IOMUX_PAD(0x068C, 0x02A4, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__GPIO_6_10		= IOMUX_PAD(0x068C, 0x02A4, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__MIPI_CORE_DPHY_TEST_OUT_33	= IOMUX_PAD(0x068C, 0x02A4, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__USDHC4_CLKI		= IOMUX_PAD(0x068C, 0x02A4, 8, 0x0938, 0, 0),
+-	MX6_PAD_NANDF_WP_B__RAWNAND_RESETN	= IOMUX_PAD(0x0690, 0x02A8, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__PCIE_CTRL_DIAG_STATUS_BUS_MUX_1	= IOMUX_PAD(0x0690, 0x02A8, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__USBOH3_UH3_DFD_OUT_13	= IOMUX_PAD(0x0690, 0x02A8, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__USBOH3_UH2_DFD_OUT_13	= IOMUX_PAD(0x0690, 0x02A8, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__GPIO_6_9		= IOMUX_PAD(0x0690, 0x02A8, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__MIPI_CORE_DPHY_TEST_OUT_32	= IOMUX_PAD(0x0690, 0x02A8, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__USDHC4_CLKO		= IOMUX_PAD(0x0690, 0x02A8, 8, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__I2C4_SCL		= IOMUX_PAD(0x0690, 0x02A8, 9 | IOMUX_CONFIG_SION, 0x0880, 2, 0),
+-	MX6_PAD_PMIC_ON_REQ__SNVS_LP_WRAPPER_SNVS_WAKEUP_ALARM	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_PMIC_STBY_REQ__CCM_PMIC_VSTBY_REQ	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_POR_B__SRC_POR_B		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_RESET_IN_B__SRC_RESET_B		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD0__MIPI_HSI_CTRL_RX_READY	= IOMUX_PAD(0x0694, 0x02AC, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD0__ENET_RGMII_RD0	= IOMUX_PAD(0x0694, 0x02AC, 1, 0x0818, 1, 0),
+-	MX6_PAD_RGMII_RD0__GPIO_6_25		= IOMUX_PAD(0x0694, 0x02AC, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD0__MIPI_CORE_DPHY_TEST_IN_6	= IOMUX_PAD(0x0694, 0x02AC, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD1__MIPI_HSI_CTRL_TX_FLAG	= IOMUX_PAD(0x0698, 0x02B0, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD1__ENET_RGMII_RD1	= IOMUX_PAD(0x0698, 0x02B0, 1, 0x081C, 1, 0),
+-	MX6_PAD_RGMII_RD1__GPIO_6_27		= IOMUX_PAD(0x0698, 0x02B0, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD1__MIPI_CORE_DPHY_TEST_IN_8	= IOMUX_PAD(0x0698, 0x02B0, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD1__SJC_FAIL		= IOMUX_PAD(0x0698, 0x02B0, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD2__MIPI_HSI_CTRL_TX_DATA	= IOMUX_PAD(0x069C, 0x02B4, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD2__ENET_RGMII_RD2	= IOMUX_PAD(0x069C, 0x02B4, 1, 0x0820, 1, 0),
+-	MX6_PAD_RGMII_RD2__GPIO_6_28		= IOMUX_PAD(0x069C, 0x02B4, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD2__MIPI_CORE_DPHY_TEST_IN_9	= IOMUX_PAD(0x069C, 0x02B4, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD3__MIPI_HSI_CTRL_TX_WAKE	= IOMUX_PAD(0x06A0, 0x02B8, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD3__ENET_RGMII_RD3	= IOMUX_PAD(0x06A0, 0x02B8, 1, 0x0824, 1, 0),
+-	MX6_PAD_RGMII_RD3__GPIO_6_29		= IOMUX_PAD(0x06A0, 0x02B8, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD3__MIPI_CORE_DPHY_TEST_IN_10	= IOMUX_PAD(0x06A0, 0x02B8, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RX_CTL__USBOH3_H3_DATA	= IOMUX_PAD(0x06A4, 0x02BC, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL	= IOMUX_PAD(0x06A4, 0x02BC, 1, 0x0828, 1, 0),
+-	MX6_PAD_RGMII_RX_CTL__GPIO_6_24		= IOMUX_PAD(0x06A4, 0x02BC, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RX_CTL__MIPI_CORE_DPHY_TEST_IN_5	= IOMUX_PAD(0x06A4, 0x02BC, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RXC__USBOH3_H3_STROBE	= IOMUX_PAD(0x06A8, 0x02C0, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RXC__USBOH3_H3_STROBE_START	= IOMUX_PAD(0x06A8, 0x02C0, 0 | IOMUX_CONFIG_SION, 0x0000, 0, PAD_CTL_PUS_47K_UP),
+-	MX6_PAD_RGMII_RXC__ENET_RGMII_RXC	= IOMUX_PAD(0x06A8, 0x02C0, 1, 0x0814, 1, 0),
+-	MX6_PAD_RGMII_RXC__GPIO_6_30		= IOMUX_PAD(0x06A8, 0x02C0, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RXC__MIPI_CORE_DPHY_TEST_IN_11	= IOMUX_PAD(0x06A8, 0x02C0, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__MIPI_HSI_CTRL_TX_READY	= IOMUX_PAD(0x06AC, 0x02C4, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__ENET_RGMII_TD0	= IOMUX_PAD(0x06AC, 0x02C4, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__GPIO_6_20		= IOMUX_PAD(0x06AC, 0x02C4, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__MIPI_CORE_DPHY_TEST_IN_1	= IOMUX_PAD(0x06AC, 0x02C4, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__MIPI_HSI_CTRL_RX_FLAG	= IOMUX_PAD(0x06B0, 0x02C8, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__ENET_RGMII_TD1	= IOMUX_PAD(0x06B0, 0x02C8, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__GPIO_6_21		= IOMUX_PAD(0x06B0, 0x02C8, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__MIPI_CORE_DPHY_TEST_IN_2	= IOMUX_PAD(0x06B0, 0x02C8, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__CCM_PLL3_BYP		= IOMUX_PAD(0x06B0, 0x02C8, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__MIPI_HSI_CTRL_RX_DATA	= IOMUX_PAD(0x06B4, 0x02CC, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__ENET_RGMII_TD2	= IOMUX_PAD(0x06B4, 0x02CC, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__GPIO_6_22		= IOMUX_PAD(0x06B4, 0x02CC, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__MIPI_CORE_DPHY_TEST_IN_3	= IOMUX_PAD(0x06B4, 0x02CC, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__CCM_PLL2_BYP		= IOMUX_PAD(0x06B4, 0x02CC, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__MIPI_HSI_CTRL_RX_WAKE	= IOMUX_PAD(0x06B8, 0x02D0, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__ENET_RGMII_TD3	= IOMUX_PAD(0x06B8, 0x02D0, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__GPIO_6_23		= IOMUX_PAD(0x06B8, 0x02D0, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__MIPI_CORE_DPHY_TEST_IN_4	= IOMUX_PAD(0x06B8, 0x02D0, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__USBOH3_H2_STROBE	= IOMUX_PAD(0x06BC, 0x02D4, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__USBOH3_H2_STROBE_START	= IOMUX_PAD(0x06BC, 0x02D4, 0 | IOMUX_CONFIG_SION, 0x0000, 0, PAD_CTL_PUS_47K_UP),
+-	MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL	= IOMUX_PAD(0x06BC, 0x02D4, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__GPIO_6_26		= IOMUX_PAD(0x06BC, 0x02D4, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__MIPI_CORE_DPHY_TEST_IN_7	= IOMUX_PAD(0x06BC, 0x02D4, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__ENET_ANATOP_ETHERNET_REF_OUT	= IOMUX_PAD(0x06BC, 0x02D4, 7, 0x080C, 1, 0),
+-	MX6_PAD_RGMII_TXC__USBOH3_H2_DATA	= IOMUX_PAD(0x06C0, 0x02D8, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__ENET_RGMII_TXC	= IOMUX_PAD(0x06C0, 0x02D8, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__SPDIF_SPDIF_EXTCLK	= IOMUX_PAD(0x06C0, 0x02D8, 2, 0x08F4, 1, 0),
+-	MX6_PAD_RGMII_TXC__GPIO_6_19		= IOMUX_PAD(0x06C0, 0x02D8, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__MIPI_CORE_DPHY_TEST_IN_0	= IOMUX_PAD(0x06C0, 0x02D8, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__ANATOP_ANATOP_24M_OUT	= IOMUX_PAD(0x06C0, 0x02D8, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__USDHC1_CLK		= IOMUX_PAD(0x06C4, 0x02DC, 0, 0x0928, 1, 0),
+-	MX6_PAD_SD1_CLK__OSC32K_32K_OUT		= IOMUX_PAD(0x06C4, 0x02DC, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__GPT_CLKIN		= IOMUX_PAD(0x06C4, 0x02DC, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__GPIO_1_20		= IOMUX_PAD(0x06C4, 0x02DC, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__PHY_DTB_0		= IOMUX_PAD(0x06C4, 0x02DC, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__USDHC1_CMD		= IOMUX_PAD(0x06C8, 0x02E0, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__PWM4_PWMO		= IOMUX_PAD(0x06C8, 0x02E0, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__GPT_CMPOUT1		= IOMUX_PAD(0x06C8, 0x02E0, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__GPIO_1_18		= IOMUX_PAD(0x06C8, 0x02E0, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__ANATOP_ANATOP_TESTO_5	= IOMUX_PAD(0x06C8, 0x02E0, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__USDHC1_DAT0		= IOMUX_PAD(0x06CC, 0x02E4, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__CAAM_WRAPPER_RNG_OSC_OBS	= IOMUX_PAD(0x06CC, 0x02E4, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__GPT_CAPIN1		= IOMUX_PAD(0x06CC, 0x02E4, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__PCIE_CTRL_DIAG_STATUS_BUS_MUX_8	= IOMUX_PAD(0x06CC, 0x02E4, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__GPIO_1_16		= IOMUX_PAD(0x06CC, 0x02E4, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__HDMI_TX_OPHYDTB_1	= IOMUX_PAD(0x06CC, 0x02E4, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__ANATOP_ANATOP_TESTO_7	= IOMUX_PAD(0x06CC, 0x02E4, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__USDHC1_DAT1		= IOMUX_PAD(0x06D0, 0x02E8, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__PWM3_PWMO		= IOMUX_PAD(0x06D0, 0x02E8, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__GPT_CAPIN2		= IOMUX_PAD(0x06D0, 0x02E8, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__PCIE_CTRL_DIAG_STATUS_BUS_MUX_7	= IOMUX_PAD(0x06D0, 0x02E8, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__GPIO_1_17		= IOMUX_PAD(0x06D0, 0x02E8, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__HDMI_TX_OPHYDTB_0	= IOMUX_PAD(0x06D0, 0x02E8, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__ANATOP_ANATOP_TESTO_8	= IOMUX_PAD(0x06D0, 0x02E8, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__USDHC1_DAT2		= IOMUX_PAD(0x06D4, 0x02EC, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__GPT_CMPOUT2		= IOMUX_PAD(0x06D4, 0x02EC, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__PWM2_PWMO		= IOMUX_PAD(0x06D4, 0x02EC, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__WDOG1_WDOG_B		= IOMUX_PAD(0x06D4, 0x02EC, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__GPIO_1_19		= IOMUX_PAD(0x06D4, 0x02EC, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__WDOG1_WDOG_RST_B_DEB	= IOMUX_PAD(0x06D4, 0x02EC, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__ANATOP_ANATOP_TESTO_4	= IOMUX_PAD(0x06D4, 0x02EC, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__USDHC1_DAT3		= IOMUX_PAD(0x06D8, 0x02F0, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__GPT_CMPOUT3		= IOMUX_PAD(0x06D8, 0x02F0, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__PWM1_PWMO		= IOMUX_PAD(0x06D8, 0x02F0, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__WDOG2_WDOG_B		= IOMUX_PAD(0x06D8, 0x02F0, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__GPIO_1_21		= IOMUX_PAD(0x06D8, 0x02F0, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__WDOG2_WDOG_RST_B_DEB	= IOMUX_PAD(0x06D8, 0x02F0, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__ANATOP_ANATOP_TESTO_6	= IOMUX_PAD(0x06D8, 0x02F0, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__USDHC2_CLK		= IOMUX_PAD(0x06DC, 0x02F4, 0, 0x0930, 1, 0),
+-	MX6_PAD_SD2_CLK__KPP_COL_5		= IOMUX_PAD(0x06DC, 0x02F4, 2, 0x08C0, 3, 0),
+-	MX6_PAD_SD2_CLK__AUDMUX_AUD4_RXFS	= IOMUX_PAD(0x06DC, 0x02F4, 3, 0x07A4, 1, 0),
+-	MX6_PAD_SD2_CLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_9	= IOMUX_PAD(0x06DC, 0x02F4, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__GPIO_1_10		= IOMUX_PAD(0x06DC, 0x02F4, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__PHY_DTB_1		= IOMUX_PAD(0x06DC, 0x02F4, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CMD__USDHC2_CMD		= IOMUX_PAD(0x06E0, 0x02F8, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CMD__KPP_ROW_5		= IOMUX_PAD(0x06E0, 0x02F8, 2, 0x08CC, 2, 0),
+-	MX6_PAD_SD2_CMD__AUDMUX_AUD4_RXC	= IOMUX_PAD(0x06E0, 0x02F8, 3, 0x07A0, 1, 0),
+-	MX6_PAD_SD2_CMD__PCIE_CTRL_DIAG_STATUS_BUS_MUX_10	= IOMUX_PAD(0x06E0, 0x02F8, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CMD__GPIO_1_11		= IOMUX_PAD(0x06E0, 0x02F8, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__USDHC2_DAT0		= IOMUX_PAD(0x06E4, 0x02FC, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__AUDMUX_AUD4_RXD	= IOMUX_PAD(0x06E4, 0x02FC, 3, 0x0798, 1, 0),
+-	MX6_PAD_SD2_DAT0__KPP_ROW_7		= IOMUX_PAD(0x06E4, 0x02FC, 4, 0x08D4, 2, 0),
+-	MX6_PAD_SD2_DAT0__GPIO_1_15		= IOMUX_PAD(0x06E4, 0x02FC, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__DCIC2_DCIC_OUT	= IOMUX_PAD(0x06E4, 0x02FC, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__ANATOP_ANATOP_TESTO_2	= IOMUX_PAD(0x06E4, 0x02FC, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__USDHC2_DAT1		= IOMUX_PAD(0x06E8, 0x0300, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__WEIM_WEIM_CS_2	= IOMUX_PAD(0x06E8, 0x0300, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__AUDMUX_AUD4_TXFS	= IOMUX_PAD(0x06E8, 0x0300, 3, 0x07AC, 1, 0),
+-	MX6_PAD_SD2_DAT1__KPP_COL_7		= IOMUX_PAD(0x06E8, 0x0300, 4, 0x08C8, 2, 0),
+-	MX6_PAD_SD2_DAT1__GPIO_1_14		= IOMUX_PAD(0x06E8, 0x0300, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__CCM_WAIT		= IOMUX_PAD(0x06E8, 0x0300, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__ANATOP_ANATOP_TESTO_0	= IOMUX_PAD(0x06E8, 0x0300, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__USDHC2_DAT2		= IOMUX_PAD(0x06EC, 0x0304, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__WEIM_WEIM_CS_3	= IOMUX_PAD(0x06EC, 0x0304, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__AUDMUX_AUD4_TXD	= IOMUX_PAD(0x06EC, 0x0304, 3, 0x079C, 1, 0),
+-	MX6_PAD_SD2_DAT2__KPP_ROW_6		= IOMUX_PAD(0x06EC, 0x0304, 4, 0x08D0, 2, 0),
+-	MX6_PAD_SD2_DAT2__GPIO_1_13		= IOMUX_PAD(0x06EC, 0x0304, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__CCM_STOP		= IOMUX_PAD(0x06EC, 0x0304, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__ANATOP_ANATOP_TESTO_1	= IOMUX_PAD(0x06EC, 0x0304, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__USDHC2_DAT3		= IOMUX_PAD(0x06F0, 0x0308, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__KPP_COL_6		= IOMUX_PAD(0x06F0, 0x0308, 2, 0x08C4, 2, 0),
+-	MX6_PAD_SD2_DAT3__AUDMUX_AUD4_TXC	= IOMUX_PAD(0x06F0, 0x0308, 3, 0x07A8, 1, 0),
+-	MX6_PAD_SD2_DAT3__PCIE_CTRL_DIAG_STATUS_BUS_MUX_11	= IOMUX_PAD(0x06F0, 0x0308, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__GPIO_1_12		= IOMUX_PAD(0x06F0, 0x0308, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__SJC_DONE		= IOMUX_PAD(0x06F0, 0x0308, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__ANATOP_ANATOP_TESTO_3	= IOMUX_PAD(0x06F0, 0x0308, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__USDHC3_CLK		= IOMUX_PAD(0x06F4, 0x030C, 0, 0x0934, 1, 0),
+-	MX6_PAD_SD3_CLK__UART2_CTS		= IOMUX_PAD(0x06F4, 0x030C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__UART2_RTS		= IOMUX_PAD(0x06F4, 0x030C, 1, 0x0900, 2, 0),
+-	MX6_PAD_SD3_CLK__CAN1_RXCAN		= IOMUX_PAD(0x06F4, 0x030C, 2, 0x07C8, 2, 0),
+-	MX6_PAD_SD3_CLK__USBOH3_UH3_DFD_OUT_5	= IOMUX_PAD(0x06F4, 0x030C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__USBOH3_UH2_DFD_OUT_5	= IOMUX_PAD(0x06F4, 0x030C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__GPIO_7_3		= IOMUX_PAD(0x06F4, 0x030C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__MIPI_CORE_DPHY_TEST_IN_17	= IOMUX_PAD(0x06F4, 0x030C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__ANATOP_ANATOP_TESTO_14	= IOMUX_PAD(0x06F4, 0x030C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__USDHC3_CMD		= IOMUX_PAD(0x06F8, 0x0310, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__UART2_CTS		= IOMUX_PAD(0x06F8, 0x0310, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__UART2_RTS		= IOMUX_PAD(0x06F8, 0x0310, 1, 0x0900, 3, 0),
+-	MX6_PAD_SD3_CMD__CAN1_TXCAN		= IOMUX_PAD(0x06F8, 0x0310, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__USBOH3_UH3_DFD_OUT_4	= IOMUX_PAD(0x06F8, 0x0310, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__USBOH3_UH2_DFD_OUT_4	= IOMUX_PAD(0x06F8, 0x0310, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__GPIO_7_2		= IOMUX_PAD(0x06F8, 0x0310, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__MIPI_CORE_DPHY_TEST_IN_16	= IOMUX_PAD(0x06F8, 0x0310, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__ANATOP_ANATOP_TESTO_13	= IOMUX_PAD(0x06F8, 0x0310, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__USDHC3_DAT0		= IOMUX_PAD(0x06FC, 0x0314, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__UART1_CTS		= IOMUX_PAD(0x06FC, 0x0314, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__UART1_RTS		= IOMUX_PAD(0x06FC, 0x0314, 1, 0x08F8, 2, 0),
+-	MX6_PAD_SD3_DAT0__CAN2_TXCAN		= IOMUX_PAD(0x06FC, 0x0314, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__USBOH3_UH3_DFD_OUT_6	= IOMUX_PAD(0x06FC, 0x0314, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__USBOH3_UH2_DFD_OUT_6	= IOMUX_PAD(0x06FC, 0x0314, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__GPIO_7_4		= IOMUX_PAD(0x06FC, 0x0314, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__MIPI_CORE_DPHY_TEST_IN_18	= IOMUX_PAD(0x06FC, 0x0314, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__ANATOP_ANATOP_TESTO_15	= IOMUX_PAD(0x06FC, 0x0314, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__USDHC3_DAT1		= IOMUX_PAD(0x0700, 0x0318, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__UART1_CTS		= IOMUX_PAD(0x0700, 0x0318, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__UART1_RTS		= IOMUX_PAD(0x0700, 0x0318, 1, 0x08F8, 3, 0),
+-	MX6_PAD_SD3_DAT1__CAN2_RXCAN		= IOMUX_PAD(0x0700, 0x0318, 2, 0x07CC, 1, 0),
+-	MX6_PAD_SD3_DAT1__USBOH3_UH3_DFD_OUT_7	= IOMUX_PAD(0x0700, 0x0318, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__USBOH3_UH2_DFD_OUT_7	= IOMUX_PAD(0x0700, 0x0318, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__GPIO_7_5		= IOMUX_PAD(0x0700, 0x0318, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__MIPI_CORE_DPHY_TEST_IN_19	= IOMUX_PAD(0x0700, 0x0318, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__ANATOP_ANATOP_TESTI_0	= IOMUX_PAD(0x0700, 0x0318, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__USDHC3_DAT2		= IOMUX_PAD(0x0704, 0x031C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__PCIE_CTRL_DIAG_STATUS_BUS_MUX_28	= IOMUX_PAD(0x0704, 0x031C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__USBOH3_UH3_DFD_OUT_8	= IOMUX_PAD(0x0704, 0x031C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__USBOH3_UH2_DFD_OUT_8	= IOMUX_PAD(0x0704, 0x031C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__GPIO_7_6		= IOMUX_PAD(0x0704, 0x031C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__MIPI_CORE_DPHY_TEST_IN_20	= IOMUX_PAD(0x0704, 0x031C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__ANATOP_ANATOP_TESTI_1	= IOMUX_PAD(0x0704, 0x031C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__USDHC3_DAT3		= IOMUX_PAD(0x0708, 0x0320, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__UART3_CTS		= IOMUX_PAD(0x0708, 0x0320, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__UART3_RTS		= IOMUX_PAD(0x0708, 0x0320, 1, 0x0908, 4, 0),
+-	MX6_PAD_SD3_DAT3__PCIE_CTRL_DIAG_STATUS_BUS_MUX_29	= IOMUX_PAD(0x0708, 0x0320, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__USBOH3_UH3_DFD_OUT_9	= IOMUX_PAD(0x0708, 0x0320, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__USBOH3_UH2_DFD_OUT_9	= IOMUX_PAD(0x0708, 0x0320, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__GPIO_7_7		= IOMUX_PAD(0x0708, 0x0320, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__MIPI_CORE_DPHY_TEST_IN_21	= IOMUX_PAD(0x0708, 0x0320, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__ANATOP_ANATOP_TESTI_2	= IOMUX_PAD(0x0708, 0x0320, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__USDHC3_DAT4		= IOMUX_PAD(0x070C, 0x0324, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__UART2_TXD		= IOMUX_PAD(0x070C, 0x0324, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__UART2_RXD		= IOMUX_PAD(0x070C, 0x0324, 1, 0x0904, 4, 0),
+-	MX6_PAD_SD3_DAT4__PCIE_CTRL_DIAG_STATUS_BUS_MUX_27	= IOMUX_PAD(0x070C, 0x0324, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__USBOH3_UH3_DFD_OUT_3	= IOMUX_PAD(0x070C, 0x0324, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__USBOH3_UH2_DFD_OUT_3	= IOMUX_PAD(0x070C, 0x0324, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__GPIO_7_1		= IOMUX_PAD(0x070C, 0x0324, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__MIPI_CORE_DPHY_TEST_IN_15	= IOMUX_PAD(0x070C, 0x0324, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__ANATOP_ANATOP_TESTO_12	= IOMUX_PAD(0x070C, 0x0324, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__USDHC3_DAT5		= IOMUX_PAD(0x0710, 0x0328, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__UART2_TXD		= IOMUX_PAD(0x0710, 0x0328, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__UART2_RXD		= IOMUX_PAD(0x0710, 0x0328, 1, 0x0904, 5, 0),
+-	MX6_PAD_SD3_DAT5__PCIE_CTRL_DIAG_STATUS_BUS_MUX_26	= IOMUX_PAD(0x0710, 0x0328, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__USBOH3_UH3_DFD_OUT_2	= IOMUX_PAD(0x0710, 0x0328, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__USBOH3_UH2_DFD_OUT_2	= IOMUX_PAD(0x0710, 0x0328, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__GPIO_7_0		= IOMUX_PAD(0x0710, 0x0328, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__MIPI_CORE_DPHY_TEST_IN_14	= IOMUX_PAD(0x0710, 0x0328, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__ANATOP_ANATOP_TESTO_11	= IOMUX_PAD(0x0710, 0x0328, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__USDHC3_DAT6		= IOMUX_PAD(0x0714, 0x032C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__UART1_TXD		= IOMUX_PAD(0x0714, 0x032C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__UART1_RXD		= IOMUX_PAD(0x0714, 0x032C, 1, 0x08FC, 2, 0),
+-	MX6_PAD_SD3_DAT6__PCIE_CTRL_DIAG_STATUS_BUS_MUX_25	= IOMUX_PAD(0x0714, 0x032C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__USBOH3_UH3_DFD_OUT_1	= IOMUX_PAD(0x0714, 0x032C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__USBOH3_UH2_DFD_OUT_1	= IOMUX_PAD(0x0714, 0x032C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__GPIO_6_18		= IOMUX_PAD(0x0714, 0x032C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__MIPI_CORE_DPHY_TEST_IN_13	= IOMUX_PAD(0x0714, 0x032C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__ANATOP_ANATOP_TESTO_10	= IOMUX_PAD(0x0714, 0x032C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__USDHC3_DAT7		= IOMUX_PAD(0x0718, 0x0330, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__UART1_TXD		= IOMUX_PAD(0x0718, 0x0330, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__UART1_RXD		= IOMUX_PAD(0x0718, 0x0330, 1, 0x08FC, 3, 0),
+-	MX6_PAD_SD3_DAT7__PCIE_CTRL_DIAG_STATUS_BUS_MUX_24	= IOMUX_PAD(0x0718, 0x0330, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__USBOH3_UH3_DFD_OUT_0	= IOMUX_PAD(0x0718, 0x0330, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__USBOH3_UH2_DFD_OUT_0	= IOMUX_PAD(0x0718, 0x0330, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__GPIO_6_17		= IOMUX_PAD(0x0718, 0x0330, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__MIPI_CORE_DPHY_TEST_IN_12	= IOMUX_PAD(0x0718, 0x0330, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__ANATOP_USBPHY2_TSTO_PLL_CLK20DIV	= IOMUX_PAD(0x0718, 0x0330, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__USDHC3_RST		= IOMUX_PAD(0x071C, 0x0334, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__UART3_CTS		= IOMUX_PAD(0x071C, 0x0334, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__UART3_RTS		= IOMUX_PAD(0x071C, 0x0334, 1, 0x0908, 5, 0),
+-	MX6_PAD_SD3_RST__PCIE_CTRL_DIAG_STATUS_BUS_MUX_30	= IOMUX_PAD(0x071C, 0x0334, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__USBOH3_UH3_DFD_OUT_10	= IOMUX_PAD(0x071C, 0x0334, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__USBOH3_UH2_DFD_OUT_10	= IOMUX_PAD(0x071C, 0x0334, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__GPIO_7_8		= IOMUX_PAD(0x071C, 0x0334, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__MIPI_CORE_DPHY_TEST_IN_22	= IOMUX_PAD(0x071C, 0x0334, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__ANATOP_ANATOP_TESTI_3	= IOMUX_PAD(0x071C, 0x0334, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__USDHC4_CLK		= IOMUX_PAD(0x0720, 0x0338, 0, 0x0938, 1, 0),
+-	MX6_PAD_SD4_CLK__RAWNAND_WRN		= IOMUX_PAD(0x0720, 0x0338, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__UART3_TXD		= IOMUX_PAD(0x0720, 0x0338, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__UART3_RXD		= IOMUX_PAD(0x0720, 0x0338, 2, 0x090C, 2, 0),
+-	MX6_PAD_SD4_CLK__PCIE_CTRL_DIAG_STATUS_BUS_MUX_6	= IOMUX_PAD(0x0720, 0x0338, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__GPIO_7_10		= IOMUX_PAD(0x0720, 0x0338, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__USDHC4_CMD		= IOMUX_PAD(0x0724, 0x033C, 0 | IOMUX_CONFIG_SION, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__RAWNAND_RDN		= IOMUX_PAD(0x0724, 0x033C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__UART3_TXD		= IOMUX_PAD(0x0724, 0x033C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__UART3_RXD		= IOMUX_PAD(0x0724, 0x033C, 2, 0x090C, 3, 0),
+-	MX6_PAD_SD4_CMD__PCIE_CTRL_DIAG_STATUS_BUS_MUX_5	= IOMUX_PAD(0x0724, 0x033C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__GPIO_7_9		= IOMUX_PAD(0x0724, 0x033C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__RAWNAND_D8		= IOMUX_PAD(0x0728, 0x0340, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__USDHC4_DAT0		= IOMUX_PAD(0x0728, 0x0340, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__RAWNAND_DQS		= IOMUX_PAD(0x0728, 0x0340, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__USBOH3_UH2_DFD_OUT_24	= IOMUX_PAD(0x0728, 0x0340, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__USBOH3_UH3_DFD_OUT_24	= IOMUX_PAD(0x0728, 0x0340, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__GPIO_2_8		= IOMUX_PAD(0x0728, 0x0340, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__IPU1_IPU_DIAG_BUS_8	= IOMUX_PAD(0x0728, 0x0340, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__RAWNAND_D9		= IOMUX_PAD(0x072C, 0x0344, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__USDHC4_DAT1		= IOMUX_PAD(0x072C, 0x0344, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__PWM3_PWMO		= IOMUX_PAD(0x072C, 0x0344, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__USBOH3_UH2_DFD_OUT_25	= IOMUX_PAD(0x072C, 0x0344, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__USBOH3_UH3_DFD_OUT_25	= IOMUX_PAD(0x072C, 0x0344, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__GPIO_2_9		= IOMUX_PAD(0x072C, 0x0344, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__IPU1_IPU_DIAG_BUS_9	= IOMUX_PAD(0x072C, 0x0344, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__RAWNAND_D10		= IOMUX_PAD(0x0730, 0x0348, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__USDHC4_DAT2		= IOMUX_PAD(0x0730, 0x0348, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__PWM4_PWMO		= IOMUX_PAD(0x0730, 0x0348, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__USBOH3_UH2_DFD_OUT_26	= IOMUX_PAD(0x0730, 0x0348, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__USBOH3_UH3_DFD_OUT_26	= IOMUX_PAD(0x0730, 0x0348, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__GPIO_2_10		= IOMUX_PAD(0x0730, 0x0348, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__IPU1_IPU_DIAG_BUS_10	= IOMUX_PAD(0x0730, 0x0348, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__RAWNAND_D11		= IOMUX_PAD(0x0734, 0x034C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__USDHC4_DAT3		= IOMUX_PAD(0x0734, 0x034C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__USBOH3_UH2_DFD_OUT_27	= IOMUX_PAD(0x0734, 0x034C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__USBOH3_UH3_DFD_OUT_27	= IOMUX_PAD(0x0734, 0x034C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__GPIO_2_11		= IOMUX_PAD(0x0734, 0x034C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__IPU1_IPU_DIAG_BUS_11	= IOMUX_PAD(0x0734, 0x034C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__RAWNAND_D12		= IOMUX_PAD(0x0738, 0x0350, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__USDHC4_DAT4		= IOMUX_PAD(0x0738, 0x0350, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__UART2_TXD		= IOMUX_PAD(0x0738, 0x0350, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__UART2_RXD		= IOMUX_PAD(0x0738, 0x0350, 2, 0x0904, 6, 0),
+-	MX6_PAD_SD4_DAT4__USBOH3_UH2_DFD_OUT_28	= IOMUX_PAD(0x0738, 0x0350, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__USBOH3_UH3_DFD_OUT_28	= IOMUX_PAD(0x0738, 0x0350, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__GPIO_2_12		= IOMUX_PAD(0x0738, 0x0350, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__IPU1_IPU_DIAG_BUS_12	= IOMUX_PAD(0x0738, 0x0350, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__RAWNAND_D13		= IOMUX_PAD(0x073C, 0x0354, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__USDHC4_DAT5		= IOMUX_PAD(0x073C, 0x0354, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__UART2_CTS		= IOMUX_PAD(0x073C, 0x0354, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__UART2_RTS		= IOMUX_PAD(0x073C, 0x0354, 2, 0x0900, 4, 0),
+-	MX6_PAD_SD4_DAT5__USBOH3_UH2_DFD_OUT_29	= IOMUX_PAD(0x073C, 0x0354, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__USBOH3_UH3_DFD_OUT_29	= IOMUX_PAD(0x073C, 0x0354, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__GPIO_2_13		= IOMUX_PAD(0x073C, 0x0354, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__IPU1_IPU_DIAG_BUS_13	= IOMUX_PAD(0x073C, 0x0354, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__RAWNAND_D14		= IOMUX_PAD(0x0740, 0x0358, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__USDHC4_DAT6		= IOMUX_PAD(0x0740, 0x0358, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__UART2_CTS		= IOMUX_PAD(0x0740, 0x0358, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__UART2_RTS		= IOMUX_PAD(0x0740, 0x0358, 2, 0x0900, 5, 0),
+-	MX6_PAD_SD4_DAT6__USBOH3_UH2_DFD_OUT_30	= IOMUX_PAD(0x0740, 0x0358, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__USBOH3_UH3_DFD_OUT_30	= IOMUX_PAD(0x0740, 0x0358, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__GPIO_2_14		= IOMUX_PAD(0x0740, 0x0358, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__IPU1_IPU_DIAG_BUS_14	= IOMUX_PAD(0x0740, 0x0358, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__RAWNAND_D15		= IOMUX_PAD(0x0744, 0x035C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__USDHC4_DAT7		= IOMUX_PAD(0x0744, 0x035C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__UART2_TXD		= IOMUX_PAD(0x0744, 0x035C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__UART2_RXD		= IOMUX_PAD(0x0744, 0x035C, 2, 0x0904, 7, 0),
+-	MX6_PAD_SD4_DAT7__USBOH3_UH2_DFD_OUT_31	= IOMUX_PAD(0x0744, 0x035C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__USBOH3_UH3_DFD_OUT_31	= IOMUX_PAD(0x0744, 0x035C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__GPIO_2_15		= IOMUX_PAD(0x0744, 0x035C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__IPU1_IPU_DIAG_BUS_15	= IOMUX_PAD(0x0744, 0x035C, 6, 0x0000, 0, 0),
+-};
+ #endif	/* __ASM_ARCH_MX6_MX6DL_PINS_H__ */
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6-pins.h u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6-pins.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6-pins.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6-pins.h	2014-12-17 09:31:33.878048771 +0000
+@@ -6,18 +6,37 @@
+ #ifndef __ASM_ARCH_MX6_PINS_H__
+ #define __ASM_ARCH_MX6_PINS_H__
+ 
+-#ifdef CONFIG_MX6Q
++#include <asm/imx-common/iomux-v3.h>
++
++#define MX6_PAD_DECLARE(prefix, name, pco, mc, mm, sio, si, pc) \
++	prefix##name = IOMUX_PAD(pco, mc, mm, sio, si, pc)
++
++#ifdef CONFIG_MX6QDL
++enum {
++#define MX6_PAD_DECL(name, pco, mc, mm, sio, si, pc) \
++	MX6_PAD_DECLARE(MX6Q_PAD_,name, pco, mc, mm, sio, si, pc),
+ #include "mx6q_pins.h"
+-#else
+-#if defined(CONFIG_MX6DL) || defined(CONFIG_MX6S)
++#undef MX6_PAD_DECL
++#define MX6_PAD_DECL(name, pco, mc, mm, sio, si, pc) \
++	MX6_PAD_DECLARE(MX6DL_PAD_,name, pco, mc, mm, sio, si, pc),
+ #include "mx6dl_pins.h"
+-#else
+-#if defined(CONFIG_MX6SL)
++};
++#elif defined(CONFIG_MX6Q)
++enum {
++#define MX6_PAD_DECL(name, pco, mc, mm, sio, si, pc) \
++	MX6_PAD_DECLARE(MX6_PAD_,name, pco, mc, mm, sio, si, pc),
++#include "mx6q_pins.h"
++};
++#elif defined(CONFIG_MX6DL) || defined(CONFIG_MX6S)
++enum {
++#define MX6_PAD_DECL(name, pco, mc, mm, sio, si, pc) \
++	MX6_PAD_DECLARE(MX6_PAD_,name, pco, mc, mm, sio, si, pc),
++#include "mx6dl_pins.h"
++};
++#elif defined(CONFIG_MX6SL)
+ #include "mx6sl_pins.h"
+ #else
+ #error "Please select cpu"
+-#endif	/* CONFIG_MX6SL */
+-#endif	/* CONFIG_MX6DL or CONFIG_MX6S */
+ #endif	/* CONFIG_MX6Q */
+ 
+ #endif	/*__ASM_ARCH_MX6_PINS_H__ */
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6q_pins.h u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6q_pins.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/mx6q_pins.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/mx6q_pins.h	2014-12-17 09:31:33.882048674 +0000
+@@ -9,1624 +9,1620 @@
+ #ifndef __ASM_ARCH_MX6_MX6Q_PINS_H__
+ #define __ASM_ARCH_MX6_MX6Q_PINS_H__
+ 
+-#include <asm/imx-common/iomux-v3.h>
+-
+-enum {
+-	MX6_PAD_SD2_DAT1__USDHC2_DAT1		= IOMUX_PAD(0x0360, 0x004C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__ECSPI5_SS0		= IOMUX_PAD(0x0360, 0x004C, 1, 0x0834, 0, 0),
+-	MX6_PAD_SD2_DAT1__WEIM_WEIM_CS_2	= IOMUX_PAD(0x0360, 0x004C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__AUDMUX_AUD4_TXFS	= IOMUX_PAD(0x0360, 0x004C, 3, 0x07C8, 0, 0),
+-	MX6_PAD_SD2_DAT1__KPP_COL_7		= IOMUX_PAD(0x0360, 0x004C, 4, 0x08F0, 0, 0),
+-	MX6_PAD_SD2_DAT1__GPIO_1_14		= IOMUX_PAD(0x0360, 0x004C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__CCM_WAIT		= IOMUX_PAD(0x0360, 0x004C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT1__ANATOP_TESTO_0	= IOMUX_PAD(0x0360, 0x004C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__USDHC2_DAT2		= IOMUX_PAD(0x0364, 0x0050, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__ECSPI5_SS1		= IOMUX_PAD(0x0364, 0x0050, 1, 0x0838, 0, 0),
+-	MX6_PAD_SD2_DAT2__WEIM_WEIM_CS_3	= IOMUX_PAD(0x0364, 0x0050, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__AUDMUX_AUD4_TXD	= IOMUX_PAD(0x0364, 0x0050, 3, 0x07B8, 0, 0),
+-	MX6_PAD_SD2_DAT2__KPP_ROW_6		= IOMUX_PAD(0x0364, 0x0050, 4, 0x08F8, 0, 0),
+-	MX6_PAD_SD2_DAT2__GPIO_1_13		= IOMUX_PAD(0x0364, 0x0050, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__CCM_STOP		= IOMUX_PAD(0x0364, 0x0050, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT2__ANATOP_TESTO_1	= IOMUX_PAD(0x0364, 0x0050, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__USDHC2_DAT0		= IOMUX_PAD(0x0368, 0x0054, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__ECSPI5_MISO		= IOMUX_PAD(0x0368, 0x0054, 1, 0x082C, 0, 0),
+-	MX6_PAD_SD2_DAT0__AUDMUX_AUD4_RXD	= IOMUX_PAD(0x0368, 0x0054, 3, 0x07B4, 0, 0),
+-	MX6_PAD_SD2_DAT0__KPP_ROW_7		= IOMUX_PAD(0x0368, 0x0054, 4, 0x08FC, 0, 0),
+-	MX6_PAD_SD2_DAT0__GPIO_1_15		= IOMUX_PAD(0x0368, 0x0054, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__DCIC2_DCIC_OUT	= IOMUX_PAD(0x0368, 0x0054, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT0__TESTO_2		= IOMUX_PAD(0x0368, 0x0054, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__USBOH3_H2_DATA	= IOMUX_PAD(0x036C, 0x0058, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__ENET_RGMII_TXC	= IOMUX_PAD(0x036C, 0x0058, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__SPDIF_SPDIF_EXTCLK	= IOMUX_PAD(0x036C, 0x0058, 2, 0x0918, 0, 0),
+-	MX6_PAD_RGMII_TXC__GPIO_6_19		= IOMUX_PAD(0x036C, 0x0058, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__MIPI_CORE_DPHY_IN_0 = IOMUX_PAD(0x036C, 0x0058, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TXC__ANATOP_24M_OUT	= IOMUX_PAD(0x036C, 0x0058, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__MIPI_HSI_CRL_TX_RDY = IOMUX_PAD(0x0370, 0x005C, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__ENET_RGMII_TD0	= IOMUX_PAD(0x0370, 0x005C, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__GPIO_6_20		= IOMUX_PAD(0x0370, 0x005C, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD0__MIPI_CORE_DPHY_IN_1 = IOMUX_PAD(0x0370, 0x005C, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__MIPI_HSI_CRL_RX_FLG = IOMUX_PAD(0x0374, 0x0060, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__ENET_RGMII_TD1	= IOMUX_PAD(0x0374, 0x0060, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__GPIO_6_21		= IOMUX_PAD(0x0374, 0x0060, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__MIPI_CORE_DPHY_IN_2 = IOMUX_PAD(0x0374, 0x0060, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD1__CCM_PLL3_BYP	= IOMUX_PAD(0x0374, 0x0060, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__MIPI_HSI_CRL_RX_DTA = IOMUX_PAD(0x0378, 0x0064, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__ENET_RGMII_TD2	= IOMUX_PAD(0x0378, 0x0064, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__GPIO_6_22		= IOMUX_PAD(0x0378, 0x0064, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__MIPI_CORE_DPHY_IN_3 = IOMUX_PAD(0x0378, 0x0064, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD2__CCM_PLL2_BYP	= IOMUX_PAD(0x0378, 0x0064, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__MIPI_HSI_CRL_RX_WAK = IOMUX_PAD(0x037C, 0x0068, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__ENET_RGMII_TD3	= IOMUX_PAD(0x037C, 0x0068, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__GPIO_6_23		= IOMUX_PAD(0x037C, 0x0068, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TD3__MIPI_CORE_DPHY_IN_4 = IOMUX_PAD(0x037C, 0x0068, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RX_CTL__USBOH3_H3_DATA   = IOMUX_PAD(0x0380, 0x006C, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL	= IOMUX_PAD(0x0380, 0x006C, 1, 0x0858, 0, 0),
+-	MX6_PAD_RGMII_RX_CTL__GPIO_6_24	= IOMUX_PAD(0x0380, 0x006C, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RX_CTL__MIPI_DPHY_IN_5	= IOMUX_PAD(0x0380, 0x006C, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD0__MIPI_HSI_CRL_RX_RDY = IOMUX_PAD(0x0384, 0x0070, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD0__ENET_RGMII_RD0      = IOMUX_PAD(0x0384, 0x0070, 1, 0x0848, 0, 0),
+-	MX6_PAD_RGMII_RD0__GPIO_6_25		= IOMUX_PAD(0x0384, 0x0070, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD0__MIPI_CORE_DPHY_IN_6 = IOMUX_PAD(0x0384, 0x0070, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__USBOH3_H2_STROBE = IOMUX_PAD(0x0388, 0x0074, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL	= IOMUX_PAD(0x0388, 0x0074, 1, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__GPIO_6_26	= IOMUX_PAD(0x0388, 0x0074, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__CORE_DPHY_IN_7	= IOMUX_PAD(0x0388, 0x0074, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_TX_CTL__ANATOP_REF_OUT	= IOMUX_PAD(0x0388, 0x0074, 7, 0x083C, 0, 0),
+-	MX6_PAD_RGMII_RD1__MIPI_HSI_CTRL_TX_FL = IOMUX_PAD(0x038C, 0x0078, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD1__ENET_RGMII_RD1	= IOMUX_PAD(0x038C, 0x0078, 1, 0x084C, 0, 0),
+-	MX6_PAD_RGMII_RD1__GPIO_6_27		= IOMUX_PAD(0x038C, 0x0078, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD1__CORE_DPHY_TEST_IN_8 = IOMUX_PAD(0x038C, 0x0078, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD1__SJC_FAIL		= IOMUX_PAD(0x038C, 0x0078, 7, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD2__MIPI_HSI_CRL_TX_DTA = IOMUX_PAD(0x0390, 0x007C, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD2__ENET_RGMII_RD2	= IOMUX_PAD(0x0390, 0x007C, 1, 0x0850, 0, 0),
+-	MX6_PAD_RGMII_RD2__GPIO_6_28		= IOMUX_PAD(0x0390, 0x007C, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD2__MIPI_CORE_DPHY_IN_9 = IOMUX_PAD(0x0390, 0x007C, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD3__MIPI_HSI_CRL_TX_WAK = IOMUX_PAD(0x0394, 0x0080, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD3__ENET_RGMII_RD3	= IOMUX_PAD(0x0394, 0x0080, 1, 0x0854, 0, 0),
+-	MX6_PAD_RGMII_RD3__GPIO_6_29		= IOMUX_PAD(0x0394, 0x0080, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RD3__MIPI_CORE_DPHY_IN10 = IOMUX_PAD(0x0394, 0x0080, 6, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RXC__USBOH3_H3_STROBE    = IOMUX_PAD(0x0398, 0x0084, 0, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RXC__ENET_RGMII_RXC	= IOMUX_PAD(0x0398, 0x0084, 1, 0x0844, 0, 0),
+-	MX6_PAD_RGMII_RXC__GPIO_6_30		= IOMUX_PAD(0x0398, 0x0084, 5, 0x0000, 0, 0),
+-	MX6_PAD_RGMII_RXC__MIPI_CORE_DPHY_IN11 = IOMUX_PAD(0x0398, 0x0084, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__WEIM_WEIM_A_25	= IOMUX_PAD(0x039C, 0x0088, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__ECSPI4_SS1		= IOMUX_PAD(0x039C, 0x0088, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__ECSPI2_RDY		= IOMUX_PAD(0x039C, 0x0088, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__IPU1_DI1_PIN12	= IOMUX_PAD(0x039C, 0x0088, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__IPU1_DI0_D1_CS	= IOMUX_PAD(0x039C, 0x0088, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__GPIO_5_2		= IOMUX_PAD(0x039C, 0x0088, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A25__HDMI_TX_CEC_LINE	= IOMUX_PAD(0x039C, 0x0088, 6, 0x088C, 0, 0),
+-	MX6_PAD_EIM_A25__PL301_PER1_HBURST_0	= IOMUX_PAD(0x039C, 0x0088, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB2__WEIM_WEIM_EB_2	= IOMUX_PAD(0x03A0, 0x008C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB2__ECSPI1_SS0		= IOMUX_PAD(0x03A0, 0x008C, 1, 0x0800, 0, 0),
+-	MX6_PAD_EIM_EB2__CCM_DI1_EXT_CLK	= IOMUX_PAD(0x03A0, 0x008C, 2, 0x07EC, 0, 0),
+-	MX6_PAD_EIM_EB2__IPU2_CSI1_D_19	= IOMUX_PAD(0x03A0, 0x008C, 3, 0x08D4, 0, 0),
+-	MX6_PAD_EIM_EB2__HDMI_TX_DDC_SCL	= IOMUX_PAD(0x03A0, 0x008C, 4, 0x0890, 0, 0),
+-	MX6_PAD_EIM_EB2__GPIO_2_30		= IOMUX_PAD(0x03A0, 0x008C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB2__I2C2_SCL		= IOMUX_PAD(0x03A0, 0x008C, 22, 0x08A0, 0, 0),
+-	MX6_PAD_EIM_EB2__SRC_BT_CFG_30		= IOMUX_PAD(0x03A0, 0x008C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__WEIM_WEIM_D_16	= IOMUX_PAD(0x03A4, 0x0090, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__ECSPI1_SCLK		= IOMUX_PAD(0x03A4, 0x0090, 1, 0x07F4, 0, 0),
+-	MX6_PAD_EIM_D16__IPU1_DI0_PIN5		= IOMUX_PAD(0x03A4, 0x0090, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__IPU2_CSI1_D_18	= IOMUX_PAD(0x03A4, 0x0090, 3, 0x08D0, 0, 0),
+-	MX6_PAD_EIM_D16__HDMI_TX_DDC_SDA	= IOMUX_PAD(0x03A4, 0x0090, 4, 0x0894, 0, 0),
+-	MX6_PAD_EIM_D16__GPIO_3_16		= IOMUX_PAD(0x03A4, 0x0090, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D16__I2C2_SDA		= IOMUX_PAD(0x03A4, 0x0090, 22, 0x08A4, 0, 0),
+-	MX6_PAD_EIM_D17__WEIM_WEIM_D_17	= IOMUX_PAD(0x03A8, 0x0094, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__ECSPI1_MISO		= IOMUX_PAD(0x03A8, 0x0094, 1, 0x07F8, 0, 0),
+-	MX6_PAD_EIM_D17__IPU1_DI0_PIN6		= IOMUX_PAD(0x03A8, 0x0094, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__IPU2_CSI1_PIXCLK	= IOMUX_PAD(0x03A8, 0x0094, 3, 0x08E0, 0, 0),
+-	MX6_PAD_EIM_D17__DCIC1_DCIC_OUT	= IOMUX_PAD(0x03A8, 0x0094, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__GPIO_3_17		= IOMUX_PAD(0x03A8, 0x0094, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D17__I2C3_SCL		= IOMUX_PAD(0x03A8, 0x0094, 22, 0x08A8, 0, 0),
+-	MX6_PAD_EIM_D17__PL301_PER1_HBURST_1	= IOMUX_PAD(0x03A8, 0x0094, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__WEIM_WEIM_D_18	= IOMUX_PAD(0x03AC, 0x0098, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__ECSPI1_MOSI		= IOMUX_PAD(0x03AC, 0x0098, 1, 0x07FC, 0, 0),
+-	MX6_PAD_EIM_D18__IPU1_DI0_PIN7		= IOMUX_PAD(0x03AC, 0x0098, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__IPU2_CSI1_D_17	= IOMUX_PAD(0x03AC, 0x0098, 3, 0x08CC, 0, 0),
+-	MX6_PAD_EIM_D18__IPU1_DI1_D0_CS	= IOMUX_PAD(0x03AC, 0x0098, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__GPIO_3_18		= IOMUX_PAD(0x03AC, 0x0098, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D18__I2C3_SDA		= IOMUX_PAD(0x03AC, 0x0098, 22, 0x08AC, 0, 0),
+-	MX6_PAD_EIM_D18__PL301_PER1_HBURST_2	= IOMUX_PAD(0x03AC, 0x0098, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__WEIM_WEIM_D_19	= IOMUX_PAD(0x03B0, 0x009C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__ECSPI1_SS1		= IOMUX_PAD(0x03B0, 0x009C, 1, 0x0804, 0, 0),
+-	MX6_PAD_EIM_D19__IPU1_DI0_PIN8		= IOMUX_PAD(0x03B0, 0x009C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__IPU2_CSI1_D_16	= IOMUX_PAD(0x03B0, 0x009C, 3, 0x08C8, 0, 0),
+-	MX6_PAD_EIM_D19__UART1_CTS		= IOMUX_PAD(0x03B0, 0x009C, 4, 0x091C, 0, 0),
+-	MX6_PAD_EIM_D19__GPIO_3_19		= IOMUX_PAD(0x03B0, 0x009C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__EPIT1_EPITO		= IOMUX_PAD(0x03B0, 0x009C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D19__PL301MX6QPER1_HRESP   = IOMUX_PAD(0x03B0, 0x009C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__WEIM_WEIM_D_20	= IOMUX_PAD(0x03B4, 0x00A0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__ECSPI4_SS0		= IOMUX_PAD(0x03B4, 0x00A0, 1, 0x0824, 0, 0),
+-	MX6_PAD_EIM_D20__IPU1_DI0_PIN16	= IOMUX_PAD(0x03B4, 0x00A0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__IPU2_CSI1_D_15	= IOMUX_PAD(0x03B4, 0x00A0, 3, 0x08C4, 0, 0),
+-	MX6_PAD_EIM_D20__UART1_CTS		= IOMUX_PAD(0x03B4, 0x00A0, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__UART1_RTS		= IOMUX_PAD(0x03B4, 0x00A0, 4, 0x091C, 1, 0),
+-	MX6_PAD_EIM_D20__GPIO_3_20		= IOMUX_PAD(0x03B4, 0x00A0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D20__EPIT2_EPITO		= IOMUX_PAD(0x03B4, 0x00A0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__WEIM_WEIM_D_21	= IOMUX_PAD(0x03B8, 0x00A4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__ECSPI4_SCLK		= IOMUX_PAD(0x03B8, 0x00A4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__IPU1_DI0_PIN17	= IOMUX_PAD(0x03B8, 0x00A4, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__IPU2_CSI1_D_11	= IOMUX_PAD(0x03B8, 0x00A4, 3, 0x08B4, 0, 0),
+-	MX6_PAD_EIM_D21__USBOH3_USBOTG_OC	= IOMUX_PAD(0x03B8, 0x00A4, 4, 0x0944, 0, 0),
+-	MX6_PAD_EIM_D21__GPIO_3_21		= IOMUX_PAD(0x03B8, 0x00A4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D21__I2C1_SCL		= IOMUX_PAD(0x03B8, 0x00A4, 22, 0x0898, 0, 0),
+-	MX6_PAD_EIM_D21__SPDIF_IN1		= IOMUX_PAD(0x03B8, 0x00A4, 7, 0x0914, 0, 0),
+-	MX6_PAD_EIM_D22__WEIM_WEIM_D_22	= IOMUX_PAD(0x03BC, 0x00A8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__ECSPI4_MISO		= IOMUX_PAD(0x03BC, 0x00A8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__IPU1_DI0_PIN1		= IOMUX_PAD(0x03BC, 0x00A8, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__IPU2_CSI1_D_10	= IOMUX_PAD(0x03BC, 0x00A8, 3, 0x08B0, 0, 0),
+-	MX6_PAD_EIM_D22__USBOH3_USBOTG_PWR	= IOMUX_PAD(0x03BC, 0x00A8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__GPIO_3_22		= IOMUX_PAD(0x03BC, 0x00A8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__SPDIF_OUT1		= IOMUX_PAD(0x03BC, 0x00A8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D22__PL301MX6QPER1_HWRITE	= IOMUX_PAD(0x03BC, 0x00A8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__WEIM_WEIM_D_23	= IOMUX_PAD(0x03C0, 0x00AC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU1_DI0_D0_CS	= IOMUX_PAD(0x03C0, 0x00AC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__UART3_CTS		= IOMUX_PAD(0x03C0, 0x00AC, 2, 0x092C, 0, 0),
+-	MX6_PAD_EIM_D23__UART1_DCD		= IOMUX_PAD(0x03C0, 0x00AC, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU2_CSI1_DATA_EN	= IOMUX_PAD(0x03C0, 0x00AC, 4, 0x08D8, 0, 0),
+-	MX6_PAD_EIM_D23__GPIO_3_23		= IOMUX_PAD(0x03C0, 0x00AC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU1_DI1_PIN2		= IOMUX_PAD(0x03C0, 0x00AC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D23__IPU1_DI1_PIN14	= IOMUX_PAD(0x03C0, 0x00AC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__WEIM_WEIM_EB_3	= IOMUX_PAD(0x03C4, 0x00B0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__ECSPI4_RDY		= IOMUX_PAD(0x03C4, 0x00B0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__UART3_CTS		= IOMUX_PAD(0x03C4, 0x00B0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__UART3_RTS		= IOMUX_PAD(0x03C4, 0x00B0, 2, 0x092C, 1, 0),
+-	MX6_PAD_EIM_EB3__UART1_RI		= IOMUX_PAD(0x03C4, 0x00B0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__IPU2_CSI1_HSYNC	= IOMUX_PAD(0x03C4, 0x00B0, 4, 0x08DC, 0, 0),
+-	MX6_PAD_EIM_EB3__GPIO_2_31		= IOMUX_PAD(0x03C4, 0x00B0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__IPU1_DI1_PIN3		= IOMUX_PAD(0x03C4, 0x00B0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB3__SRC_BT_CFG_31		= IOMUX_PAD(0x03C4, 0x00B0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__WEIM_WEIM_D_24	= IOMUX_PAD(0x03C8, 0x00B4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__ECSPI4_SS2		= IOMUX_PAD(0x03C8, 0x00B4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__UART3_TXD		= IOMUX_PAD(0x03C8, 0x00B4, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__UART3_TXD_RXD		= IOMUX_PAD(0x03C8, 0x00B4, 2, 0x0930, 0, 0),
+-	MX6_PAD_EIM_D24__ECSPI1_SS2		= IOMUX_PAD(0x03C8, 0x00B4, 3, 0x0808, 0, 0),
+-	MX6_PAD_EIM_D24__ECSPI2_SS2		= IOMUX_PAD(0x03C8, 0x00B4, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__GPIO_3_24		= IOMUX_PAD(0x03C8, 0x00B4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D24__AUDMUX_AUD5_RXFS	= IOMUX_PAD(0x03C8, 0x00B4, 6, 0x07D8, 0, 0),
+-	MX6_PAD_EIM_D24__UART1_DTR		= IOMUX_PAD(0x03C8, 0x00B4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__WEIM_WEIM_D_25	= IOMUX_PAD(0x03CC, 0x00B8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__ECSPI4_SS3		= IOMUX_PAD(0x03CC, 0x00B8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__UART3_RXD		= IOMUX_PAD(0x03CC, 0x00B8, 2, 0x0930, 1, 0),
+-	MX6_PAD_EIM_D25__ECSPI1_SS3		= IOMUX_PAD(0x03CC, 0x00B8, 3, 0x080C, 0, 0),
+-	MX6_PAD_EIM_D25__ECSPI2_SS3		= IOMUX_PAD(0x03CC, 0x00B8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__GPIO_3_25		= IOMUX_PAD(0x03CC, 0x00B8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D25__AUDMUX_AUD5_RXC	= IOMUX_PAD(0x03CC, 0x00B8, 6, 0x07D4, 0, 0),
+-	MX6_PAD_EIM_D25__UART1_DSR		= IOMUX_PAD(0x03CC, 0x00B8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__WEIM_WEIM_D_26	= IOMUX_PAD(0x03D0, 0x00BC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_DI1_PIN11	= IOMUX_PAD(0x03D0, 0x00BC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_CSI0_D_1		= IOMUX_PAD(0x03D0, 0x00BC, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU2_CSI1_D_14	= IOMUX_PAD(0x03D0, 0x00BC, 3, 0x08C0, 0, 0),
+-	MX6_PAD_EIM_D26__UART2_TXD		= IOMUX_PAD(0x03D0, 0x00BC, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__UART2_TXD_RXD		= IOMUX_PAD(0x03D0, 0x00BC, 4, 0x0928, 0, 0),
+-	MX6_PAD_EIM_D26__GPIO_3_26		= IOMUX_PAD(0x03D0, 0x00BC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_SISG_2		= IOMUX_PAD(0x03D0, 0x00BC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D26__IPU1_DISP1_DAT_22	= IOMUX_PAD(0x03D0, 0x00BC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__WEIM_WEIM_D_27	= IOMUX_PAD(0x03D4, 0x00C0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_DI1_PIN13	= IOMUX_PAD(0x03D4, 0x00C0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_CSI0_D_0		= IOMUX_PAD(0x03D4, 0x00C0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU2_CSI1_D_13	= IOMUX_PAD(0x03D4, 0x00C0, 3, 0x08BC, 0, 0),
+-	MX6_PAD_EIM_D27__UART2_RXD		= IOMUX_PAD(0x03D4, 0x00C0, 4, 0x0928, 1, 0),
+-	MX6_PAD_EIM_D27__GPIO_3_27		= IOMUX_PAD(0x03D4, 0x00C0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_SISG_3		= IOMUX_PAD(0x03D4, 0x00C0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D27__IPU1_DISP1_DAT_23	= IOMUX_PAD(0x03D4, 0x00C0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__WEIM_WEIM_D_28	= IOMUX_PAD(0x03D8, 0x00C4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__I2C1_SDA		= IOMUX_PAD(0x03D8, 0x00C4, 17, 0x089C, 0, 0),
+-	MX6_PAD_EIM_D28__ECSPI4_MOSI		= IOMUX_PAD(0x03D8, 0x00C4, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__IPU2_CSI1_D_12	= IOMUX_PAD(0x03D8, 0x00C4, 3, 0x08B8, 0, 0),
+-	MX6_PAD_EIM_D28__UART2_CTS		= IOMUX_PAD(0x03D8, 0x00C4, 4, 0x0924, 0, 0),
+-	MX6_PAD_EIM_D28__GPIO_3_28		= IOMUX_PAD(0x03D8, 0x00C4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__IPU1_EXT_TRIG		= IOMUX_PAD(0x03D8, 0x00C4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D28__IPU1_DI0_PIN13	= IOMUX_PAD(0x03D8, 0x00C4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__WEIM_WEIM_D_29	= IOMUX_PAD(0x03DC, 0x00C8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__IPU1_DI1_PIN15	= IOMUX_PAD(0x03DC, 0x00C8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__ECSPI4_SS0		= IOMUX_PAD(0x03DC, 0x00C8, 2, 0x0824, 1, 0),
+-	MX6_PAD_EIM_D29__UART2_CTS		= IOMUX_PAD(0x03DC, 0x00C8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__UART2_RTS		= IOMUX_PAD(0x03DC, 0x00C8, 4, 0x0924, 1, 0),
+-	MX6_PAD_EIM_D29__GPIO_3_29		= IOMUX_PAD(0x03DC, 0x00C8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D29__IPU2_CSI1_VSYNC	= IOMUX_PAD(0x03DC, 0x00C8, 6, 0x08E4, 0, 0),
+-	MX6_PAD_EIM_D29__IPU1_DI0_PIN14	= IOMUX_PAD(0x03DC, 0x00C8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__WEIM_WEIM_D_30	= IOMUX_PAD(0x03E0, 0x00CC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__IPU1_DISP1_DAT_21	= IOMUX_PAD(0x03E0, 0x00CC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__IPU1_DI0_PIN11	= IOMUX_PAD(0x03E0, 0x00CC, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__IPU1_CSI0_D_3		= IOMUX_PAD(0x03E0, 0x00CC, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__UART3_CTS		= IOMUX_PAD(0x03E0, 0x00CC, 4, 0x092C, 2, 0),
+-	MX6_PAD_EIM_D30__GPIO_3_30		= IOMUX_PAD(0x03E0, 0x00CC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D30__USBOH3_USBH1_OC	= IOMUX_PAD(0x03E0, 0x00CC, 6, 0x0948, 0, 0),
+-	MX6_PAD_EIM_D30__PL301MX6QPER1_HPROT_0 = IOMUX_PAD(0x03E0, 0x00CC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__WEIM_WEIM_D_31	= IOMUX_PAD(0x03E4, 0x00D0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__IPU1_DISP1_DAT_20	= IOMUX_PAD(0x03E4, 0x00D0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__IPU1_DI0_PIN12	= IOMUX_PAD(0x03E4, 0x00D0, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__IPU1_CSI0_D_2		= IOMUX_PAD(0x03E4, 0x00D0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__UART3_CTS		= IOMUX_PAD(0x03E4, 0x00D0, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__UART3_RTS		= IOMUX_PAD(0x03E4, 0x00D0, 4, 0x092C, 3, 0),
+-	MX6_PAD_EIM_D31__GPIO_3_31		= IOMUX_PAD(0x03E4, 0x00D0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__USBOH3_USBH1_PWR	= IOMUX_PAD(0x03E4, 0x00D0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_D31__PL301MX6QPER1_HPROT_1 = IOMUX_PAD(0x03E4, 0x00D0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__WEIM_WEIM_A_24	= IOMUX_PAD(0x03E8, 0x00D4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__IPU1_DISP1_DAT_19	= IOMUX_PAD(0x03E8, 0x00D4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__IPU2_CSI1_D_19	= IOMUX_PAD(0x03E8, 0x00D4, 2, 0x08D4, 1, 0),
+-	MX6_PAD_EIM_A24__IPU2_SISG_2		= IOMUX_PAD(0x03E8, 0x00D4, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__IPU1_SISG_2		= IOMUX_PAD(0x03E8, 0x00D4, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__GPIO_5_4		= IOMUX_PAD(0x03E8, 0x00D4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__PL301MX6QPER1_HPROT_2 = IOMUX_PAD(0x03E8, 0x00D4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A24__SRC_BT_CFG_24		= IOMUX_PAD(0x03E8, 0x00D4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__WEIM_WEIM_A_23	= IOMUX_PAD(0x03EC, 0x00D8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__IPU1_DISP1_DAT_18	= IOMUX_PAD(0x03EC, 0x00D8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__IPU2_CSI1_D_18	= IOMUX_PAD(0x03EC, 0x00D8, 2, 0x08D0, 1, 0),
+-	MX6_PAD_EIM_A23__IPU2_SISG_3		= IOMUX_PAD(0x03EC, 0x00D8, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__IPU1_SISG_3		= IOMUX_PAD(0x03EC, 0x00D8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__GPIO_6_6		= IOMUX_PAD(0x03EC, 0x00D8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__PL301MX6QPER1_HPROT_3	= IOMUX_PAD(0x03EC, 0x00D8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A23__SRC_BT_CFG_23		= IOMUX_PAD(0x03EC, 0x00D8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__WEIM_WEIM_A_22	= IOMUX_PAD(0x03F0, 0x00DC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__IPU1_DISP1_DAT_17	= IOMUX_PAD(0x03F0, 0x00DC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__IPU2_CSI1_D_17	= IOMUX_PAD(0x03F0, 0x00DC, 2, 0x08CC, 1, 0),
+-	MX6_PAD_EIM_A22__GPIO_2_16		= IOMUX_PAD(0x03F0, 0x00DC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__TPSMP_HDATA_0		= IOMUX_PAD(0x03F0, 0x00DC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A22__SRC_BT_CFG_22		= IOMUX_PAD(0x03F0, 0x00DC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__WEIM_WEIM_A_21	= IOMUX_PAD(0x03F4, 0x00E0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__IPU1_DISP1_DAT_16	= IOMUX_PAD(0x03F4, 0x00E0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__IPU2_CSI1_D_16	= IOMUX_PAD(0x03F4, 0x00E0, 2, 0x08C8, 1, 0),
+-	MX6_PAD_EIM_A21__RESERVED_RESERVED	= IOMUX_PAD(0x03F4, 0x00E0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__MIPI_CORE_DPHY_OUT_18 = IOMUX_PAD(0x03F4, 0x00E0, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__GPIO_2_17		= IOMUX_PAD(0x03F4, 0x00E0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__TPSMP_HDATA_1		= IOMUX_PAD(0x03F4, 0x00E0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A21__SRC_BT_CFG_21		= IOMUX_PAD(0x03F4, 0x00E0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__WEIM_WEIM_A_20	= IOMUX_PAD(0x03F8, 0x00E4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__IPU1_DISP1_DAT_15	= IOMUX_PAD(0x03F8, 0x00E4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__IPU2_CSI1_D_15	= IOMUX_PAD(0x03F8, 0x00E4, 2, 0x08C4, 1, 0),
+-	MX6_PAD_EIM_A20__RESERVED_RESERVED	= IOMUX_PAD(0x03F8, 0x00E4, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__MIPI_CORE_DPHY_OUT_19 = IOMUX_PAD(0x03F8, 0x00E4, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__GPIO_2_18		= IOMUX_PAD(0x03F8, 0x00E4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__TPSMP_HDATA_2		= IOMUX_PAD(0x03F8, 0x00E4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A20__SRC_BT_CFG_20		= IOMUX_PAD(0x03F8, 0x00E4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__WEIM_WEIM_A_19	= IOMUX_PAD(0x03FC, 0x00E8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__IPU1_DISP1_DAT_14	= IOMUX_PAD(0x03FC, 0x00E8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__IPU2_CSI1_D_14	= IOMUX_PAD(0x03FC, 0x00E8, 2, 0x08C0, 1, 0),
+-	MX6_PAD_EIM_A19__RESERVED_RESERVED	= IOMUX_PAD(0x03FC, 0x00E8, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__MIPI_CORE_DPHY_OUT_20 = IOMUX_PAD(0x03FC, 0x00E8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__GPIO_2_19		= IOMUX_PAD(0x03FC, 0x00E8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__TPSMP_HDATA_3		= IOMUX_PAD(0x03FC, 0x00E8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A19__SRC_BT_CFG_19		= IOMUX_PAD(0x03FC, 0x00E8, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__WEIM_WEIM_A_18	= IOMUX_PAD(0x0400, 0x00EC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__IPU1_DISP1_DAT_13	= IOMUX_PAD(0x0400, 0x00EC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__IPU2_CSI1_D_13	= IOMUX_PAD(0x0400, 0x00EC, 2, 0x08BC, 1, 0),
+-	MX6_PAD_EIM_A18__RESERVED_RESERVED	= IOMUX_PAD(0x0400, 0x00EC, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__MIPI_CORE_DPHY_OUT_21 = IOMUX_PAD(0x0400, 0x00EC, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__GPIO_2_20		= IOMUX_PAD(0x0400, 0x00EC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__TPSMP_HDATA_4		= IOMUX_PAD(0x0400, 0x00EC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A18__SRC_BT_CFG_18		= IOMUX_PAD(0x0400, 0x00EC, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__WEIM_WEIM_A_17	= IOMUX_PAD(0x0404, 0x00F0, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__IPU1_DISP1_DAT_12	= IOMUX_PAD(0x0404, 0x00F0, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__IPU2_CSI1_D_12	= IOMUX_PAD(0x0404, 0x00F0, 2, 0x08B8, 1, 0),
+-	MX6_PAD_EIM_A17__RESERVED_RESERVED	= IOMUX_PAD(0x0404, 0x00F0, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__MIPI_CORE_DPHY_OUT_22 = IOMUX_PAD(0x0404, 0x00F0, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__GPIO_2_21		= IOMUX_PAD(0x0404, 0x00F0, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__TPSMP_HDATA_5		= IOMUX_PAD(0x0404, 0x00F0, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A17__SRC_BT_CFG_17		= IOMUX_PAD(0x0404, 0x00F0, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__WEIM_WEIM_A_16	= IOMUX_PAD(0x0408, 0x00F4, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__IPU1_DI1_DISP_CLK	= IOMUX_PAD(0x0408, 0x00F4, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__IPU2_CSI1_PIXCLK	= IOMUX_PAD(0x0408, 0x00F4, 2, 0x08E0, 1, 0),
+-	MX6_PAD_EIM_A16__MIPI_CORE_DPHY_OUT_23 = IOMUX_PAD(0x0408, 0x00F4, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__GPIO_2_22		= IOMUX_PAD(0x0408, 0x00F4, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__TPSMP_HDATA_6		= IOMUX_PAD(0x0408, 0x00F4, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_A16__SRC_BT_CFG_16		= IOMUX_PAD(0x0408, 0x00F4, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__WEIM_WEIM_CS_0	= IOMUX_PAD(0x040C, 0x00F8, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__IPU1_DI1_PIN5		= IOMUX_PAD(0x040C, 0x00F8, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__ECSPI2_SCLK		= IOMUX_PAD(0x040C, 0x00F8, 2, 0x0810, 0, 0),
+-	MX6_PAD_EIM_CS0__MIPI_CORE_DPHY_OUT_24 = IOMUX_PAD(0x040C, 0x00F8, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__GPIO_2_23		= IOMUX_PAD(0x040C, 0x00F8, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS0__TPSMP_HDATA_7		= IOMUX_PAD(0x040C, 0x00F8, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__WEIM_WEIM_CS_1	= IOMUX_PAD(0x0410, 0x00FC, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__IPU1_DI1_PIN6		= IOMUX_PAD(0x0410, 0x00FC, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__ECSPI2_MOSI		= IOMUX_PAD(0x0410, 0x00FC, 2, 0x0818, 0, 0),
+-	MX6_PAD_EIM_CS1__MIPI_CORE_DPHY_OUT_25 = IOMUX_PAD(0x0410, 0x00FC, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__GPIO_2_24		= IOMUX_PAD(0x0410, 0x00FC, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_CS1__TPSMP_HDATA_8		= IOMUX_PAD(0x0410, 0x00FC, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__WEIM_WEIM_OE		= IOMUX_PAD(0x0414, 0x0100, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__IPU1_DI1_PIN7		= IOMUX_PAD(0x0414, 0x0100, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__ECSPI2_MISO		= IOMUX_PAD(0x0414, 0x0100, 2, 0x0814, 0, 0),
+-	MX6_PAD_EIM_OE__MIPI_CORE_DPHY_OUT_26  = IOMUX_PAD(0x0414, 0x0100, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__GPIO_2_25		= IOMUX_PAD(0x0414, 0x0100, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_OE__TPSMP_HDATA_9		= IOMUX_PAD(0x0414, 0x0100, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__WEIM_WEIM_RW		= IOMUX_PAD(0x0418, 0x0104, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__IPU1_DI1_PIN8		= IOMUX_PAD(0x0418, 0x0104, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__ECSPI2_SS0		= IOMUX_PAD(0x0418, 0x0104, 2, 0x081C, 0, 0),
+-	MX6_PAD_EIM_RW__MIPI_CORE_DPHY_OUT_27  = IOMUX_PAD(0x0418, 0x0104, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__GPIO_2_26		= IOMUX_PAD(0x0418, 0x0104, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__TPSMP_HDATA_10		= IOMUX_PAD(0x0418, 0x0104, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_RW__SRC_BT_CFG_29		= IOMUX_PAD(0x0418, 0x0104, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__WEIM_WEIM_LBA		= IOMUX_PAD(0x041C, 0x0108, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__IPU1_DI1_PIN17	= IOMUX_PAD(0x041C, 0x0108, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__ECSPI2_SS1		= IOMUX_PAD(0x041C, 0x0108, 2, 0x0820, 0, 0),
+-	MX6_PAD_EIM_LBA__GPIO_2_27		= IOMUX_PAD(0x041C, 0x0108, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__TPSMP_HDATA_11	= IOMUX_PAD(0x041C, 0x0108, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_LBA__SRC_BT_CFG_26		= IOMUX_PAD(0x041C, 0x0108, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__WEIM_WEIM_EB_0	= IOMUX_PAD(0x0420, 0x010C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__IPU1_DISP1_DAT_11	= IOMUX_PAD(0x0420, 0x010C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__IPU2_CSI1_D_11	= IOMUX_PAD(0x0420, 0x010C, 2, 0x08B4, 1, 0),
+-	MX6_PAD_EIM_EB0__MIPI_CORE_DPHY_OUT_0  = IOMUX_PAD(0x0420, 0x010C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__CCM_PMIC_RDY		= IOMUX_PAD(0x0420, 0x010C, 4, 0x07F0, 0, 0),
+-	MX6_PAD_EIM_EB0__GPIO_2_28		= IOMUX_PAD(0x0420, 0x010C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__TPSMP_HDATA_12	= IOMUX_PAD(0x0420, 0x010C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB0__SRC_BT_CFG_27		= IOMUX_PAD(0x0420, 0x010C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__WEIM_WEIM_EB_1	= IOMUX_PAD(0x0424, 0x0110, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__IPU1_DISP1_DAT_10	= IOMUX_PAD(0x0424, 0x0110, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__IPU2_CSI1_D_10	= IOMUX_PAD(0x0424, 0x0110, 2, 0x08B0, 1, 0),
+-	MX6_PAD_EIM_EB1__MIPI_CORE_DPHY__OUT_1 = IOMUX_PAD(0x0424, 0x0110, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__GPIO_2_29		= IOMUX_PAD(0x0424, 0x0110, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__TPSMP_HDATA_13	= IOMUX_PAD(0x0424, 0x0110, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_EB1__SRC_BT_CFG_28		= IOMUX_PAD(0x0424, 0x0110, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__WEIM_WEIM_DA_A_0	= IOMUX_PAD(0x0428, 0x0114, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__IPU1_DISP1_DAT_9	= IOMUX_PAD(0x0428, 0x0114, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__IPU2_CSI1_D_9		= IOMUX_PAD(0x0428, 0x0114, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__MIPI_CORE_DPHY__OUT_2	= IOMUX_PAD(0x0428, 0x0114, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__GPIO_3_0		= IOMUX_PAD(0x0428, 0x0114, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__TPSMP_HDATA_14	= IOMUX_PAD(0x0428, 0x0114, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA0__SRC_BT_CFG_0		= IOMUX_PAD(0x0428, 0x0114, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__WEIM_WEIM_DA_A_1	= IOMUX_PAD(0x042C, 0x0118, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__IPU1_DISP1_DAT_8	= IOMUX_PAD(0x042C, 0x0118, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__IPU2_CSI1_D_8		= IOMUX_PAD(0x042C, 0x0118, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__MIPI_CORE_DPHY_OUT_3	= IOMUX_PAD(0x042C, 0x0118, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__USBPHY1_TX_LS_MODE	= IOMUX_PAD(0x042C, 0x0118, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__GPIO_3_1		= IOMUX_PAD(0x042C, 0x0118, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__TPSMP_HDATA_15	= IOMUX_PAD(0x042C, 0x0118, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA1__SRC_BT_CFG_1		= IOMUX_PAD(0x042C, 0x0118, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__WEIM_WEIM_DA_A_2	= IOMUX_PAD(0x0430, 0x011C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__IPU1_DISP1_DAT_7	= IOMUX_PAD(0x0430, 0x011C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__IPU2_CSI1_D_7		= IOMUX_PAD(0x0430, 0x011C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__MIPI_CORE_DPHY_OUT_4  = IOMUX_PAD(0x0430, 0x011C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__USBPHY1_TX_HS_MODE	= IOMUX_PAD(0x0430, 0x011C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__GPIO_3_2		= IOMUX_PAD(0x0430, 0x011C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__TPSMP_HDATA_16	= IOMUX_PAD(0x0430, 0x011C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA2__SRC_BT_CFG_2		= IOMUX_PAD(0x0430, 0x011C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__WEIM_WEIM_DA_A_3	= IOMUX_PAD(0x0434, 0x0120, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__IPU1_DISP1_DAT_6	= IOMUX_PAD(0x0434, 0x0120, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__IPU2_CSI1_D_6		= IOMUX_PAD(0x0434, 0x0120, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__MIPI_CORE_DPHY_OUT_5  = IOMUX_PAD(0x0434, 0x0120, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__USBPHY1_TX_HIZ        = IOMUX_PAD(0x0434, 0x0120, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__GPIO_3_3		= IOMUX_PAD(0x0434, 0x0120, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__TPSMP_HDATA_17	= IOMUX_PAD(0x0434, 0x0120, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA3__SRC_BT_CFG_3		= IOMUX_PAD(0x0434, 0x0120, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__WEIM_WEIM_DA_A_4	= IOMUX_PAD(0x0438, 0x0124, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__IPU1_DISP1_DAT_5	= IOMUX_PAD(0x0438, 0x0124, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__IPU2_CSI1_D_5		= IOMUX_PAD(0x0438, 0x0124, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__MIPI_CORE_DPHY_OUT_6  = IOMUX_PAD(0x0438, 0x0124, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__ANATOP_USBPHY1_TX_EN  = IOMUX_PAD(0x0438, 0x0124, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__GPIO_3_4		= IOMUX_PAD(0x0438, 0x0124, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__TPSMP_HDATA_18	= IOMUX_PAD(0x0438, 0x0124, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA4__SRC_BT_CFG_4		= IOMUX_PAD(0x0438, 0x0124, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__WEIM_WEIM_DA_A_5	= IOMUX_PAD(0x043C, 0x0128, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__IPU1_DISP1_DAT_4	= IOMUX_PAD(0x043C, 0x0128, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__IPU2_CSI1_D_4		= IOMUX_PAD(0x043C, 0x0128, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__MIPI_CORE_DPHY_OUT_7  = IOMUX_PAD(0x043C, 0x0128, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__ANATOP_USBPHY1_TX_DP  = IOMUX_PAD(0x043C, 0x0128, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__GPIO_3_5		= IOMUX_PAD(0x043C, 0x0128, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__TPSMP_HDATA_19	= IOMUX_PAD(0x043C, 0x0128, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA5__SRC_BT_CFG_5		= IOMUX_PAD(0x043C, 0x0128, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__WEIM_WEIM_DA_A_6	= IOMUX_PAD(0x0440, 0x012C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__IPU1_DISP1_DAT_3	= IOMUX_PAD(0x0440, 0x012C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__IPU2_CSI1_D_3		= IOMUX_PAD(0x0440, 0x012C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__MIPI_CORE_DPHY_OUT_8  = IOMUX_PAD(0x0440, 0x012C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__ANATOP_USBPHY1_TX_DN  = IOMUX_PAD(0x0440, 0x012C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__GPIO_3_6		= IOMUX_PAD(0x0440, 0x012C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__TPSMP_HDATA_20	= IOMUX_PAD(0x0440, 0x012C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA6__SRC_BT_CFG_6		= IOMUX_PAD(0x0440, 0x012C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__WEIM_WEIM_DA_A_7	= IOMUX_PAD(0x0444, 0x0130, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__IPU1_DISP1_DAT_2	= IOMUX_PAD(0x0444, 0x0130, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__IPU2_CSI1_D_2		= IOMUX_PAD(0x0444, 0x0130, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__MIPI_CORE_DPHY_OUT_9	= IOMUX_PAD(0x0444, 0x0130, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__GPIO_3_7		= IOMUX_PAD(0x0444, 0x0130, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__TPSMP_HDATA_21	= IOMUX_PAD(0x0444, 0x0130, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA7__SRC_BT_CFG_7		= IOMUX_PAD(0x0444, 0x0130, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__WEIM_WEIM_DA_A_8	= IOMUX_PAD(0x0448, 0x0134, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__IPU1_DISP1_DAT_1	= IOMUX_PAD(0x0448, 0x0134, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__IPU2_CSI1_D_1		= IOMUX_PAD(0x0448, 0x0134, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__MIPI_CORE_DPHY_OUT_10 = IOMUX_PAD(0x0448, 0x0134, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__GPIO_3_8		= IOMUX_PAD(0x0448, 0x0134, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__TPSMP_HDATA_22	= IOMUX_PAD(0x0448, 0x0134, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA8__SRC_BT_CFG_8		= IOMUX_PAD(0x0448, 0x0134, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__WEIM_WEIM_DA_A_9	= IOMUX_PAD(0x044C, 0x0138, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__IPU1_DISP1_DAT_0	= IOMUX_PAD(0x044C, 0x0138, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__IPU2_CSI1_D_0		= IOMUX_PAD(0x044C, 0x0138, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__MIPI_CORE_DPHY_OUT_11 = IOMUX_PAD(0x044C, 0x0138, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__GPIO_3_9		= IOMUX_PAD(0x044C, 0x0138, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__TPSMP_HDATA_23	= IOMUX_PAD(0x044C, 0x0138, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA9__SRC_BT_CFG_9		= IOMUX_PAD(0x044C, 0x0138, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__WEIM_WEIM_DA_A_10	= IOMUX_PAD(0x0450, 0x013C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__IPU1_DI1_PIN15	= IOMUX_PAD(0x0450, 0x013C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__IPU2_CSI1_DATA_EN    = IOMUX_PAD(0x0450, 0x013C, 2, 0x08D8, 1, 0),
+-	MX6_PAD_EIM_DA10__MIPI_CORE_DPHY_OUT12	= IOMUX_PAD(0x0450, 0x013C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__GPIO_3_10		= IOMUX_PAD(0x0450, 0x013C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__TPSMP_HDATA_24	= IOMUX_PAD(0x0450, 0x013C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA10__SRC_BT_CFG_10	= IOMUX_PAD(0x0450, 0x013C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__WEIM_WEIM_DA_A_11	= IOMUX_PAD(0x0454, 0x0140, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__IPU1_DI1_PIN2	= IOMUX_PAD(0x0454, 0x0140, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__IPU2_CSI1_HSYNC	= IOMUX_PAD(0x0454, 0x0140, 2, 0x08DC, 1, 0),
+-	MX6_PAD_EIM_DA11__MIPI_CORE_DPHY_OUT13	= IOMUX_PAD(0x0454, 0x0140, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__SDMA_DBG_EVT_CHN_6	= IOMUX_PAD(0x0454, 0x0140, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__GPIO_3_11		= IOMUX_PAD(0x0454, 0x0140, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__TPSMP_HDATA_25	= IOMUX_PAD(0x0454, 0x0140, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA11__SRC_BT_CFG_11	= IOMUX_PAD(0x0454, 0x0140, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__WEIM_WEIM_DA_A_12	= IOMUX_PAD(0x0458, 0x0144, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__IPU1_DI1_PIN3	= IOMUX_PAD(0x0458, 0x0144, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__IPU2_CSI1_VSYNC	= IOMUX_PAD(0x0458, 0x0144, 2, 0x08E4, 1, 0),
+-	MX6_PAD_EIM_DA12__MIPI_CORE_DPHY_OUT14	= IOMUX_PAD(0x0458, 0x0144, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__SDMA_DEBUG_EVT_CHN_3 = IOMUX_PAD(0x0458, 0x0144, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__GPIO_3_12		= IOMUX_PAD(0x0458, 0x0144, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__TPSMP_HDATA_26	= IOMUX_PAD(0x0458, 0x0144, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA12__SRC_BT_CFG_12	= IOMUX_PAD(0x0458, 0x0144, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__WEIM_WEIM_DA_A_13	= IOMUX_PAD(0x045C, 0x0148, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__IPU1_DI1_D0_CS	= IOMUX_PAD(0x045C, 0x0148, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__CCM_DI1_EXT_CLK	= IOMUX_PAD(0x045C, 0x0148, 2, 0x07EC, 1, 0),
+-	MX6_PAD_EIM_DA13__MIPI_CORE_DPHY_OUT15	= IOMUX_PAD(0x045C, 0x0148, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__SDMA_DEBUG_EVT_CHN_4 = IOMUX_PAD(0x045C, 0x0148, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__GPIO_3_13		= IOMUX_PAD(0x045C, 0x0148, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__TPSMP_HDATA_27	= IOMUX_PAD(0x045C, 0x0148, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA13__SRC_BT_CFG_13	= IOMUX_PAD(0x045C, 0x0148, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__WEIM_WEIM_DA_A_14	= IOMUX_PAD(0x0460, 0x014C, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__IPU1_DI1_D1_CS	= IOMUX_PAD(0x0460, 0x014C, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__CCM_DI0_EXT_CLK	= IOMUX_PAD(0x0460, 0x014C, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__MIPI_CORE_DPHY_OUT16	= IOMUX_PAD(0x0460, 0x014C, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__SDMA_DEBUG_EVT_CHN_5 = IOMUX_PAD(0x0460, 0x014C, 4, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__GPIO_3_14		= IOMUX_PAD(0x0460, 0x014C, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__TPSMP_HDATA_28	= IOMUX_PAD(0x0460, 0x014C, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA14__SRC_BT_CFG_14	= IOMUX_PAD(0x0460, 0x014C, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__WEIM_WEIM_DA_A_15	= IOMUX_PAD(0x0464, 0x0150, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__IPU1_DI1_PIN1	= IOMUX_PAD(0x0464, 0x0150, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__IPU1_DI1_PIN4	= IOMUX_PAD(0x0464, 0x0150, 2, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__MIPI_CORE_DPHY_OUT17	= IOMUX_PAD(0x0464, 0x0150, 3, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__GPIO_3_15		= IOMUX_PAD(0x0464, 0x0150, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__TPSMP_HDATA_29	= IOMUX_PAD(0x0464, 0x0150, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_DA15__SRC_BT_CFG_15	= IOMUX_PAD(0x0464, 0x0150, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__WEIM_WEIM_WAIT	= IOMUX_PAD(0x0468, 0x0154, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__WEIM_WEIM_DTACK_B	= IOMUX_PAD(0x0468, 0x0154, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__GPIO_5_0		= IOMUX_PAD(0x0468, 0x0154, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__TPSMP_HDATA_30	= IOMUX_PAD(0x0468, 0x0154, 6, 0x0000, 0, 0),
+-	MX6_PAD_EIM_WAIT__SRC_BT_CFG_25	= IOMUX_PAD(0x0468, 0x0154, 7, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__WEIM_WEIM_BCLK	= IOMUX_PAD(0x046C, 0x0158, 0, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__IPU1_DI1_PIN16	= IOMUX_PAD(0x046C, 0x0158, 1, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__GPIO_6_31		= IOMUX_PAD(0x046C, 0x0158, 5, 0x0000, 0, 0),
+-	MX6_PAD_EIM_BCLK__TPSMP_HDATA_31	= IOMUX_PAD(0x046C, 0x0158, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK = IOMUX_PAD(0x0470, 0x015C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_DISP_CLK__IPU2_DI0_DISP_CLK = IOMUX_PAD(0x0470, 0x015C, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__MIPI_CR_DPY_OT28 = IOMUX_PAD(0x0470, 0x015C, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__SDMA_DBG_CR_STA0 = IOMUX_PAD(0x0470, 0x015C, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__GPIO_4_16	= IOMUX_PAD(0x0470, 0x015C, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_DISP_CLK__MMDC_DEBUG_0	= IOMUX_PAD(0x0470, 0x015C, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__IPU1_DI0_PIN15	= IOMUX_PAD(0x0474, 0x0160, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN15__IPU2_DI0_PIN15	= IOMUX_PAD(0x0474, 0x0160, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__AUDMUX_AUD6_TXC	= IOMUX_PAD(0x0474, 0x0160, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__MIPI_CR_DPHY_OUT_29 = IOMUX_PAD(0x0474, 0x0160, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__SDMA_DBG_CORE_STA_1 = IOMUX_PAD(0x0474, 0x0160, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__GPIO_4_17		= IOMUX_PAD(0x0474, 0x0160, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN15__MMDC_MMDC_DEBUG_1	= IOMUX_PAD(0x0474, 0x0160, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN2	= IOMUX_PAD(0x0478, 0x0164, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN2__IPU2_DI0_PIN2	= IOMUX_PAD(0x0478, 0x0164, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__AUDMUX_AUD6_TXD	= IOMUX_PAD(0x0478, 0x0164, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__MIPI_CR_DPHY_OUT_30	= IOMUX_PAD(0x0478, 0x0164, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__SDMA_DBG_CORE_STA_2	= IOMUX_PAD(0x0478, 0x0164, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__GPIO_4_18		= IOMUX_PAD(0x0478, 0x0164, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__MMDC_DEBUG_2		= IOMUX_PAD(0x0478, 0x0164, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN2__PL301_PER1_HADDR_9	= IOMUX_PAD(0x0478, 0x0164, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__IPU1_DI0_PIN3	= IOMUX_PAD(0x047C, 0x0168, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN3__IPU2_DI0_PIN3	= IOMUX_PAD(0x047C, 0x0168, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__AUDMUX_AUD6_TXFS	= IOMUX_PAD(0x047C, 0x0168, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__MIPI_CORE_DPHY_OUT31 = IOMUX_PAD(0x047C, 0x0168, 3, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__SDMA_DBG_CORE_STA_3	= IOMUX_PAD(0x047C, 0x0168, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__GPIO_4_19		= IOMUX_PAD(0x047C, 0x0168, 5, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__MMDC_MMDC_DEBUG_3	= IOMUX_PAD(0x047C, 0x0168, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN3__PL301_PER1_HADDR_10	= IOMUX_PAD(0x047C, 0x0168, 7, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__IPU1_DI0_PIN4	= IOMUX_PAD(0x0480, 0x016C, 0, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__IPU2_DI0_PIN4	= IOMUX_PAD(0x0480, 0x016C, 1, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__AUDMUX_AUD6_RXD	= IOMUX_PAD(0x0480, 0x016C, 2, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__USDHC1_WP		= IOMUX_PAD(0x0480, 0x016C, 3, 0x094C, 0, 0),
+-	MX6_PAD_DI0_PIN4__SDMA_DEBUG_YIELD	= IOMUX_PAD(0x0480, 0x016C, 4, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__GPIO_4_20		= IOMUX_PAD(0x0480, 0x016C, 5, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DI0_PIN4__MMDC_MMDC_DEBUG_4	= IOMUX_PAD(0x0480, 0x016C, 6, 0x0000, 0, 0),
+-	MX6_PAD_DI0_PIN4__PL301_PER1_HADDR_11  = IOMUX_PAD(0x0480, 0x016C, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__IPU1_DISP0_DAT_0	= IOMUX_PAD(0x0484, 0x0170, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT0__IPU2_DISP0_DAT_0	= IOMUX_PAD(0x0484, 0x0170, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__ECSPI3_SCLK	= IOMUX_PAD(0x0484, 0x0170, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__USDHC1_USDHC_DBG_0 = IOMUX_PAD(0x0484, 0x0170, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__SDMA_DBG_CORE_RUN	= IOMUX_PAD(0x0484, 0x0170, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__GPIO_4_21		= IOMUX_PAD(0x0484, 0x0170, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT0__MMDC_MMDC_DEBUG_5	= IOMUX_PAD(0x0484, 0x0170, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__IPU1_DISP0_DAT_1	= IOMUX_PAD(0x0488, 0x0174, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT1__IPU2_DISP0_DAT_1	= IOMUX_PAD(0x0488, 0x0174, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__ECSPI3_MOSI	= IOMUX_PAD(0x0488, 0x0174, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__USDHC1_USDHC_DBG_1 = IOMUX_PAD(0x0488, 0x0174, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__SDMA_DBG_EVT_CHNSL = IOMUX_PAD(0x0488, 0x0174, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__GPIO_4_22		= IOMUX_PAD(0x0488, 0x0174, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__MMDC_DEBUG_6	= IOMUX_PAD(0x0488, 0x0174, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT1__PL301_PER1_HADR_12 = IOMUX_PAD(0x0488, 0x0174, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__IPU1_DISP0_DAT_2	= IOMUX_PAD(0x048C, 0x0178, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT2__IPU2_DISP0_DAT_2	= IOMUX_PAD(0x048C, 0x0178, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__ECSPI3_MISO	= IOMUX_PAD(0x048C, 0x0178, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__USDHC1_USDHC_DBG_2 = IOMUX_PAD(0x048C, 0x0178, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__SDMA_DEBUG_MODE	= IOMUX_PAD(0x048C, 0x0178, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__GPIO_4_23		= IOMUX_PAD(0x048C, 0x0178, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__MMDC_DEBUG_7	= IOMUX_PAD(0x048C, 0x0178, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT2__PL301_PER1_HADR_13 = IOMUX_PAD(0x048C, 0x0178, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__IPU1_DISP0_DAT_3	= IOMUX_PAD(0x0490, 0x017C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT3__IPU2_DISP0_DAT_3	= IOMUX_PAD(0x0490, 0x017C, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__ECSPI3_SS0		= IOMUX_PAD(0x0490, 0x017C, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__USDHC1_USDHC_DBG_3 = IOMUX_PAD(0x0490, 0x017C, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__SDMA_DBG_BUS_ERROR = IOMUX_PAD(0x0490, 0x017C, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__GPIO_4_24		= IOMUX_PAD(0x0490, 0x017C, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__MMDC_MMDC_DBG_8	= IOMUX_PAD(0x0490, 0x017C, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT3__PL301_PER1_HADR_14 = IOMUX_PAD(0x0490, 0x017C, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__IPU1_DISP0_DAT_4	= IOMUX_PAD(0x0494, 0x0180, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT4__IPU2_DISP0_DAT_4	= IOMUX_PAD(0x0494, 0x0180, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__ECSPI3_SS1		= IOMUX_PAD(0x0494, 0x0180, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__USDHC1_USDHC_DBG_4	= IOMUX_PAD(0x0494, 0x0180, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__SDMA_DEBUG_BUS_RWB = IOMUX_PAD(0x0494, 0x0180, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__GPIO_4_25		= IOMUX_PAD(0x0494, 0x0180, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__MMDC_MMDC_DEBUG_9	= IOMUX_PAD(0x0494, 0x0180, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT4__PL301_PER1_HADR_15	= IOMUX_PAD(0x0494, 0x0180, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__IPU1_DISP0_DAT_5	= IOMUX_PAD(0x0498, 0x0184, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT5__IPU2_DISP0_DAT_5	= IOMUX_PAD(0x0498, 0x0184, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__ECSPI3_SS2		= IOMUX_PAD(0x0498, 0x0184, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__AUDMUX_AUD6_RXFS	= IOMUX_PAD(0x0498, 0x0184, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__SDMA_DBG_MCH_DMBUS = IOMUX_PAD(0x0498, 0x0184, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__GPIO_4_26		= IOMUX_PAD(0x0498, 0x0184, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__MMDC_DEBUG_10	= IOMUX_PAD(0x0498, 0x0184, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT5__PL301_PER1_HADR_16 = IOMUX_PAD(0x0498, 0x0184, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__IPU1_DISP0_DAT_6	= IOMUX_PAD(0x049C, 0x0188, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT6__IPU2_DISP0_DAT_6	= IOMUX_PAD(0x049C, 0x0188, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__ECSPI3_SS3		= IOMUX_PAD(0x049C, 0x0188, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__AUDMUX_AUD6_RXC	= IOMUX_PAD(0x049C, 0x0188, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__SDMA_DBG_RTBUF_WRT = IOMUX_PAD(0x049C, 0x0188, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__GPIO_4_27		= IOMUX_PAD(0x049C, 0x0188, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__MMDC_DEBUG_11	= IOMUX_PAD(0x049C, 0x0188, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT6__PL301_PER1_HADR_17 = IOMUX_PAD(0x049C, 0x0188, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__IPU1_DISP0_DAT_7	= IOMUX_PAD(0x04A0, 0x018C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT7__IPU2_DISP0_DAT_7	= IOMUX_PAD(0x04A0, 0x018C, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__ECSPI3_RDY		= IOMUX_PAD(0x04A0, 0x018C, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__USDHC1_USDHC_DBG_5 = IOMUX_PAD(0x04A0, 0x018C, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__SDMA_DBG_EVT_CHN_0 = IOMUX_PAD(0x04A0, 0x018C, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__GPIO_4_28		= IOMUX_PAD(0x04A0, 0x018C, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__MMDC_DEBUG_12	= IOMUX_PAD(0x04A0, 0x018C, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT7__PL301_PER1_HADR_18 = IOMUX_PAD(0x04A0, 0x018C, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__IPU1_DISP0_DAT_8	= IOMUX_PAD(0x04A4, 0x0190, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT8__IPU2_DISP0_DAT_8	= IOMUX_PAD(0x04A4, 0x0190, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__PWM1_PWMO		= IOMUX_PAD(0x04A4, 0x0190, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__WDOG1_WDOG_B	= IOMUX_PAD(0x04A4, 0x0190, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__SDMA_DBG_EVT_CHN_1	= IOMUX_PAD(0x04A4, 0x0190, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__GPIO_4_29		= IOMUX_PAD(0x04A4, 0x0190, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__MMDC_DEBUG_13	= IOMUX_PAD(0x04A4, 0x0190, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT8__PL301_PER1_HADR_19 = IOMUX_PAD(0x04A4, 0x0190, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__IPU1_DISP0_DAT_9	= IOMUX_PAD(0x04A8, 0x0194, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT9__IPU2_DISP0_DAT_9	= IOMUX_PAD(0x04A8, 0x0194, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__PWM2_PWMO		= IOMUX_PAD(0x04A8, 0x0194, 2, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__WDOG2_WDOG_B	= IOMUX_PAD(0x04A8, 0x0194, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__SDMA_DBG_EVT_CHN_2 = IOMUX_PAD(0x04A8, 0x0194, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__GPIO_4_30		= IOMUX_PAD(0x04A8, 0x0194, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__MMDC_DEBUG_14	= IOMUX_PAD(0x04A8, 0x0194, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT9__PL301_PER1_HADR_20 = IOMUX_PAD(0x04A8, 0x0194, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__IPU1_DISP0_DAT_10	= IOMUX_PAD(0x04AC, 0x0198, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT10__IPU2_DISP0_DAT_10	= IOMUX_PAD(0x04AC, 0x0198, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__USDHC1_DBG_6	= IOMUX_PAD(0x04AC, 0x0198, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__SDMA_DBG_EVT_CHN3 = IOMUX_PAD(0x04AC, 0x0198, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__GPIO_4_31		= IOMUX_PAD(0x04AC, 0x0198, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__MMDC_DEBUG_15	= IOMUX_PAD(0x04AC, 0x0198, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT10__PL301_PER1_HADR21 = IOMUX_PAD(0x04AC, 0x0198, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__IPU1_DISP0_DAT_11	= IOMUX_PAD(0x04B0, 0x019C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT11__IPU2_DISP0_DAT_11	= IOMUX_PAD(0x04B0, 0x019C, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__USDHC1_USDHC_DBG7 = IOMUX_PAD(0x04B0, 0x019C, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__SDMA_DBG_EVT_CHN4 = IOMUX_PAD(0x04B0, 0x019C, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__GPIO_5_5		= IOMUX_PAD(0x04B0, 0x019C, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__MMDC_DEBUG_16	= IOMUX_PAD(0x04B0, 0x019C, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT11__PL301_PER1_HADR22 = IOMUX_PAD(0x04B0, 0x019C, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__IPU1_DISP0_DAT_12	= IOMUX_PAD(0x04B4, 0x01A0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT12__IPU2_DISP0_DAT_12	= IOMUX_PAD(0x04B4, 0x01A0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__RESERVED_RESERVED	= IOMUX_PAD(0x04B4, 0x01A0, 3, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__SDMA_DBG_EVT_CHN5 = IOMUX_PAD(0x04B4, 0x01A0, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__GPIO_5_6		= IOMUX_PAD(0x04B4, 0x01A0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__MMDC_DEBUG_17	= IOMUX_PAD(0x04B4, 0x01A0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT12__PL301_PER1_HADR23 = IOMUX_PAD(0x04B4, 0x01A0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__IPU1_DISP0_DAT_13	= IOMUX_PAD(0x04B8, 0x01A4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT13__IPU2_DISP0_DAT_13	= IOMUX_PAD(0x04B8, 0x01A4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__AUDMUX_AUD5_RXFS	= IOMUX_PAD(0x04B8, 0x01A4, 3, 0x07D8, 1, 0),
+-	MX6_PAD_DISP0_DAT13__SDMA_DBG_EVT_CHN0 = IOMUX_PAD(0x04B8, 0x01A4, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__GPIO_5_7		= IOMUX_PAD(0x04B8, 0x01A4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__MMDC_DEBUG_18	= IOMUX_PAD(0x04B8, 0x01A4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT13__PL301_PER1_HADR24 = IOMUX_PAD(0x04B8, 0x01A4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__IPU1_DISP0_DAT_14	= IOMUX_PAD(0x04BC, 0x01A8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT14__IPU2_DISP0_DAT_14	= IOMUX_PAD(0x04BC, 0x01A8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__AUDMUX_AUD5_RXC	= IOMUX_PAD(0x04BC, 0x01A8, 3, 0x07D4, 1, 0),
+-	MX6_PAD_DISP0_DAT14__SDMA_DBG_EVT_CHN1 = IOMUX_PAD(0x04BC, 0x01A8, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__GPIO_5_8		= IOMUX_PAD(0x04BC, 0x01A8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT14__MMDC_DEBUG_19	= IOMUX_PAD(0x04BC, 0x01A8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__IPU1_DISP0_DAT_15	= IOMUX_PAD(0x04C0, 0x01AC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT15__IPU2_DISP0_DAT_15	= IOMUX_PAD(0x04C0, 0x01AC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__ECSPI1_SS1	= IOMUX_PAD(0x04C0, 0x01AC, 2, 0x0804, 1, 0),
+-	MX6_PAD_DISP0_DAT15__ECSPI2_SS1	= IOMUX_PAD(0x04C0, 0x01AC, 3, 0x0820, 1, 0),
+-	MX6_PAD_DISP0_DAT15__SDMA_DBG_EVT_CHN2 = IOMUX_PAD(0x04C0, 0x01AC, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__GPIO_5_9		= IOMUX_PAD(0x04C0, 0x01AC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__MMDC_DEBUG_20	= IOMUX_PAD(0x04C0, 0x01AC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT15__PL301_PER1_HADR25 = IOMUX_PAD(0x04C0, 0x01AC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__IPU1_DISP0_DAT_16	= IOMUX_PAD(0x04C4, 0x01B0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT16__IPU2_DISP0_DAT_16	= IOMUX_PAD(0x04C4, 0x01B0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__ECSPI2_MOSI	= IOMUX_PAD(0x04C4, 0x01B0, 2, 0x0818, 1, 0),
+-	MX6_PAD_DISP0_DAT16__AUDMUX_AUD5_TXC	= IOMUX_PAD(0x04C4, 0x01B0, 3, 0x07DC, 0, 0),
+-	MX6_PAD_DISP0_DAT16__SDMA_EXT_EVENT_0	= IOMUX_PAD(0x04C4, 0x01B0, 4, 0x090C, 0, 0),
+-	MX6_PAD_DISP0_DAT16__GPIO_5_10		= IOMUX_PAD(0x04C4, 0x01B0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__MMDC_DEBUG_21	= IOMUX_PAD(0x04C4, 0x01B0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT16__PL301_PER1_HADR26 = IOMUX_PAD(0x04C4, 0x01B0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__IPU1_DISP0_DAT_17	= IOMUX_PAD(0x04C8, 0x01B4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT17__IPU2_DISP0_DAT_17	= IOMUX_PAD(0x04C8, 0x01B4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__ECSPI2_MISO	= IOMUX_PAD(0x04C8, 0x01B4, 2, 0x0814, 1, 0),
+-	MX6_PAD_DISP0_DAT17__AUDMUX_AUD5_TXD	= IOMUX_PAD(0x04C8, 0x01B4, 3, 0x07D0, 0, 0),
+-	MX6_PAD_DISP0_DAT17__SDMA_EXT_EVENT_1	= IOMUX_PAD(0x04C8, 0x01B4, 4, 0x0910, 0, 0),
+-	MX6_PAD_DISP0_DAT17__GPIO_5_11		= IOMUX_PAD(0x04C8, 0x01B4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__MMDC_DEBUG_22	= IOMUX_PAD(0x04C8, 0x01B4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT17__PL301_PER1_HADR27	= IOMUX_PAD(0x04C8, 0x01B4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__IPU1_DISP0_DAT_18	= IOMUX_PAD(0x04CC, 0x01B8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT18__IPU2_DISP0_DAT_18	= IOMUX_PAD(0x04CC, 0x01B8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__ECSPI2_SS0	= IOMUX_PAD(0x04CC, 0x01B8, 2, 0x081C, 1, 0),
+-	MX6_PAD_DISP0_DAT18__AUDMUX_AUD5_TXFS	= IOMUX_PAD(0x04CC, 0x01B8, 3, 0x07E0, 0, 0),
+-	MX6_PAD_DISP0_DAT18__AUDMUX_AUD4_RXFS	= IOMUX_PAD(0x04CC, 0x01B8, 4, 0x07C0, 0, 0),
+-	MX6_PAD_DISP0_DAT18__GPIO_5_12		= IOMUX_PAD(0x04CC, 0x01B8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__MMDC_DEBUG_23	= IOMUX_PAD(0x04CC, 0x01B8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT18__WEIM_WEIM_CS_2	= IOMUX_PAD(0x04CC, 0x01B8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__IPU1_DISP0_DAT_19	= IOMUX_PAD(0x04D0, 0x01BC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT19__IPU2_DISP0_DAT_19	= IOMUX_PAD(0x04D0, 0x01BC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__ECSPI2_SCLK	= IOMUX_PAD(0x04D0, 0x01BC, 2, 0x0810, 1, 0),
+-	MX6_PAD_DISP0_DAT19__AUDMUX_AUD5_RXD	= IOMUX_PAD(0x04D0, 0x01BC, 3, 0x07CC, 0, 0),
+-	MX6_PAD_DISP0_DAT19__AUDMUX_AUD4_RXC	= IOMUX_PAD(0x04D0, 0x01BC, 4, 0x07BC, 0, 0),
+-	MX6_PAD_DISP0_DAT19__GPIO_5_13		= IOMUX_PAD(0x04D0, 0x01BC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__MMDC_DEBUG_24	= IOMUX_PAD(0x04D0, 0x01BC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT19__WEIM_WEIM_CS_3	= IOMUX_PAD(0x04D0, 0x01BC, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__IPU1_DISP0_DAT_20	= IOMUX_PAD(0x04D4, 0x01C0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT20__IPU2_DISP0_DAT_20	= IOMUX_PAD(0x04D4, 0x01C0, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__ECSPI1_SCLK	= IOMUX_PAD(0x04D4, 0x01C0, 2, 0x07F4, 1, 0),
+-	MX6_PAD_DISP0_DAT20__AUDMUX_AUD4_TXC	= IOMUX_PAD(0x04D4, 0x01C0, 3, 0x07C4, 0, 0),
+-	MX6_PAD_DISP0_DAT20__SDMA_DBG_EVT_CHN7	= IOMUX_PAD(0x04D4, 0x01C0, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__GPIO_5_14		= IOMUX_PAD(0x04D4, 0x01C0, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__MMDC_DEBUG_25	= IOMUX_PAD(0x04D4, 0x01C0, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT20__PL301_PER1_HADR28 = IOMUX_PAD(0x04D4, 0x01C0, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__IPU1_DISP0_DAT_21	= IOMUX_PAD(0x04D8, 0x01C4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT21__IPU2_DISP0_DAT_21	= IOMUX_PAD(0x04D8, 0x01C4, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__ECSPI1_MOSI	= IOMUX_PAD(0x04D8, 0x01C4, 2, 0x07FC, 1, 0),
+-	MX6_PAD_DISP0_DAT21__AUDMUX_AUD4_TXD	= IOMUX_PAD(0x04D8, 0x01C4, 3, 0x07B8, 1, 0),
+-	MX6_PAD_DISP0_DAT21__SDMA_DBG_BUS_DEV0 = IOMUX_PAD(0x04D8, 0x01C4, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__GPIO_5_15		= IOMUX_PAD(0x04D8, 0x01C4, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__MMDC_DEBUG_26	= IOMUX_PAD(0x04D8, 0x01C4, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT21__PL301_PER1_HADR29 = IOMUX_PAD(0x04D8, 0x01C4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__IPU1_DISP0_DAT_22	= IOMUX_PAD(0x04DC, 0x01C8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT22__IPU2_DISP0_DAT_22	= IOMUX_PAD(0x04DC, 0x01C8, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__ECSPI1_MISO	= IOMUX_PAD(0x04DC, 0x01C8, 2, 0x07F8, 1, 0),
+-	MX6_PAD_DISP0_DAT22__AUDMUX_AUD4_TXFS	= IOMUX_PAD(0x04DC, 0x01C8, 3, 0x07C8, 1, 0),
+-	MX6_PAD_DISP0_DAT22__SDMA_DBG_BUS_DEV1 = IOMUX_PAD(0x04DC, 0x01C8, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__GPIO_5_16		= IOMUX_PAD(0x04DC, 0x01C8, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__MMDC_DEBUG_27	= IOMUX_PAD(0x04DC, 0x01C8, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT22__PL301_PER1_HADR30 = IOMUX_PAD(0x04DC, 0x01C8, 7, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__IPU1_DISP0_DAT_23	= IOMUX_PAD(0x04E0, 0x01CC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm),
+-	MX6_PAD_DISP0_DAT23__IPU2_DISP0_DAT_23	= IOMUX_PAD(0x04E0, 0x01CC, 1, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__ECSPI1_SS0	= IOMUX_PAD(0x04E0, 0x01CC, 2, 0x0800, 1, 0),
+-	MX6_PAD_DISP0_DAT23__AUDMUX_AUD4_RXD	= IOMUX_PAD(0x04E0, 0x01CC, 3, 0x07B4, 1, 0),
+-	MX6_PAD_DISP0_DAT23__SDMA_DBG_BUS_DEV2 = IOMUX_PAD(0x04E0, 0x01CC, 4, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__GPIO_5_17		= IOMUX_PAD(0x04E0, 0x01CC, 5, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__MMDC_DEBUG_28	= IOMUX_PAD(0x04E0, 0x01CC, 6, 0x0000, 0, 0),
+-	MX6_PAD_DISP0_DAT23__PL301_PER1_HADR31	= IOMUX_PAD(0x04E0, 0x01CC, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__RESERVED_RESERVED	= IOMUX_PAD(0x04E4, 0x01D0, 0, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__ENET_MDIO		= IOMUX_PAD(0x04E4, 0x01D0, 1, 0x0840, 0, 0),
+-	MX6_PAD_ENET_MDIO__ESAI1_SCKR		= IOMUX_PAD(0x04E4, 0x01D0, 2, 0x086C, 0, 0),
+-	MX6_PAD_ENET_MDIO__SDMA_DEBUG_BUS_DEV3 = IOMUX_PAD(0x04E4, 0x01D0, 3, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__ENET_1588_EVT1_OUT	= IOMUX_PAD(0x04E4, 0x01D0, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__GPIO_1_22		= IOMUX_PAD(0x04E4, 0x01D0, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDIO__SPDIF_PLOCK		= IOMUX_PAD(0x04E4, 0x01D0, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__RESERVED_RSRVED	= IOMUX_PAD(0x04E8, 0x01D4, 0, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__ENET_TX_CLK	= IOMUX_PAD(0x04E8, 0x01D4, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__ESAI1_FSR	= IOMUX_PAD(0x04E8, 0x01D4, 2, 0x085C, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__SDMA_DBGBUS_DEV4 = IOMUX_PAD(0x04E8, 0x01D4, 3, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__GPIO_1_23	= IOMUX_PAD(0x04E8, 0x01D4, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__SPDIF_SRCLK	= IOMUX_PAD(0x04E8, 0x01D4, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_REF_CLK__USBPHY1_RX_SQH	= IOMUX_PAD(0x04E8, 0x01D4, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__ENET_RX_ER		= IOMUX_PAD(0x04EC, 0x01D8, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__ESAI1_HCKR		= IOMUX_PAD(0x04EC, 0x01D8, 2, 0x0864, 0, 0),
+-	MX6_PAD_ENET_RX_ER__SPDIF_IN1		= IOMUX_PAD(0x04EC, 0x01D8, 3, 0x0914, 1, 0),
+-	MX6_PAD_ENET_RX_ER__ENET_1588_EVT2_OUT = IOMUX_PAD(0x04EC, 0x01D8, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__GPIO_1_24		= IOMUX_PAD(0x04EC, 0x01D8, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__PHY_TDI		= IOMUX_PAD(0x04EC, 0x01D8, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RX_ER__USBPHY1_RX_HS_RXD	= IOMUX_PAD(0x04EC, 0x01D8, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__RESERVED_RSRVED	= IOMUX_PAD(0x04F0, 0x01DC, 0, 0x0000, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__ENET_RX_EN	= IOMUX_PAD(0x04F0, 0x01DC, 1, 0x0858, 1, 0),
+-	MX6_PAD_ENET_CRS_DV__ESAI1_SCKT	= IOMUX_PAD(0x04F0, 0x01DC, 2, 0x0870, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__SPDIF_EXTCLK	= IOMUX_PAD(0x04F0, 0x01DC, 3, 0x0918, 1, 0),
+-	MX6_PAD_ENET_CRS_DV__GPIO_1_25		= IOMUX_PAD(0x04F0, 0x01DC, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__PHY_TDO		= IOMUX_PAD(0x04F0, 0x01DC, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_CRS_DV__USBPHY1_RX_FS_RXD	= IOMUX_PAD(0x04F0, 0x01DC, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__MLB_MLBSIG		= IOMUX_PAD(0x04F4, 0x01E0, 0, 0x0908, 0, 0),
+-	MX6_PAD_ENET_RXD1__ENET_RDATA_1	= IOMUX_PAD(0x04F4, 0x01E0, 1, 0x084C, 1, 0),
+-	MX6_PAD_ENET_RXD1__ESAI1_FST		= IOMUX_PAD(0x04F4, 0x01E0, 2, 0x0860, 0, 0),
+-	MX6_PAD_ENET_RXD1__ENET_1588_EVT3_OUT	= IOMUX_PAD(0x04F4, 0x01E0, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__GPIO_1_26		= IOMUX_PAD(0x04F4, 0x01E0, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__PHY_TCK		= IOMUX_PAD(0x04F4, 0x01E0, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD1__USBPHY1_RX_DISCON	= IOMUX_PAD(0x04F4, 0x01E0, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__OSC32K_32K_OUT	= IOMUX_PAD(0x04F8, 0x01E4, 0, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__ENET_RDATA_0	= IOMUX_PAD(0x04F8, 0x01E4, 1, 0x0848, 1, 0),
+-	MX6_PAD_ENET_RXD0__ESAI1_HCKT		= IOMUX_PAD(0x04F8, 0x01E4, 2, 0x0868, 0, 0),
+-	MX6_PAD_ENET_RXD0__SPDIF_OUT1		= IOMUX_PAD(0x04F8, 0x01E4, 3, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__GPIO_1_27		= IOMUX_PAD(0x04F8, 0x01E4, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__PHY_TMS		= IOMUX_PAD(0x04F8, 0x01E4, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_RXD0__USBPHY1_PLL_CK20DIV	= IOMUX_PAD(0x04F8, 0x01E4, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__RESERVED_RSRVED	= IOMUX_PAD(0x04FC, 0x01E8, 0, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__ENET_TX_EN		= IOMUX_PAD(0x04FC, 0x01E8, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__ESAI1_TX3_RX2	= IOMUX_PAD(0x04FC, 0x01E8, 2, 0x0880, 0, 0),
+-	MX6_PAD_ENET_TX_EN__GPIO_1_28		= IOMUX_PAD(0x04FC, 0x01E8, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__SATA_PHY_TDI	= IOMUX_PAD(0x04FC, 0x01E8, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TX_EN__USBPHY2_RX_SQH	= IOMUX_PAD(0x04FC, 0x01E8, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__MLB_MLBCLK		= IOMUX_PAD(0x0500, 0x01EC, 0, 0x0900, 0, 0),
+-	MX6_PAD_ENET_TXD1__ENET_TDATA_1	= IOMUX_PAD(0x0500, 0x01EC, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__ESAI1_TX2_RX3	= IOMUX_PAD(0x0500, 0x01EC, 2, 0x087C, 0, 0),
+-	MX6_PAD_ENET_TXD1__ENET_1588_EVENT0_IN	= IOMUX_PAD(0x0500, 0x01EC, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__GPIO_1_29		= IOMUX_PAD(0x0500, 0x01EC, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__SATA_PHY_TDO	= IOMUX_PAD(0x0500, 0x01EC, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD1__USBPHY2_RX_HS_RXD	= IOMUX_PAD(0x0500, 0x01EC, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD0__RESERVED_RSRVED	= IOMUX_PAD(0x0504, 0x01F0, 0, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD0__ENET_TDATA_0	= IOMUX_PAD(0x0504, 0x01F0, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD0__ESAI1_TX4_RX1	= IOMUX_PAD(0x0504, 0x01F0, 2, 0x0884, 0, 0),
+-	MX6_PAD_ENET_TXD0__GPIO_1_30		= IOMUX_PAD(0x0504, 0x01F0, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD0__SATA_PHY_TCK	= IOMUX_PAD(0x0504, 0x01F0, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_TXD0__USBPHY2_RX_FS_RXD   = IOMUX_PAD(0x0504, 0x01F0, 7, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__MLB_MLBDAT		= IOMUX_PAD(0x0508, 0x01F4, 0, 0x0904, 0, 0),
+-	MX6_PAD_ENET_MDC__ENET_MDC		= IOMUX_PAD(0x0508, 0x01F4, 1, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__ESAI1_TX5_RX0	= IOMUX_PAD(0x0508, 0x01F4, 2, 0x0888, 0, 0),
+-	MX6_PAD_ENET_MDC__ENET_1588_EVENT1_IN	= IOMUX_PAD(0x0508, 0x01F4, 4, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__GPIO_1_31		= IOMUX_PAD(0x0508, 0x01F4, 5, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__SATA_PHY_TMS		= IOMUX_PAD(0x0508, 0x01F4, 6, 0x0000, 0, 0),
+-	MX6_PAD_ENET_MDC__USBPHY2_RX_DISCON	= IOMUX_PAD(0x0508, 0x01F4, 7, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D40__MMDC_DRAM_D_40	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D41__MMDC_DRAM_D_41	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D42__MMDC_DRAM_D_42	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D43__MMDC_DRAM_D_43	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D44__MMDC_DRAM_D_44	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D45__MMDC_DRAM_D_45	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D46__MMDC_DRAM_D_46	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D47__MMDC_DRAM_D_47	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS5__MMDC_DRAM_SDQS_5	= IOMUX_PAD(0x050C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM5__MMDC_DRAM_DQM_5	= IOMUX_PAD(0x0510, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D32__MMDC_DRAM_D_32	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D33__MMDC_DRAM_D_33	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D34__MMDC_DRAM_D_34	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D35__MMDC_DRAM_D_35	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D36__MMDC_DRAM_D_36	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D37__MMDC_DRAM_D_37	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D38__MMDC_DRAM_D_38	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D39__MMDC_DRAM_D_39	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM4__MMDC_DRAM_DQM_4	= IOMUX_PAD(0x0514, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS4__MMDC_DRAM_SDQS_4	= IOMUX_PAD(0x0518, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D24__MMDC_DRAM_D_24	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D25__MMDC_DRAM_D_25	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D26__MMDC_DRAM_D_26	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D27__MMDC_DRAM_D_27	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D28__MMDC_DRAM_D_28	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D29__MMDC_DRAM_D_29	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS3__MMDC_DRAM_SDQS_3	= IOMUX_PAD(0x051C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D30__MMDC_DRAM_D_30	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D31__MMDC_DRAM_D_31	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM3__MMDC_DRAM_DQM_3	= IOMUX_PAD(0x0520, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D16__MMDC_DRAM_D_16	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D17__MMDC_DRAM_D_17	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D18__MMDC_DRAM_D_18	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D19__MMDC_DRAM_D_19	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D20__MMDC_DRAM_D_20	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D21__MMDC_DRAM_D_21	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D22__MMDC_DRAM_D_22	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS2__MMDC_DRAM_SDQS_2	= IOMUX_PAD(0x0524, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D23__MMDC_DRAM_D_23	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM2__MMDC_DRAM_DQM_2	= IOMUX_PAD(0x0528, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A0__MMDC_DRAM_A_0		= IOMUX_PAD(0x052C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A1__MMDC_DRAM_A_1		= IOMUX_PAD(0x0530, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A2__MMDC_DRAM_A_2		= IOMUX_PAD(0x0534, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A3__MMDC_DRAM_A_3		= IOMUX_PAD(0x0538, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A4__MMDC_DRAM_A_4		= IOMUX_PAD(0x053C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A5__MMDC_DRAM_A_5		= IOMUX_PAD(0x0540, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A6__MMDC_DRAM_A_6		= IOMUX_PAD(0x0544, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A7__MMDC_DRAM_A_7		= IOMUX_PAD(0x0548, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A8__MMDC_DRAM_A_8		= IOMUX_PAD(0x054C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A9__MMDC_DRAM_A_9		= IOMUX_PAD(0x0550, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A10__MMDC_DRAM_A_10	= IOMUX_PAD(0x0554, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A11__MMDC_DRAM_A_11	= IOMUX_PAD(0x0558, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A12__MMDC_DRAM_A_12	= IOMUX_PAD(0x055C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A13__MMDC_DRAM_A_13	= IOMUX_PAD(0x0560, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A14__MMDC_DRAM_A_14	= IOMUX_PAD(0x0564, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_A15__MMDC_DRAM_A_15	= IOMUX_PAD(0x0568, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_CAS__MMDC_DRAM_CAS	= IOMUX_PAD(0x056C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_CS0__MMDC_DRAM_CS_0	= IOMUX_PAD(0x0570, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_CS1__MMDC_DRAM_CS_1	= IOMUX_PAD(0x0574, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_RAS__MMDC_DRAM_RAS	= IOMUX_PAD(0x0578, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_RESET__MMDC_DRAM_RESET	= IOMUX_PAD(0x057C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDBA0__MMDC_DRAM_SDBA_0	= IOMUX_PAD(0x0580, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDBA1__MMDC_DRAM_SDBA_1	= IOMUX_PAD(0x0584, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCLK_0__MMDC_DRAM_SDCLK0	= IOMUX_PAD(0x0588, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDBA2__MMDC_DRAM_SDBA_2	= IOMUX_PAD(0x058C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCKE0__MMDC_DRAM_SDCKE_0	= IOMUX_PAD(0x0590, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCLK_1__MMDC_DRAM_SDCLK1	= IOMUX_PAD(0x0594, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDCKE1__MMDC_DRAM_SDCKE_1	= IOMUX_PAD(0x0598, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDODT0__MMDC_DRAM_ODT_0	= IOMUX_PAD(0x059C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDODT1__MMDC_DRAM_ODT_1	= IOMUX_PAD(0x05A0, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDWE__MMDC_DRAM_SDWE	= IOMUX_PAD(0x05A4, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D0__MMDC_DRAM_D_0		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D1__MMDC_DRAM_D_1		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D2__MMDC_DRAM_D_2		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D3__MMDC_DRAM_D_3		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D4__MMDC_DRAM_D_4		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D5__MMDC_DRAM_D_5		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS0__MMDC_DRAM_SDQS_0	= IOMUX_PAD(0x05A8, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D6__MMDC_DRAM_D_6		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D7__MMDC_DRAM_D_7		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM0__MMDC_DRAM_DQM_0	= IOMUX_PAD(0x05AC, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D8__MMDC_DRAM_D_8		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D9__MMDC_DRAM_D_9		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D10__MMDC_DRAM_D_10	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D11__MMDC_DRAM_D_11	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D12__MMDC_DRAM_D_12	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D13__MMDC_DRAM_D_13	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D14__MMDC_DRAM_D_14	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS1__MMDC_DRAM_SDQS_1	= IOMUX_PAD(0x05B0, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D15__MMDC_DRAM_D_15	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM1__MMDC_DRAM_DQM_1	= IOMUX_PAD(0x05B4, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D48__MMDC_DRAM_D_48	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D49__MMDC_DRAM_D_49	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D50__MMDC_DRAM_D_50	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D51__MMDC_DRAM_D_51	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D52__MMDC_DRAM_D_52	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D53__MMDC_DRAM_D_53	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D54__MMDC_DRAM_D_54	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D55__MMDC_DRAM_D_55	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS6__MMDC_DRAM_SDQS_6	= IOMUX_PAD(0x05B8, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM6__MMDC_DRAM_DQM_6	= IOMUX_PAD(0x05BC, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D56__MMDC_DRAM_D_56	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_SDQS7__MMDC_DRAM_SDQS_7	= IOMUX_PAD(0x05C0, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D57__MMDC_DRAM_D_57	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D58__MMDC_DRAM_D_58	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D59__MMDC_DRAM_D_59	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D60__MMDC_DRAM_D_60	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_DQM7__MMDC_DRAM_DQM_7	= IOMUX_PAD(0x05C4, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D61__MMDC_DRAM_D_61	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D62__MMDC_DRAM_D_62	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_DRAM_D63__MMDC_DRAM_D_63	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__ECSPI1_SCLK		= IOMUX_PAD(0x05C8, 0x01F8, 0, 0x07F4, 2, 0),
+-	MX6_PAD_KEY_COL0__ENET_RDATA_3		= IOMUX_PAD(0x05C8, 0x01F8, 1, 0x0854, 1, 0),
+-	MX6_PAD_KEY_COL0__AUDMUX_AUD5_TXC	= IOMUX_PAD(0x05C8, 0x01F8, 2, 0x07DC, 1, 0),
+-	MX6_PAD_KEY_COL0__KPP_COL_0		= IOMUX_PAD(0x05C8, 0x01F8, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__UART4_TXD		= IOMUX_PAD(0x05C8, 0x01F8, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__UART4_TXD_RXD	= IOMUX_PAD(0x05C8, 0x01F8, 4, 0x0938, 0, 0),
+-	MX6_PAD_KEY_COL0__GPIO_4_6		= IOMUX_PAD(0x05C8, 0x01F8, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__DCIC1_DCIC_OUT	= IOMUX_PAD(0x05C8, 0x01F8, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL0__SRC_ANY_PU_RST	= IOMUX_PAD(0x05C8, 0x01F8, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__ECSPI1_MOSI		= IOMUX_PAD(0x05CC, 0x01FC, 0, 0x07FC, 2, 0),
+-	MX6_PAD_KEY_ROW0__ENET_TDATA_3		= IOMUX_PAD(0x05CC, 0x01FC, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__AUDMUX_AUD5_TXD	= IOMUX_PAD(0x05CC, 0x01FC, 2, 0x07D0, 1, 0),
+-	MX6_PAD_KEY_ROW0__KPP_ROW_0		= IOMUX_PAD(0x05CC, 0x01FC, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__UART4_RXD		= IOMUX_PAD(0x05CC, 0x01FC, 4, 0x0938, 1, 0),
+-	MX6_PAD_KEY_ROW0__GPIO_4_7		= IOMUX_PAD(0x05CC, 0x01FC, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__DCIC2_DCIC_OUT	= IOMUX_PAD(0x05CC, 0x01FC, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW0__PL301_PER1_HADR_0	= IOMUX_PAD(0x05CC, 0x01FC, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__ECSPI1_MISO		= IOMUX_PAD(0x05D0, 0x0200, 0, 0x07F8, 2, 0),
+-	MX6_PAD_KEY_COL1__ENET_MDIO		= IOMUX_PAD(0x05D0, 0x0200, 1, 0x0840, 1, 0),
+-	MX6_PAD_KEY_COL1__AUDMUX_AUD5_TXFS	= IOMUX_PAD(0x05D0, 0x0200, 2, 0x07E0, 1, 0),
+-	MX6_PAD_KEY_COL1__KPP_COL_1		= IOMUX_PAD(0x05D0, 0x0200, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__UART5_TXD		= IOMUX_PAD(0x05D0, 0x0200, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__UART5_TXD_RXD	= IOMUX_PAD(0x05D0, 0x0200, 4, 0x0940, 0, 0),
+-	MX6_PAD_KEY_COL1__GPIO_4_8		= IOMUX_PAD(0x05D0, 0x0200, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__USDHC1_VSELECT	= IOMUX_PAD(0x05D0, 0x0200, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL1__PL301MX_PER1_HADR_1	= IOMUX_PAD(0x05D0, 0x0200, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__ECSPI1_SS0		= IOMUX_PAD(0x05D4, 0x0204, 0, 0x0800, 2, 0),
+-	MX6_PAD_KEY_ROW1__ENET_COL		= IOMUX_PAD(0x05D4, 0x0204, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__AUDMUX_AUD5_RXD	= IOMUX_PAD(0x05D4, 0x0204, 2, 0x07CC, 1, 0),
+-	MX6_PAD_KEY_ROW1__KPP_ROW_1		= IOMUX_PAD(0x05D4, 0x0204, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__UART5_RXD		= IOMUX_PAD(0x05D4, 0x0204, 4, 0x0940, 1, 0),
+-	MX6_PAD_KEY_ROW1__GPIO_4_9		= IOMUX_PAD(0x05D4, 0x0204, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__USDHC2_VSELECT	= IOMUX_PAD(0x05D4, 0x0204, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW1__PL301_PER1_HADDR_2	= IOMUX_PAD(0x05D4, 0x0204, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__ECSPI1_SS1		= IOMUX_PAD(0x05D8, 0x0208, 0, 0x0804, 2, 0),
+-	MX6_PAD_KEY_COL2__ENET_RDATA_2		= IOMUX_PAD(0x05D8, 0x0208, 1, 0x0850, 1, 0),
+-	MX6_PAD_KEY_COL2__CAN1_TXCAN		= IOMUX_PAD(0x05D8, 0x0208, 2, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__KPP_COL_2		= IOMUX_PAD(0x05D8, 0x0208, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__ENET_MDC		= IOMUX_PAD(0x05D8, 0x0208, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__GPIO_4_10		= IOMUX_PAD(0x05D8, 0x0208, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__USBOH3_H1_PWRCTL_WKP = IOMUX_PAD(0x05D8, 0x0208, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL2__PL301_PER1_HADDR_3   = IOMUX_PAD(0x05D8, 0x0208, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__ECSPI1_SS2		= IOMUX_PAD(0x05DC, 0x020C, 0, 0x0808, 1, 0),
+-	MX6_PAD_KEY_ROW2__ENET_TDATA_2		= IOMUX_PAD(0x05DC, 0x020C, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__CAN1_RXCAN		= IOMUX_PAD(0x05DC, 0x020C, 2, 0x07E4, 0, 0),
+-	MX6_PAD_KEY_ROW2__KPP_ROW_2		= IOMUX_PAD(0x05DC, 0x020C, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__USDHC2_VSELECT	= IOMUX_PAD(0x05DC, 0x020C, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__GPIO_4_11		= IOMUX_PAD(0x05DC, 0x020C, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW2__HDMI_TX_CEC_LINE	= IOMUX_PAD(0x05DC, 0x020C, 6, 0x088C, 1, 0),
+-	MX6_PAD_KEY_ROW2__PL301_PER1_HADR_4    = IOMUX_PAD(0x05DC, 0x020C, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__ECSPI1_SS3		= IOMUX_PAD(0x05E0, 0x0210, 0, 0x080C, 1, 0),
+-	MX6_PAD_KEY_COL3__ENET_CRS		= IOMUX_PAD(0x05E0, 0x0210, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__HDMI_TX_DDC_SCL	= IOMUX_PAD(0x05E0, 0x0210, 2, 0x0890, 1, 0),
+-	MX6_PAD_KEY_COL3__KPP_COL_3		= IOMUX_PAD(0x05E0, 0x0210, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__I2C2_SCL		= IOMUX_PAD(0x05E0, 0x0210, 20, 0x08A0, 1, 0),
+-	MX6_PAD_KEY_COL3__GPIO_4_12		= IOMUX_PAD(0x05E0, 0x0210, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL3__SPDIF_IN1		= IOMUX_PAD(0x05E0, 0x0210, 6, 0x0914, 2, 0),
+-	MX6_PAD_KEY_COL3__PL301_PER1_HADR_5	= IOMUX_PAD(0x05E0, 0x0210, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__OSC32K_32K_OUT	= IOMUX_PAD(0x05E4, 0x0214, 0, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__ASRC_ASRC_EXT_CLK	= IOMUX_PAD(0x05E4, 0x0214, 1, 0x07B0, 0, 0),
+-	MX6_PAD_KEY_ROW3__HDMI_TX_DDC_SDA	= IOMUX_PAD(0x05E4, 0x0214, 2, 0x0894, 1, 0),
+-	MX6_PAD_KEY_ROW3__KPP_ROW_3		= IOMUX_PAD(0x05E4, 0x0214, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__I2C2_SDA		= IOMUX_PAD(0x05E4, 0x0214, 20, 0x08A4, 1, 0),
+-	MX6_PAD_KEY_ROW3__GPIO_4_13		= IOMUX_PAD(0x05E4, 0x0214, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__USDHC1_VSELECT	= IOMUX_PAD(0x05E4, 0x0214, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW3__PL301_PER1_HADR_6	= IOMUX_PAD(0x05E4, 0x0214, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__CAN2_TXCAN		= IOMUX_PAD(0x05E8, 0x0218, 0, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__IPU1_SISG_4		= IOMUX_PAD(0x05E8, 0x0218, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__USBOH3_USBOTG_OC	= IOMUX_PAD(0x05E8, 0x0218, 2, 0x0944, 1, 0),
+-	MX6_PAD_KEY_COL4__KPP_COL_4		= IOMUX_PAD(0x05E8, 0x0218, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__UART5_CTS		= IOMUX_PAD(0x05E8, 0x0218, 4, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__UART5_RTS		= IOMUX_PAD(0x05E8, 0x0218, 4, 0x093C, 0, 0),
+-	MX6_PAD_KEY_COL4__GPIO_4_14		= IOMUX_PAD(0x05E8, 0x0218, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__MMDC_DEBUG_49	= IOMUX_PAD(0x05E8, 0x0218, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_COL4__PL301_PER1_HADDR_7	= IOMUX_PAD(0x05E8, 0x0218, 7, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__CAN2_RXCAN		= IOMUX_PAD(0x05EC, 0x021C, 0, 0x07E8, 0, 0),
+-	MX6_PAD_KEY_ROW4__IPU1_SISG_5		= IOMUX_PAD(0x05EC, 0x021C, 1, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__USBOH3_USBOTG_PWR	= IOMUX_PAD(0x05EC, 0x021C, 2, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__KPP_ROW_4		= IOMUX_PAD(0x05EC, 0x021C, 3, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__UART5_CTS		= IOMUX_PAD(0x05EC, 0x021C, 4, 0x093C, 1, 0),
+-	MX6_PAD_KEY_ROW4__GPIO_4_15		= IOMUX_PAD(0x05EC, 0x021C, 5, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__MMDC_DEBUG_50	= IOMUX_PAD(0x05EC, 0x021C, 6, 0x0000, 0, 0),
+-	MX6_PAD_KEY_ROW4__PL301_PER1_HADR_8    = IOMUX_PAD(0x05EC, 0x021C, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__CCM_CLKO		= IOMUX_PAD(0x05F0, 0x0220, 0, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__KPP_COL_5		= IOMUX_PAD(0x05F0, 0x0220, 2, 0x08E8, 0, 0),
+-	MX6_PAD_GPIO_0__ASRC_ASRC_EXT_CLK	= IOMUX_PAD(0x05F0, 0x0220, 3, 0x07B0, 1, 0),
+-	MX6_PAD_GPIO_0__EPIT1_EPITO		= IOMUX_PAD(0x05F0, 0x0220, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__GPIO_1_0		= IOMUX_PAD(0x05F0, 0x0220, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__USBOH3_USBH1_PWR	= IOMUX_PAD(0x05F0, 0x0220, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_0__SNVS_HP_WRAP_SNVS_VIO5 = IOMUX_PAD(0x05F0, 0x0220, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__ESAI1_SCKR		= IOMUX_PAD(0x05F4, 0x0224, 0, 0x086C, 1, 0),
+-	MX6_PAD_GPIO_1__WDOG2_WDOG_B		= IOMUX_PAD(0x05F4, 0x0224, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__KPP_ROW_5		= IOMUX_PAD(0x05F4, 0x0224, 2, 0x08F4, 0, 0),
+-	MX6_PAD_GPIO_1__USB_OTG_ID		= IOMUX_PAD(0x05F4, 0x0224, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__PWM2_PWMO		= IOMUX_PAD(0x05F4, 0x0224, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__GPIO_1_1		= IOMUX_PAD(0x05F4, 0x0224, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__USDHC1_CD		= IOMUX_PAD(0x05F4, 0x0224, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_1__SRC_TESTER_ACK		= IOMUX_PAD(0x05F4, 0x0224, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__ESAI1_FSR		= IOMUX_PAD(0x05F8, 0x0228, 0, 0x085C, 1, 0),
+-	MX6_PAD_GPIO_9__WDOG1_WDOG_B		= IOMUX_PAD(0x05F8, 0x0228, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__KPP_COL_6		= IOMUX_PAD(0x05F8, 0x0228, 2, 0x08EC, 0, 0),
+-	MX6_PAD_GPIO_9__CCM_REF_EN_B		= IOMUX_PAD(0x05F8, 0x0228, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__PWM1_PWMO		= IOMUX_PAD(0x05F8, 0x0228, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__GPIO_1_9		= IOMUX_PAD(0x05F8, 0x0228, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_9__USDHC1_WP		= IOMUX_PAD(0x05F8, 0x0228, 6, 0x094C, 1, 0),
+-	MX6_PAD_GPIO_9__SRC_EARLY_RST		= IOMUX_PAD(0x05F8, 0x0228, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__ESAI1_HCKR		= IOMUX_PAD(0x05FC, 0x022C, 0, 0x0864, 1, 0),
+-	MX6_PAD_GPIO_3__OBSERVE_MUX_INT_OUT0	= IOMUX_PAD(0x05FC, 0x022C, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__I2C3_SCL		= IOMUX_PAD(0x05FC, 0x022C, 18, 0x08A8, 1, 0),
+-	MX6_PAD_GPIO_3__ANATOP_24M_OUT		= IOMUX_PAD(0x05FC, 0x022C, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__CCM_CLKO2		= IOMUX_PAD(0x05FC, 0x022C, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__GPIO_1_3		= IOMUX_PAD(0x05FC, 0x022C, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_3__USBOH3_USBH1_OC	= IOMUX_PAD(0x05FC, 0x022C, 6, 0x0948, 1, 0),
+-	MX6_PAD_GPIO_3__MLB_MLBCLK		= IOMUX_PAD(0x05FC, 0x022C, 7, 0x0900, 1, 0),
+-	MX6_PAD_GPIO_6__ESAI1_SCKT		= IOMUX_PAD(0x0600, 0x0230, 0, 0x0870, 1, 0),
+-	MX6_PAD_GPIO_6__OBSERVE_MUX_INT_OUT1	= IOMUX_PAD(0x0600, 0x0230, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__I2C3_SDA		= IOMUX_PAD(0x0600, 0x0230, 18, 0x08AC, 1, 0),
+-	MX6_PAD_GPIO_6__CCM_CCM_OUT_0		= IOMUX_PAD(0x0600, 0x0230, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__CSU_CSU_INT_DEB	= IOMUX_PAD(0x0600, 0x0230, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__GPIO_1_6		= IOMUX_PAD(0x0600, 0x0230, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__USDHC2_LCTL		= IOMUX_PAD(0x0600, 0x0230, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_6__MLB_MLBSIG		= IOMUX_PAD(0x0600, 0x0230, 7, 0x0908, 1, 0),
+-	MX6_PAD_GPIO_2__ESAI1_FST		= IOMUX_PAD(0x0604, 0x0234, 0, 0x0860, 1, 0),
+-	MX6_PAD_GPIO_2__OBSERVE_MUX_INT_OUT2	= IOMUX_PAD(0x0604, 0x0234, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__KPP_ROW_6		= IOMUX_PAD(0x0604, 0x0234, 2, 0x08F8, 1, 0),
+-	MX6_PAD_GPIO_2__CCM_CCM_OUT_1		= IOMUX_PAD(0x0604, 0x0234, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__CSU_CSU_ALARM_AUT_0	= IOMUX_PAD(0x0604, 0x0234, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__GPIO_1_2		= IOMUX_PAD(0x0604, 0x0234, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__USDHC2_WP		= IOMUX_PAD(0x0604, 0x0234, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_2__MLB_MLBDAT		= IOMUX_PAD(0x0604, 0x0234, 7, 0x0904, 1, 0),
+-	MX6_PAD_GPIO_4__ESAI1_HCKT		= IOMUX_PAD(0x0608, 0x0238, 0, 0x0868, 1, 0),
+-	MX6_PAD_GPIO_4__OBSERVE_MUX_INT_OUT3	= IOMUX_PAD(0x0608, 0x0238, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__KPP_COL_7		= IOMUX_PAD(0x0608, 0x0238, 2, 0x08F0, 1, 0),
+-	MX6_PAD_GPIO_4__CCM_CCM_OUT_2		= IOMUX_PAD(0x0608, 0x0238, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__CSU_CSU_ALARM_AUT_1	= IOMUX_PAD(0x0608, 0x0238, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__GPIO_1_4		= IOMUX_PAD(0x0608, 0x0238, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__USDHC2_CD		= IOMUX_PAD(0x0608, 0x0238, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_4__OCOTP_CRL_WRAR_FUSE_LA = IOMUX_PAD(0x0608, 0x0238, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__ESAI1_TX2_RX3		= IOMUX_PAD(0x060C, 0x023C, 0, 0x087C, 1, 0),
+-	MX6_PAD_GPIO_5__OBSERVE_MUX_INT_OUT4	= IOMUX_PAD(0x060C, 0x023C, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__KPP_ROW_7		= IOMUX_PAD(0x060C, 0x023C, 2, 0x08FC, 1, 0),
+-	MX6_PAD_GPIO_5__CCM_CLKO		= IOMUX_PAD(0x060C, 0x023C, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__CSU_CSU_ALARM_AUT_2	= IOMUX_PAD(0x060C, 0x023C, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__GPIO_1_5		= IOMUX_PAD(0x060C, 0x023C, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_5__I2C3_SCL		= IOMUX_PAD(0x060C, 0x023C, 22, 0x08A8, 2, 0),
+-	MX6_PAD_GPIO_5__CHEETAH_EVENTI		= IOMUX_PAD(0x060C, 0x023C, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__ESAI1_TX4_RX1		= IOMUX_PAD(0x0610, 0x0240, 0, 0x0884, 1, 0),
+-	MX6_PAD_GPIO_7__ECSPI5_RDY		= IOMUX_PAD(0x0610, 0x0240, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__EPIT1_EPITO		= IOMUX_PAD(0x0610, 0x0240, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__CAN1_TXCAN		= IOMUX_PAD(0x0610, 0x0240, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__UART2_TXD		= IOMUX_PAD(0x0610, 0x0240, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__UART2_TXD_RXD		= IOMUX_PAD(0x0610, 0x0240, 4, 0x0928, 2, 0),
+-	MX6_PAD_GPIO_7__GPIO_1_7		= IOMUX_PAD(0x0610, 0x0240, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__SPDIF_PLOCK		= IOMUX_PAD(0x0610, 0x0240, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_7__USBOH3_OTGUSB_HST_MODE	= IOMUX_PAD(0x0610, 0x0240, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__ESAI1_TX5_RX0		= IOMUX_PAD(0x0614, 0x0244, 0, 0x0888, 1, 0),
+-	MX6_PAD_GPIO_8__ANATOP_ANATOP_32K_OUT	= IOMUX_PAD(0x0614, 0x0244, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__EPIT2_EPITO		= IOMUX_PAD(0x0614, 0x0244, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__CAN1_RXCAN		= IOMUX_PAD(0x0614, 0x0244, 3, 0x07E4, 1, 0),
+-	MX6_PAD_GPIO_8__UART2_RXD		= IOMUX_PAD(0x0614, 0x0244, 4, 0x0928, 3, 0),
+-	MX6_PAD_GPIO_8__GPIO_1_8		= IOMUX_PAD(0x0614, 0x0244, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__SPDIF_SRCLK		= IOMUX_PAD(0x0614, 0x0244, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_8__USBOH3_OTG_PWRCTL_WAK	= IOMUX_PAD(0x0614, 0x0244, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__ESAI1_TX3_RX2		= IOMUX_PAD(0x0618, 0x0248, 0, 0x0880, 1, 0),
+-	MX6_PAD_GPIO_16__ENET_1588_EVENT2_IN	= IOMUX_PAD(0x0618, 0x0248, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__ENET_ETHERNET_REF_OUT = IOMUX_PAD(0x0618, 0x0248, 2, 0x083C, 1, 0),
+-	MX6_PAD_GPIO_16__USDHC1_LCTL		= IOMUX_PAD(0x0618, 0x0248, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__SPDIF_IN1		= IOMUX_PAD(0x0618, 0x0248, 4, 0x0914, 3, 0),
+-	MX6_PAD_GPIO_16__GPIO_7_11		= IOMUX_PAD(0x0618, 0x0248, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_16__I2C3_SDA		= IOMUX_PAD(0x0618, 0x0248, 22, 0x08AC, 2, 0),
+-	MX6_PAD_GPIO_16__SJC_DE_B		= IOMUX_PAD(0x0618, 0x0248, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__ESAI1_TX0		= IOMUX_PAD(0x061C, 0x024C, 0, 0x0874, 0, 0),
+-	MX6_PAD_GPIO_17__ENET_1588_EVENT3_IN	= IOMUX_PAD(0x061C, 0x024C, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__CCM_PMIC_RDY		= IOMUX_PAD(0x061C, 0x024C, 2, 0x07F0, 1, 0),
+-	MX6_PAD_GPIO_17__SDMA_SDMA_EXT_EVENT_0	= IOMUX_PAD(0x061C, 0x024C, 3, 0x090C, 1, 0),
+-	MX6_PAD_GPIO_17__SPDIF_OUT1		= IOMUX_PAD(0x061C, 0x024C, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__GPIO_7_12		= IOMUX_PAD(0x061C, 0x024C, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_17__SJC_JTAG_ACT		= IOMUX_PAD(0x061C, 0x024C, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__ESAI1_TX1		= IOMUX_PAD(0x0620, 0x0250, 0, 0x0878, 0, 0),
+-	MX6_PAD_GPIO_18__ENET_RX_CLK		= IOMUX_PAD(0x0620, 0x0250, 1, 0x0844, 1, 0),
+-	MX6_PAD_GPIO_18__USDHC3_VSELECT	= IOMUX_PAD(0x0620, 0x0250, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__SDMA_SDMA_EXT_EVENT_1 = IOMUX_PAD(0x0620, 0x0250, 3, 0x0910, 1, 0),
+-	MX6_PAD_GPIO_18__ASRC_ASRC_EXT_CLK	= IOMUX_PAD(0x0620, 0x0250, 4, 0x07B0, 2, 0),
+-	MX6_PAD_GPIO_18__GPIO_7_13		= IOMUX_PAD(0x0620, 0x0250, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__SNVS_HP_WRA_SNVS_VIO5 = IOMUX_PAD(0x0620, 0x0250, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_18__SRC_SYSTEM_RST	= IOMUX_PAD(0x0620, 0x0250, 7, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__KPP_COL_5		= IOMUX_PAD(0x0624, 0x0254, 0, 0x08E8, 1, 0),
+-	MX6_PAD_GPIO_19__ENET_1588_EVENT0_OUT	= IOMUX_PAD(0x0624, 0x0254, 1, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__SPDIF_OUT1		= IOMUX_PAD(0x0624, 0x0254, 2, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__CCM_CLKO		= IOMUX_PAD(0x0624, 0x0254, 3, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__ECSPI1_RDY		= IOMUX_PAD(0x0624, 0x0254, 4, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__GPIO_4_5		= IOMUX_PAD(0x0624, 0x0254, 5, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__ENET_TX_ER		= IOMUX_PAD(0x0624, 0x0254, 6, 0x0000, 0, 0),
+-	MX6_PAD_GPIO_19__SRC_INT_BOOT		= IOMUX_PAD(0x0624, 0x0254, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__IPU1_CSI0_PIXCLK	= IOMUX_PAD(0x0628, 0x0258, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__PCIE_CTRL_MUX_12	= IOMUX_PAD(0x0628, 0x0258, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__SDMA_DEBUG_PC_0	= IOMUX_PAD(0x0628, 0x0258, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__GPIO_5_18		= IOMUX_PAD(0x0628, 0x0258, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK___MMDC_DEBUG_29	= IOMUX_PAD(0x0628, 0x0258, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_PIXCLK__CHEETAH_EVENTO	= IOMUX_PAD(0x0628, 0x0258, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__IPU1_CSI0_HSYNC	= IOMUX_PAD(0x062C, 0x025C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__PCIE_CTRL_MUX_13	= IOMUX_PAD(0x062C, 0x025C, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__CCM_CLKO		= IOMUX_PAD(0x062C, 0x025C, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__SDMA_DEBUG_PC_1	= IOMUX_PAD(0x062C, 0x025C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__GPIO_5_19		= IOMUX_PAD(0x062C, 0x025C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__MMDC_MMDC_DEBUG_30	= IOMUX_PAD(0x062C, 0x025C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_MCLK__CHEETAH_TRCTL	= IOMUX_PAD(0x062C, 0x025C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__IPU1_CSI0_DA_EN	= IOMUX_PAD(0x0630, 0x0260, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__WEIM_WEIM_D_0	= IOMUX_PAD(0x0630, 0x0260, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__PCIE_CTRL_MUX_14	= IOMUX_PAD(0x0630, 0x0260, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__SDMA_DEBUG_PC_2	= IOMUX_PAD(0x0630, 0x0260, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__GPIO_5_20	= IOMUX_PAD(0x0630, 0x0260, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__MMDC_DEBUG_31	= IOMUX_PAD(0x0630, 0x0260, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DATA_EN__CHEETAH_TRCLK	= IOMUX_PAD(0x0630, 0x0260, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__IPU1_CSI0_VSYNC	= IOMUX_PAD(0x0634, 0x0264, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__WEIM_WEIM_D_1	= IOMUX_PAD(0x0634, 0x0264, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__PCIE_CTRL_MUX_15	= IOMUX_PAD(0x0634, 0x0264, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__SDMA_DEBUG_PC_3	= IOMUX_PAD(0x0634, 0x0264, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__GPIO_5_21		= IOMUX_PAD(0x0634, 0x0264, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__MMDC_DEBUG_32	= IOMUX_PAD(0x0634, 0x0264, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_VSYNC__CHEETAH_TRACE_0	= IOMUX_PAD(0x0634, 0x0264, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__IPU1_CSI0_D_4	= IOMUX_PAD(0x0638, 0x0268, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__WEIM_WEIM_D_2	= IOMUX_PAD(0x0638, 0x0268, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__ECSPI1_SCLK		= IOMUX_PAD(0x0638, 0x0268, 2, 0x07F4, 3, 0),
+-	MX6_PAD_CSI0_DAT4__KPP_COL_5		= IOMUX_PAD(0x0638, 0x0268, 3, 0x08E8, 2, 0),
+-	MX6_PAD_CSI0_DAT4__AUDMUX_AUD3_TXC	= IOMUX_PAD(0x0638, 0x0268, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__GPIO_5_22		= IOMUX_PAD(0x0638, 0x0268, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__MMDC_DEBUG_43	= IOMUX_PAD(0x0638, 0x0268, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT4__CHEETAH_TRACE_1	= IOMUX_PAD(0x0638, 0x0268, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__IPU1_CSI0_D_5	= IOMUX_PAD(0x063C, 0x026C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__WEIM_WEIM_D_3	= IOMUX_PAD(0x063C, 0x026C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__ECSPI1_MOSI		= IOMUX_PAD(0x063C, 0x026C, 2, 0x07FC, 3, 0),
+-	MX6_PAD_CSI0_DAT5__KPP_ROW_5		= IOMUX_PAD(0x063C, 0x026C, 3, 0x08F4, 1, 0),
+-	MX6_PAD_CSI0_DAT5__AUDMUX_AUD3_TXD	= IOMUX_PAD(0x063C, 0x026C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__GPIO_5_23		= IOMUX_PAD(0x063C, 0x026C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__MMDC_MMDC_DEBUG_44	= IOMUX_PAD(0x063C, 0x026C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT5__CHEETAH_TRACE_2	= IOMUX_PAD(0x063C, 0x026C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__IPU1_CSI0_D_6	= IOMUX_PAD(0x0640, 0x0270, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__WEIM_WEIM_D_4	= IOMUX_PAD(0x0640, 0x0270, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__ECSPI1_MISO		= IOMUX_PAD(0x0640, 0x0270, 2, 0x07F8, 3, 0),
+-	MX6_PAD_CSI0_DAT6__KPP_COL_6		= IOMUX_PAD(0x0640, 0x0270, 3, 0x08EC, 1, 0),
+-	MX6_PAD_CSI0_DAT6__AUDMUX_AUD3_TXFS	= IOMUX_PAD(0x0640, 0x0270, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__GPIO_5_24		= IOMUX_PAD(0x0640, 0x0270, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__MMDC_MMDC_DEBUG_45	= IOMUX_PAD(0x0640, 0x0270, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT6__CHEETAH_TRACE_3	= IOMUX_PAD(0x0640, 0x0270, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__IPU1_CSI0_D_7	= IOMUX_PAD(0x0644, 0x0274, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__WEIM_WEIM_D_5	= IOMUX_PAD(0x0644, 0x0274, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__ECSPI1_SS0		= IOMUX_PAD(0x0644, 0x0274, 2, 0x0800, 3, 0),
+-	MX6_PAD_CSI0_DAT7__KPP_ROW_6		= IOMUX_PAD(0x0644, 0x0274, 3, 0x08F8, 2, 0),
+-	MX6_PAD_CSI0_DAT7__AUDMUX_AUD3_RXD	= IOMUX_PAD(0x0644, 0x0274, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__GPIO_5_25		= IOMUX_PAD(0x0644, 0x0274, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__MMDC_MMDC_DEBUG_46	= IOMUX_PAD(0x0644, 0x0274, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT7__CHEETAH_TRACE_4	= IOMUX_PAD(0x0644, 0x0274, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__IPU1_CSI0_D_8	= IOMUX_PAD(0x0648, 0x0278, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__WEIM_WEIM_D_6	= IOMUX_PAD(0x0648, 0x0278, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__ECSPI2_SCLK		= IOMUX_PAD(0x0648, 0x0278, 2, 0x0810, 2, 0),
+-	MX6_PAD_CSI0_DAT8__KPP_COL_7		= IOMUX_PAD(0x0648, 0x0278, 3, 0x08F0, 2, 0),
+-	MX6_PAD_CSI0_DAT8__I2C1_SDA		= IOMUX_PAD(0x0648, 0x0278, 20, 0x089C, 1, 0),
+-	MX6_PAD_CSI0_DAT8__GPIO_5_26		= IOMUX_PAD(0x0648, 0x0278, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__MMDC_MMDC_DEBUG_47	= IOMUX_PAD(0x0648, 0x0278, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT8__CHEETAH_TRACE_5	= IOMUX_PAD(0x0648, 0x0278, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__IPU1_CSI0_D_9	= IOMUX_PAD(0x064C, 0x027C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__WEIM_WEIM_D_7	= IOMUX_PAD(0x064C, 0x027C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__ECSPI2_MOSI		= IOMUX_PAD(0x064C, 0x027C, 2, 0x0818, 2, 0),
+-	MX6_PAD_CSI0_DAT9__KPP_ROW_7		= IOMUX_PAD(0x064C, 0x027C, 3, 0x08FC, 2, 0),
+-	MX6_PAD_CSI0_DAT9__I2C1_SCL		= IOMUX_PAD(0x064C, 0x027C, 20, 0x0898, 1, 0),
+-	MX6_PAD_CSI0_DAT9__GPIO_5_27		= IOMUX_PAD(0x064C, 0x027C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__MMDC_MMDC_DEBUG_48	= IOMUX_PAD(0x064C, 0x027C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT9__CHEETAH_TRACE_6	= IOMUX_PAD(0x064C, 0x027C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__IPU1_CSI0_D_10	= IOMUX_PAD(0x0650, 0x0280, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__AUDMUX_AUD3_RXC	= IOMUX_PAD(0x0650, 0x0280, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__ECSPI2_MISO	= IOMUX_PAD(0x0650, 0x0280, 2, 0x0814, 2, 0),
+-	MX6_PAD_CSI0_DAT10__UART1_TXD		= IOMUX_PAD(0x0650, 0x0280, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__UART1_TXD_RXD	= IOMUX_PAD(0x0650, 0x0280, 3, 0x0920, 0, 0),
+-	MX6_PAD_CSI0_DAT10__SDMA_DEBUG_PC_4	= IOMUX_PAD(0x0650, 0x0280, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__GPIO_5_28		= IOMUX_PAD(0x0650, 0x0280, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__MMDC_MMDC_DEBUG_33	= IOMUX_PAD(0x0650, 0x0280, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT10__CHEETAH_TRACE_7	= IOMUX_PAD(0x0650, 0x0280, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__IPU1_CSI0_D_11	= IOMUX_PAD(0x0654, 0x0284, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__AUDMUX_AUD3_RXFS	= IOMUX_PAD(0x0654, 0x0284, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__ECSPI2_SS0		= IOMUX_PAD(0x0654, 0x0284, 2, 0x081C, 2, 0),
+-	MX6_PAD_CSI0_DAT11__UART1_RXD		= IOMUX_PAD(0x0654, 0x0284, 3, 0x0920, 1, 0),
+-	MX6_PAD_CSI0_DAT11__SDMA_DEBUG_PC_5	= IOMUX_PAD(0x0654, 0x0284, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__GPIO_5_29		= IOMUX_PAD(0x0654, 0x0284, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__MMDC_MMDC_DEBUG_34	= IOMUX_PAD(0x0654, 0x0284, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT11__CHEETAH_TRACE_8	= IOMUX_PAD(0x0654, 0x0284, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__IPU1_CSI0_D_12	= IOMUX_PAD(0x0658, 0x0288, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__WEIM_WEIM_D_8	= IOMUX_PAD(0x0658, 0x0288, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__PCIE_CTRL_MUX_16	= IOMUX_PAD(0x0658, 0x0288, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__UART4_TXD		= IOMUX_PAD(0x0658, 0x0288, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__UART4_TXD_RXD	= IOMUX_PAD(0x0658, 0x0288, 3, 0x0938, 2, 0),
+-	MX6_PAD_CSI0_DAT12__SDMA_DEBUG_PC_6	= IOMUX_PAD(0x0658, 0x0288, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__GPIO_5_30		= IOMUX_PAD(0x0658, 0x0288, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__MMDC_MMDC_DEBUG_35	= IOMUX_PAD(0x0658, 0x0288, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT12__CHEETAH_TRACE_9	= IOMUX_PAD(0x0658, 0x0288, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__IPU1_CSI0_D_13	= IOMUX_PAD(0x065C, 0x028C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__WEIM_WEIM_D_9	= IOMUX_PAD(0x065C, 0x028C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__PCIE_CTRL_MUX_17	= IOMUX_PAD(0x065C, 0x028C, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__UART4_RXD		= IOMUX_PAD(0x065C, 0x028C, 3, 0x0938, 3, 0),
+-	MX6_PAD_CSI0_DAT13__SDMA_DEBUG_PC_7	= IOMUX_PAD(0x065C, 0x028C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__GPIO_5_31		= IOMUX_PAD(0x065C, 0x028C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__MMDC_MMDC_DEBUG_36	= IOMUX_PAD(0x065C, 0x028C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT13__CHEETAH_TRACE_10	= IOMUX_PAD(0x065C, 0x028C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__IPU1_CSI0_D_14	= IOMUX_PAD(0x0660, 0x0290, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__WEIM_WEIM_D_10	= IOMUX_PAD(0x0660, 0x0290, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__PCIE_CTRL_MUX_18	= IOMUX_PAD(0x0660, 0x0290, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__UART5_TXD		= IOMUX_PAD(0x0660, 0x0290, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__UART5_TXD_RXD	= IOMUX_PAD(0x0660, 0x0290, 3, 0x0940, 2, 0),
+-	MX6_PAD_CSI0_DAT14__SDMA_DEBUG_PC_8	= IOMUX_PAD(0x0660, 0x0290, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__GPIO_6_0		= IOMUX_PAD(0x0660, 0x0290, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__MMDC_MMDC_DEBUG_37	= IOMUX_PAD(0x0660, 0x0290, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT14__CHEETAH_TRACE_11	= IOMUX_PAD(0x0660, 0x0290, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__IPU1_CSI0_D_15	= IOMUX_PAD(0x0664, 0x0294, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__WEIM_WEIM_D_11	= IOMUX_PAD(0x0664, 0x0294, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__PCIE_CTRL_MUX_19	= IOMUX_PAD(0x0664, 0x0294, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__UART5_RXD		= IOMUX_PAD(0x0664, 0x0294, 3, 0x0940, 3, 0),
+-	MX6_PAD_CSI0_DAT15__SDMA_DEBUG_PC_9	= IOMUX_PAD(0x0664, 0x0294, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__GPIO_6_1		= IOMUX_PAD(0x0664, 0x0294, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__MMDC_MMDC_DEBUG_38	= IOMUX_PAD(0x0664, 0x0294, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT15__CHEETAH_TRACE_12	= IOMUX_PAD(0x0664, 0x0294, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__IPU1_CSI0_D_16	= IOMUX_PAD(0x0668, 0x0298, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__WEIM_WEIM_D_12	= IOMUX_PAD(0x0668, 0x0298, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__PCIE_CTRL_MUX_20	= IOMUX_PAD(0x0668, 0x0298, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__UART4_CTS		= IOMUX_PAD(0x0668, 0x0298, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__UART4_RTS		= IOMUX_PAD(0x0668, 0x0298, 3, 0x0934, 0, 0),
+-	MX6_PAD_CSI0_DAT16__SDMA_DEBUG_PC_10	= IOMUX_PAD(0x0668, 0x0298, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__GPIO_6_2		= IOMUX_PAD(0x0668, 0x0298, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__MMDC_MMDC_DEBUG_39	= IOMUX_PAD(0x0668, 0x0298, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT16__CHEETAH_TRACE_13	= IOMUX_PAD(0x0668, 0x0298, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__IPU1_CSI0_D_17	= IOMUX_PAD(0x066C, 0x029C, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__WEIM_WEIM_D_13	= IOMUX_PAD(0x066C, 0x029C, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__PCIE_CTRL_MUX_21	= IOMUX_PAD(0x066C, 0x029C, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__UART4_CTS		= IOMUX_PAD(0x066C, 0x029C, 3, 0x0934, 1, 0),
+-	MX6_PAD_CSI0_DAT17__SDMA_DEBUG_PC_11	= IOMUX_PAD(0x066C, 0x029C, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__GPIO_6_3		= IOMUX_PAD(0x066C, 0x029C, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__MMDC_MMDC_DEBUG_40	= IOMUX_PAD(0x066C, 0x029C, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT17__CHEETAH_TRACE_14	= IOMUX_PAD(0x066C, 0x029C, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__IPU1_CSI0_D_18	= IOMUX_PAD(0x0670, 0x02A0, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__WEIM_WEIM_D_14	= IOMUX_PAD(0x0670, 0x02A0, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__PCIE_CTRL_MUX_22	= IOMUX_PAD(0x0670, 0x02A0, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__UART5_CTS		= IOMUX_PAD(0x0670, 0x02A0, 3, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__UART5_RTS		= IOMUX_PAD(0x0670, 0x02A0, 3, 0x093C, 2, 0),
+-	MX6_PAD_CSI0_DAT18__SDMA_DEBUG_PC_12	= IOMUX_PAD(0x0670, 0x02A0, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__GPIO_6_4		= IOMUX_PAD(0x0670, 0x02A0, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__MMDC_MMDC_DEBUG_41	= IOMUX_PAD(0x0670, 0x02A0, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT18__CHEETAH_TRACE_15	= IOMUX_PAD(0x0670, 0x02A0, 7, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__IPU1_CSI0_D_19	= IOMUX_PAD(0x0674, 0x02A4, 0, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__WEIM_WEIM_D_15	= IOMUX_PAD(0x0674, 0x02A4, 1, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__PCIE_CTRL_MUX_23	= IOMUX_PAD(0x0674, 0x02A4, 2, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__UART5_CTS		= IOMUX_PAD(0x0674, 0x02A4, 3, 0x093C, 3, 0),
+-	MX6_PAD_CSI0_DAT19__SDMA_DEBUG_PC_13	= IOMUX_PAD(0x0674, 0x02A4, 4, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__GPIO_6_5		= IOMUX_PAD(0x0674, 0x02A4, 5, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__MMDC_MMDC_DEBUG_42	= IOMUX_PAD(0x0674, 0x02A4, 6, 0x0000, 0, 0),
+-	MX6_PAD_CSI0_DAT19__ANATOP_TESTO_9	= IOMUX_PAD(0x0674, 0x02A4, 7, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TMS__SJC_TMS		= IOMUX_PAD(0x0678, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_MOD__SJC_MOD		= IOMUX_PAD(0x067C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TRSTB__SJC_TRSTB		= IOMUX_PAD(0x0680, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TDI__SJC_TDI		= IOMUX_PAD(0x0684, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TCK__SJC_TCK		= IOMUX_PAD(0x0688, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_JTAG_TDO__SJC_TDO		= IOMUX_PAD(0x068C, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX3_P__LDB_LVDS1_TX3	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX2_P__LDB_LVDS1_TX2	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_CLK_P__LDB_LVDS1_CLK	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX1_P__LDB_LVDS1_TX1	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS1_TX0_P__LDB_LVDS1_TX0	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX3_P__LDB_LVDS0_TX3	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_CLK_P__LDB_LVDS0_CLK	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX2_P__LDB_LVDS0_TX2	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX1_P__LDB_LVDS0_TX1	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_LVDS0_TX0_P__LDB_LVDS0_TX0	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_TAMPER__SNVS_LP_WRAP_SNVS_TD1	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_PMIC_ON_REQ__SNVS_LPWRAP_WKALM = IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_PMIC_STBY_REQ__CCM_PMIC_STBYRQ = IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_POR_B__SRC_POR_B		= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_BOOT_MODE1__SRC_BOOT_MODE_1	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_RESET_IN_B__SRC_RESET_B	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_BOOT_MODE0__SRC_BOOT_MODE_0	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_TEST_MODE__TCU_TEST_MODE	= IOMUX_PAD(NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__USDHC3_DAT7		= IOMUX_PAD(0x0690, 0x02A8, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__UART1_TXD		= IOMUX_PAD(0x0690, 0x02A8, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__UART1_TXD_RXD	= IOMUX_PAD(0x0690, 0x02A8, 1, 0x0920, 2, 0),
+-	MX6_PAD_SD3_DAT7__PCIE_CTRL_MUX_24	= IOMUX_PAD(0x0690, 0x02A8, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__USBOH3_UH3_DFD_OUT_0	= IOMUX_PAD(0x0690, 0x02A8, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__USBOH3_UH2_DFD_OUT_0	= IOMUX_PAD(0x0690, 0x02A8, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__GPIO_6_17		= IOMUX_PAD(0x0690, 0x02A8, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__MIPI_CORE_DPHY_IN_12	= IOMUX_PAD(0x0690, 0x02A8, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT7__USBPHY2_CLK20DIV	= IOMUX_PAD(0x0690, 0x02A8, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__USDHC3_DAT6		= IOMUX_PAD(0x0694, 0x02AC, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__UART1_RXD		= IOMUX_PAD(0x0694, 0x02AC, 1, 0x0920, 3, 0),
+-	MX6_PAD_SD3_DAT6__PCIE_CTRL_MUX_25	= IOMUX_PAD(0x0694, 0x02AC, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__USBOH3_UH3_DFD_OUT_1 = IOMUX_PAD(0x0694, 0x02AC, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__USBOH3_UH2_DFD_OUT_1 = IOMUX_PAD(0x0694, 0x02AC, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__GPIO_6_18		= IOMUX_PAD(0x0694, 0x02AC, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__MIPI_CORE_DPHY_IN_13	= IOMUX_PAD(0x0694, 0x02AC, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT6__ANATOP_TESTO_10	= IOMUX_PAD(0x0694, 0x02AC, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__USDHC3_DAT5		= IOMUX_PAD(0x0698, 0x02B0, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__UART2_TXD		= IOMUX_PAD(0x0698, 0x02B0, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__UART2_TXD_RXD	= IOMUX_PAD(0x0698, 0x02B0, 1, 0x0928, 4, 0),
+-	MX6_PAD_SD3_DAT5__PCIE_CTRL_MUX_26	= IOMUX_PAD(0x0698, 0x02B0, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__USBOH3_UH3_DFD_OUT_2	= IOMUX_PAD(0x0698, 0x02B0, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__USBOH3_UH2_DFD_OUT_2	= IOMUX_PAD(0x0698, 0x02B0, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__GPIO_7_0		= IOMUX_PAD(0x0698, 0x02B0, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__MIPI_CORE_DPHY_IN_14	= IOMUX_PAD(0x0698, 0x02B0, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT5__ANATOP_TESTO_11	= IOMUX_PAD(0x0698, 0x02B0, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__USDHC3_DAT4		= IOMUX_PAD(0x069C, 0x02B4, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__UART2_RXD		= IOMUX_PAD(0x069C, 0x02B4, 1, 0x0928, 5, 0),
+-	MX6_PAD_SD3_DAT4__PCIE_CTRL_MUX_27	= IOMUX_PAD(0x069C, 0x02B4, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__USBOH3_UH3_DFD_OUT_3	= IOMUX_PAD(0x069C, 0x02B4, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__USBOH3_UH2_DFD_OUT_3	= IOMUX_PAD(0x069C, 0x02B4, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__GPIO_7_1		= IOMUX_PAD(0x069C, 0x02B4, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__MIPI_CORE_DPHY_IN_15	= IOMUX_PAD(0x069C, 0x02B4, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT4__ANATOP_TESTO_12	= IOMUX_PAD(0x069C, 0x02B4, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__USDHC3_CMD		= IOMUX_PAD(0x06A0, 0x02B8, 16, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__UART2_CTS		= IOMUX_PAD(0x06A0, 0x02B8, 1, 0x0924, 2, 0),
+-	MX6_PAD_SD3_CMD__CAN1_TXCAN		= IOMUX_PAD(0x06A0, 0x02B8, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__USBOH3_UH3_DFD_OUT_4	= IOMUX_PAD(0x06A0, 0x02B8, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__USBOH3_UH2_DFD_OUT_4	= IOMUX_PAD(0x06A0, 0x02B8, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__GPIO_7_2		= IOMUX_PAD(0x06A0, 0x02B8, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__MIPI_CORE_DPHY_IN_16	= IOMUX_PAD(0x06A0, 0x02B8, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CMD__ANATOP_TESTO_13	= IOMUX_PAD(0x06A0, 0x02B8, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__USDHC3_CLK		= IOMUX_PAD(0x06A4, 0x02BC, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__UART2_CTS		= IOMUX_PAD(0x06A4, 0x02BC, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__UART2_RTS		= IOMUX_PAD(0x06A4, 0x02BC, 1, 0x0924, 3, 0),
+-	MX6_PAD_SD3_CLK__CAN1_RXCAN		= IOMUX_PAD(0x06A4, 0x02BC, 2, 0x07E4, 2, 0),
+-	MX6_PAD_SD3_CLK__USBOH3_UH3_DFD_OUT_5	= IOMUX_PAD(0x06A4, 0x02BC, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__USBOH3_UH2_DFD_OUT_5	= IOMUX_PAD(0x06A4, 0x02BC, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__GPIO_7_3		= IOMUX_PAD(0x06A4, 0x02BC, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__MIPI_CORE_DPHY_IN_17	= IOMUX_PAD(0x06A4, 0x02BC, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_CLK__ANATOP_TESTO_14	= IOMUX_PAD(0x06A4, 0x02BC, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__USDHC3_DAT0		= IOMUX_PAD(0x06A8, 0x02C0, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__UART1_CTS		= IOMUX_PAD(0x06A8, 0x02C0, 1, 0x091C, 2, 0),
+-	MX6_PAD_SD3_DAT0__CAN2_TXCAN		= IOMUX_PAD(0x06A8, 0x02C0, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__USBOH3_UH3_DFD_OUT_6	= IOMUX_PAD(0x06A8, 0x02C0, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__USBOH3_UH2_DFD_OUT_6	= IOMUX_PAD(0x06A8, 0x02C0, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__GPIO_7_4		= IOMUX_PAD(0x06A8, 0x02C0, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__MIPI_CORE_DPHY_IN_18	= IOMUX_PAD(0x06A8, 0x02C0, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT0__ANATOP_TESTO_15	= IOMUX_PAD(0x06A8, 0x02C0, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__USDHC3_DAT1		= IOMUX_PAD(0x06AC, 0x02C4, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__UART1_CTS		= IOMUX_PAD(0x06AC, 0x02C4, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__UART1_RTS		= IOMUX_PAD(0x06AC, 0x02C4, 1, 0x091C, 3, 0),
+-	MX6_PAD_SD3_DAT1__CAN2_RXCAN		= IOMUX_PAD(0x06AC, 0x02C4, 2, 0x07E8, 1, 0),
+-	MX6_PAD_SD3_DAT1__USBOH3_UH3_DFD_OUT_7	= IOMUX_PAD(0x06AC, 0x02C4, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__USBOH3_UH2_DFD_OUT_7	= IOMUX_PAD(0x06AC, 0x02C4, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__GPIO_7_5		= IOMUX_PAD(0x06AC, 0x02C4, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__MIPI_CORE_DPHY_IN_19 = IOMUX_PAD(0x06AC, 0x02C4, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT1__ANATOP_TESTI_0	= IOMUX_PAD(0x06AC, 0x02C4, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__USDHC3_DAT2		= IOMUX_PAD(0x06B0, 0x02C8, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__PCIE_CTRL_MUX_28	= IOMUX_PAD(0x06B0, 0x02C8, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__USBOH3_UH3_DFD_OUT_8	= IOMUX_PAD(0x06B0, 0x02C8, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__USBOH3_UH2_DFD_OUT_8	= IOMUX_PAD(0x06B0, 0x02C8, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__GPIO_7_6		= IOMUX_PAD(0x06B0, 0x02C8, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__MIPI_CORE_DPHY_IN_20	= IOMUX_PAD(0x06B0, 0x02C8, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT2__ANATOP_TESTI_1	= IOMUX_PAD(0x06B0, 0x02C8, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__USDHC3_DAT3		= IOMUX_PAD(0x06B4, 0x02CC, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__UART3_CTS		= IOMUX_PAD(0x06B4, 0x02CC, 1, 0x092C, 4, 0),
+-	MX6_PAD_SD3_DAT3__PCIE_CTRL_MUX_29	= IOMUX_PAD(0x06B4, 0x02CC, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__USBOH3_UH3_DFD_OUT_9	= IOMUX_PAD(0x06B4, 0x02CC, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__USBOH3_UH2_DFD_OUT_9	= IOMUX_PAD(0x06B4, 0x02CC, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__GPIO_7_7		= IOMUX_PAD(0x06B4, 0x02CC, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__MIPI_CORE_DPHY_IN_21	= IOMUX_PAD(0x06B4, 0x02CC, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_DAT3__ANATOP_TESTI_2	= IOMUX_PAD(0x06B4, 0x02CC, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__USDHC3_RST		= IOMUX_PAD(0x06B8, 0x02D0, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__UART3_CTS		= IOMUX_PAD(0x06B8, 0x02D0, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__UART3_RTS		= IOMUX_PAD(0x06B8, 0x02D0, 1, 0x092C, 5, 0),
+-	MX6_PAD_SD3_RST__PCIE_CTRL_MUX_30	= IOMUX_PAD(0x06B8, 0x02D0, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__USBOH3_UH3_DFD_OUT_10	= IOMUX_PAD(0x06B8, 0x02D0, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__USBOH3_UH2_DFD_OUT_10	= IOMUX_PAD(0x06B8, 0x02D0, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__GPIO_7_8		= IOMUX_PAD(0x06B8, 0x02D0, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__MIPI_CORE_DPHY_IN_22	= IOMUX_PAD(0x06B8, 0x02D0, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD3_RST__ANATOP_ANATOP_TESTI_3	= IOMUX_PAD(0x06B8, 0x02D0, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__RAWNAND_CLE		= IOMUX_PAD(0x06BC, 0x02D4, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__IPU2_SISG_4		= IOMUX_PAD(0x06BC, 0x02D4, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__PCIE_CTRL_MUX_31	= IOMUX_PAD(0x06BC, 0x02D4, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__USBOH3_UH3_DFD_OT11 = IOMUX_PAD(0x06BC, 0x02D4, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__USBOH3_UH2_DFD_OT11	= IOMUX_PAD(0x06BC, 0x02D4, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__GPIO_6_7		= IOMUX_PAD(0x06BC, 0x02D4, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__MIPI_CORE_DPHY_IN23 = IOMUX_PAD(0x06BC, 0x02D4, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CLE__TPSMP_HTRANS_0	= IOMUX_PAD(0x06BC, 0x02D4, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__RAWNAND_ALE		= IOMUX_PAD(0x06C0, 0x02D8, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__USDHC4_RST		= IOMUX_PAD(0x06C0, 0x02D8, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__PCIE_CTRL_MUX_0	= IOMUX_PAD(0x06C0, 0x02D8, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__USBOH3_UH3_DFD_OT12	= IOMUX_PAD(0x06C0, 0x02D8, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__USBOH3_UH2_DFD_OT12	= IOMUX_PAD(0x06C0, 0x02D8, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__GPIO_6_8		= IOMUX_PAD(0x06C0, 0x02D8, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__MIPI_CR_DPHY_IN_24	= IOMUX_PAD(0x06C0, 0x02D8, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_ALE__TPSMP_HTRANS_1	= IOMUX_PAD(0x06C0, 0x02D8, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__RAWNAND_RESETN	= IOMUX_PAD(0x06C4, 0x02DC, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__IPU2_SISG_5	= IOMUX_PAD(0x06C4, 0x02DC, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__PCIE_CTRL__MUX_1	= IOMUX_PAD(0x06C4, 0x02DC, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__USBOH3_UH3_DFDOT13 = IOMUX_PAD(0x06C4, 0x02DC, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__USBOH3_UH2_DFDOT13 = IOMUX_PAD(0x06C4, 0x02DC, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__GPIO_6_9		= IOMUX_PAD(0x06C4, 0x02DC, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__MIPI_CR_DPHY_OUT32	= IOMUX_PAD(0x06C4, 0x02DC, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_WP_B__PL301_PER1_HSIZE_0 = IOMUX_PAD(0x06C4, 0x02DC, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__RAWNAND_READY0	= IOMUX_PAD(0x06C8, 0x02E0, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__IPU2_DI0_PIN1	= IOMUX_PAD(0x06C8, 0x02E0, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__PCIE_CTRL_MUX_2	= IOMUX_PAD(0x06C8, 0x02E0, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__USBOH3_UH3_DFD_OT14 = IOMUX_PAD(0x06C8, 0x02E0, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__USBOH3_UH2_DFD_OT14 = IOMUX_PAD(0x06C8, 0x02E0, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__GPIO_6_10		= IOMUX_PAD(0x06C8, 0x02E0, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__MIPI_CR_DPHY_OUT_33	= IOMUX_PAD(0x06C8, 0x02E0, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_RB0__PL301_PER1_HSIZE_1	= IOMUX_PAD(0x06C8, 0x02E0, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__RAWNAND_CE0N	= IOMUX_PAD(0x06CC, 0x02E4, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__USBOH3_UH3_DFD_OT15 = IOMUX_PAD(0x06CC, 0x02E4, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__USBOH3_UH2_DFD_OT15 = IOMUX_PAD(0x06CC, 0x02E4, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__GPIO_6_11		= IOMUX_PAD(0x06CC, 0x02E4, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS0__PL301_PER1_HSIZE_2	= IOMUX_PAD(0x06CC, 0x02E4, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__RAWNAND_CE1N	= IOMUX_PAD(0x06D0, 0x02E8, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__USDHC4_VSELECT	= IOMUX_PAD(0x06D0, 0x02E8, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__USDHC3_VSELECT	= IOMUX_PAD(0x06D0, 0x02E8, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__PCIE_CTRL_MUX_3	= IOMUX_PAD(0x06D0, 0x02E8, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__GPIO_6_14		= IOMUX_PAD(0x06D0, 0x02E8, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS1__PL301_PER1_HRDYOUT	= IOMUX_PAD(0x06D0, 0x02E8, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__RAWNAND_CE2N	= IOMUX_PAD(0x06D4, 0x02EC, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__IPU1_SISG_0		= IOMUX_PAD(0x06D4, 0x02EC, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__ESAI1_TX0		= IOMUX_PAD(0x06D4, 0x02EC, 2, 0x0874, 1, 0),
+-	MX6_PAD_NANDF_CS2__WEIM_WEIM_CRE	= IOMUX_PAD(0x06D4, 0x02EC, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__CCM_CLKO2		= IOMUX_PAD(0x06D4, 0x02EC, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__GPIO_6_15		= IOMUX_PAD(0x06D4, 0x02EC, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS2__IPU2_SISG_0		= IOMUX_PAD(0x06D4, 0x02EC, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__RAWNAND_CE3N	= IOMUX_PAD(0x06D8, 0x02F0, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__IPU1_SISG_1		= IOMUX_PAD(0x06D8, 0x02F0, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__ESAI1_TX1		= IOMUX_PAD(0x06D8, 0x02F0, 2, 0x0878, 1, 0),
+-	MX6_PAD_NANDF_CS3__WEIM_WEIM_A_26	= IOMUX_PAD(0x06D8, 0x02F0, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__PCIE_CTRL_MUX_4	= IOMUX_PAD(0x06D8, 0x02F0, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__GPIO_6_16		= IOMUX_PAD(0x06D8, 0x02F0, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__IPU2_SISG_1		= IOMUX_PAD(0x06D8, 0x02F0, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_CS3__TPSMP_CLK		= IOMUX_PAD(0x06D8, 0x02F0, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__USDHC4_CMD		= IOMUX_PAD(0x06DC, 0x02F4, 16, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__RAWNAND_RDN		= IOMUX_PAD(0x06DC, 0x02F4, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__UART3_TXD		= IOMUX_PAD(0x06DC, 0x02F4, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__UART3_TXD_RXD		= IOMUX_PAD(0x06DC, 0x02F4, 2, 0x0930, 2, 0),
+-	MX6_PAD_SD4_CMD__PCIE_CTRL_MUX_5	= IOMUX_PAD(0x06DC, 0x02F4, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__GPIO_7_9		= IOMUX_PAD(0x06DC, 0x02F4, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CMD__TPSMP_HDATA_DIR	= IOMUX_PAD(0x06DC, 0x02F4, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__USDHC4_CLK		= IOMUX_PAD(0x06E0, 0x02F8, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__RAWNAND_WRN		= IOMUX_PAD(0x06E0, 0x02F8, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__UART3_RXD		= IOMUX_PAD(0x06E0, 0x02F8, 2, 0x0930, 3, 0),
+-	MX6_PAD_SD4_CLK__PCIE_CTRL_MUX_6	= IOMUX_PAD(0x06E0, 0x02F8, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_CLK__GPIO_7_10		= IOMUX_PAD(0x06E0, 0x02F8, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__RAWNAND_D0		= IOMUX_PAD(0x06E4, 0x02FC, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__USDHC1_DAT4		= IOMUX_PAD(0x06E4, 0x02FC, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__GPU3D_GPU_DBG_OUT_0	= IOMUX_PAD(0x06E4, 0x02FC, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__USBOH3_UH2_DFD_OUT16	= IOMUX_PAD(0x06E4, 0x02FC, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__USBOH3_UH3_DFD_OUT16	= IOMUX_PAD(0x06E4, 0x02FC, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__GPIO_2_0		= IOMUX_PAD(0x06E4, 0x02FC, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__IPU1_IPU_DIAG_BUS_0	= IOMUX_PAD(0x06E4, 0x02FC, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D0__IPU2_IPU_DIAG_BUS_0	= IOMUX_PAD(0x06E4, 0x02FC, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__RAWNAND_D1		= IOMUX_PAD(0x06E8, 0x0300, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__USDHC1_DAT5		= IOMUX_PAD(0x06E8, 0x0300, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__GPU3D_GPU_DEBUG_OUT1	= IOMUX_PAD(0x06E8, 0x0300, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__USBOH3_UH2_DFD_OUT17	= IOMUX_PAD(0x06E8, 0x0300, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__USBOH3_UH3_DFD_OUT17	= IOMUX_PAD(0x06E8, 0x0300, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__GPIO_2_1		= IOMUX_PAD(0x06E8, 0x0300, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__IPU1_IPU_DIAG_BUS_1	= IOMUX_PAD(0x06E8, 0x0300, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D1__IPU2_IPU_DIAG_BUS_1	= IOMUX_PAD(0x06E8, 0x0300, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__RAWNAND_D2		= IOMUX_PAD(0x06EC, 0x0304, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__USDHC1_DAT6		= IOMUX_PAD(0x06EC, 0x0304, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__GPU3D_GPU_DBG_OUT_2	= IOMUX_PAD(0x06EC, 0x0304, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__USBOH3_UH2_DFD_OUT18	= IOMUX_PAD(0x06EC, 0x0304, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__USBOH3_UH3_DFD_OUT18	= IOMUX_PAD(0x06EC, 0x0304, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__GPIO_2_2		= IOMUX_PAD(0x06EC, 0x0304, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__IPU1_IPU_DIAG_BUS_2	= IOMUX_PAD(0x06EC, 0x0304, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D2__IPU2_IPU_DIAG_BUS_2	= IOMUX_PAD(0x06EC, 0x0304, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__RAWNAND_D3		= IOMUX_PAD(0x06F0, 0x0308, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__USDHC1_DAT7		= IOMUX_PAD(0x06F0, 0x0308, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__GPU3D_GPU_DBG_OUT_3	= IOMUX_PAD(0x06F0, 0x0308, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__USBOH3_UH2_DFD_OUT19	= IOMUX_PAD(0x06F0, 0x0308, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__USBOH3_UH3_DFD_OUT19	= IOMUX_PAD(0x06F0, 0x0308, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__GPIO_2_3		= IOMUX_PAD(0x06F0, 0x0308, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__IPU1_IPU_DIAG_BUS_3	= IOMUX_PAD(0x06F0, 0x0308, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D3__IPU2_IPU_DIAG_BUS_3	= IOMUX_PAD(0x06F0, 0x0308, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__RAWNAND_D4		= IOMUX_PAD(0x06F4, 0x030C, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__USDHC2_DAT4		= IOMUX_PAD(0x06F4, 0x030C, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__GPU3D_GPU_DBG_OUT_4	= IOMUX_PAD(0x06F4, 0x030C, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__USBOH3_UH2_DFD_OUT20	= IOMUX_PAD(0x06F4, 0x030C, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__USBOH3_UH3_DFD_OUT20	= IOMUX_PAD(0x06F4, 0x030C, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__GPIO_2_4		= IOMUX_PAD(0x06F4, 0x030C, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__IPU1_IPU_DIAG_BUS_4	= IOMUX_PAD(0x06F4, 0x030C, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D4__IPU2_IPU_DIAG_BUS_4	= IOMUX_PAD(0x06F4, 0x030C, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__RAWNAND_D5		= IOMUX_PAD(0x06F8, 0x0310, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__USDHC2_DAT5		= IOMUX_PAD(0x06F8, 0x0310, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__GPU3D_GPU_DBG_OUT_5	= IOMUX_PAD(0x06F8, 0x0310, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__USBOH3_UH2_DFD_OUT21	= IOMUX_PAD(0x06F8, 0x0310, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__USBOH3_UH3_DFD_OUT21	= IOMUX_PAD(0x06F8, 0x0310, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__GPIO_2_5		= IOMUX_PAD(0x06F8, 0x0310, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__IPU1_IPU_DIAG_BUS_5	= IOMUX_PAD(0x06F8, 0x0310, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D5__IPU2_IPU_DIAG_BUS_5	= IOMUX_PAD(0x06F8, 0x0310, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__RAWNAND_D6		= IOMUX_PAD(0x06FC, 0x0314, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__USDHC2_DAT6		= IOMUX_PAD(0x06FC, 0x0314, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__GPU3D_GPU_DBG_OUT_6	= IOMUX_PAD(0x06FC, 0x0314, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__USBOH3_UH2_DFD_OUT22	= IOMUX_PAD(0x06FC, 0x0314, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__USBOH3_UH3_DFD_OUT22	= IOMUX_PAD(0x06FC, 0x0314, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__GPIO_2_6		= IOMUX_PAD(0x06FC, 0x0314, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__IPU1_IPU_DIAG_BUS_6	= IOMUX_PAD(0x06FC, 0x0314, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D6__IPU2_IPU_DIAG_BUS_6	= IOMUX_PAD(0x06FC, 0x0314, 7, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__RAWNAND_D7		= IOMUX_PAD(0x0700, 0x0318, 0, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__USDHC2_DAT7		= IOMUX_PAD(0x0700, 0x0318, 1, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__GPU3D_GPU_DBG_OUT_7	= IOMUX_PAD(0x0700, 0x0318, 2, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__USBOH3_UH2_DFD_OUT23	= IOMUX_PAD(0x0700, 0x0318, 3, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__USBOH3_UH3_DFD_OUT23	= IOMUX_PAD(0x0700, 0x0318, 4, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__GPIO_2_7		= IOMUX_PAD(0x0700, 0x0318, 5, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__IPU1_IPU_DIAG_BUS_7	= IOMUX_PAD(0x0700, 0x0318, 6, 0x0000, 0, 0),
+-	MX6_PAD_NANDF_D7__IPU2_IPU_DIAG_BUS_7	= IOMUX_PAD(0x0700, 0x0318, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__RAWNAND_D8		= IOMUX_PAD(0x0704, 0x031C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__USDHC4_DAT0		= IOMUX_PAD(0x0704, 0x031C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__RAWNAND_DQS		= IOMUX_PAD(0x0704, 0x031C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__USBOH3_UH2_DFD_OUT24	= IOMUX_PAD(0x0704, 0x031C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__USBOH3_UH3_DFD_OUT24	= IOMUX_PAD(0x0704, 0x031C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__GPIO_2_8		= IOMUX_PAD(0x0704, 0x031C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__IPU1_IPU_DIAG_BUS_8	= IOMUX_PAD(0x0704, 0x031C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT0__IPU2_IPU_DIAG_BUS_8	= IOMUX_PAD(0x0704, 0x031C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__RAWNAND_D9		= IOMUX_PAD(0x0708, 0x0320, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__USDHC4_DAT1		= IOMUX_PAD(0x0708, 0x0320, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__PWM3_PWMO		= IOMUX_PAD(0x0708, 0x0320, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__USBOH3_UH2_DFD_OUT25	= IOMUX_PAD(0x0708, 0x0320, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__USBOH3_UH3_DFD_OUT25	= IOMUX_PAD(0x0708, 0x0320, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__GPIO_2_9		= IOMUX_PAD(0x0708, 0x0320, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__IPU1_IPU_DIAG_BUS_9	= IOMUX_PAD(0x0708, 0x0320, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT1__IPU2_IPU_DIAG_BUS_9	= IOMUX_PAD(0x0708, 0x0320, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__RAWNAND_D10		= IOMUX_PAD(0x070C, 0x0324, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__USDHC4_DAT2		= IOMUX_PAD(0x070C, 0x0324, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__PWM4_PWMO		= IOMUX_PAD(0x070C, 0x0324, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__USBOH3_UH2_DFD_OUT26	= IOMUX_PAD(0x070C, 0x0324, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__USBOH3_UH3_DFD_OUT26	= IOMUX_PAD(0x070C, 0x0324, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__GPIO_2_10		= IOMUX_PAD(0x070C, 0x0324, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__IPU1_IPU_DIAG_BUS_10	= IOMUX_PAD(0x070C, 0x0324, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT2__IPU2_IPU_DIAG_BUS_10	= IOMUX_PAD(0x070C, 0x0324, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__RAWNAND_D11		= IOMUX_PAD(0x0710, 0x0328, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__USDHC4_DAT3		= IOMUX_PAD(0x0710, 0x0328, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__USBOH3_UH2_DFD_OUT27	= IOMUX_PAD(0x0710, 0x0328, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__USBOH3_UH3_DFD_OUT27	= IOMUX_PAD(0x0710, 0x0328, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__GPIO_2_11		= IOMUX_PAD(0x0710, 0x0328, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__IPU1_IPU_DIAG_BUS_11	= IOMUX_PAD(0x0710, 0x0328, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT3__IPU2_IPU_DIAG_BUS_11	= IOMUX_PAD(0x0710, 0x0328, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__RAWNAND_D12		= IOMUX_PAD(0x0714, 0x032C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__USDHC4_DAT4		= IOMUX_PAD(0x0714, 0x032C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__UART2_RXD		= IOMUX_PAD(0x0714, 0x032C, 2, 0x0928, 6, 0),
+-	MX6_PAD_SD4_DAT4__USBOH3_UH2_DFD_OUT28	= IOMUX_PAD(0x0714, 0x032C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__USBOH3_UH3_DFD_OUT28	= IOMUX_PAD(0x0714, 0x032C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__GPIO_2_12		= IOMUX_PAD(0x0714, 0x032C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__IPU1_IPU_DIAG_BUS_12	= IOMUX_PAD(0x0714, 0x032C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT4__IPU2_IPU_DIAG_BUS_12	= IOMUX_PAD(0x0714, 0x032C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__RAWNAND_D13		= IOMUX_PAD(0x0718, 0x0330, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__USDHC4_DAT5		= IOMUX_PAD(0x0718, 0x0330, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__UART2_CTS		= IOMUX_PAD(0x0718, 0x0330, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__UART2_RTS		= IOMUX_PAD(0x0718, 0x0330, 2, 0x0924, 4, 0),
+-	MX6_PAD_SD4_DAT5__USBOH3_UH2_DFD_OUT29	= IOMUX_PAD(0x0718, 0x0330, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__USBOH3_UH3_DFD_OUT29	= IOMUX_PAD(0x0718, 0x0330, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__GPIO_2_13		= IOMUX_PAD(0x0718, 0x0330, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__IPU1_IPU_DIAG_BUS_13	= IOMUX_PAD(0x0718, 0x0330, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT5__IPU2_IPU_DIAG_BUS_13	= IOMUX_PAD(0x0718, 0x0330, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__RAWNAND_D14		= IOMUX_PAD(0x071C, 0x0334, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__USDHC4_DAT6		= IOMUX_PAD(0x071C, 0x0334, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__UART2_CTS		= IOMUX_PAD(0x071C, 0x0334, 2, 0x0924, 5, 0),
+-	MX6_PAD_SD4_DAT6__USBOH3_UH2_DFD_OUT30	= IOMUX_PAD(0x071C, 0x0334, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__USBOH3_UH3_DFD_OUT30	= IOMUX_PAD(0x071C, 0x0334, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__GPIO_2_14		= IOMUX_PAD(0x071C, 0x0334, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__IPU1_IPU_DIAG_BUS_14	= IOMUX_PAD(0x071C, 0x0334, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT6__IPU2_IPU_DIAG_BUS_14	= IOMUX_PAD(0x071C, 0x0334, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__RAWNAND_D15		= IOMUX_PAD(0x0720, 0x0338, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__USDHC4_DAT7		= IOMUX_PAD(0x0720, 0x0338, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__UART2_TXD		= IOMUX_PAD(0x0720, 0x0338, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__UART2_TXD_RXD	= IOMUX_PAD(0x0720, 0x0338, 2, 0x0928, 7, 0),
+-	MX6_PAD_SD4_DAT7__USBOH3_UH2_DFD_OUT31 = IOMUX_PAD(0x0720, 0x0338, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__USBOH3_UH3_DFD_OUT31 = IOMUX_PAD(0x0720, 0x0338, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__GPIO_2_15		= IOMUX_PAD(0x0720, 0x0338, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__IPU1_IPU_DIAG_BUS_15	= IOMUX_PAD(0x0720, 0x0338, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD4_DAT7__IPU2_IPU_DIAG_BUS_15	= IOMUX_PAD(0x0720, 0x0338, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__USDHC1_DAT1		= IOMUX_PAD(0x0724, 0x033C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__ECSPI5_SS0		= IOMUX_PAD(0x0724, 0x033C, 1, 0x0834, 1, 0),
+-	MX6_PAD_SD1_DAT1__PWM3_PWMO		= IOMUX_PAD(0x0724, 0x033C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__GPT_CAPIN2		= IOMUX_PAD(0x0724, 0x033C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__PCIE_CTRL_MUX_7	= IOMUX_PAD(0x0724, 0x033C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__GPIO_1_17		= IOMUX_PAD(0x0724, 0x033C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__HDMI_TX_OPHYDTB_0	= IOMUX_PAD(0x0724, 0x033C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT1__ANATOP_TESTO_8	= IOMUX_PAD(0x0724, 0x033C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__USDHC1_DAT0		= IOMUX_PAD(0x0728, 0x0340, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__ECSPI5_MISO		= IOMUX_PAD(0x0728, 0x0340, 1, 0x082C, 1, 0),
+-	MX6_PAD_SD1_DAT0__CAAM_WRAP_RNG_OSCOBS	= IOMUX_PAD(0x0728, 0x0340, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__GPT_CAPIN1		= IOMUX_PAD(0x0728, 0x0340, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__PCIE_CTRL_MUX_8	= IOMUX_PAD(0x0728, 0x0340, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__GPIO_1_16		= IOMUX_PAD(0x0728, 0x0340, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__HDMI_TX_OPHYDTB_1	= IOMUX_PAD(0x0728, 0x0340, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT0__ANATOP_TESTO_7	= IOMUX_PAD(0x0728, 0x0340, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__USDHC1_DAT3		= IOMUX_PAD(0x072C, 0x0344, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__ECSPI5_SS2		= IOMUX_PAD(0x072C, 0x0344, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__GPT_CMPOUT3		= IOMUX_PAD(0x072C, 0x0344, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__PWM1_PWMO		= IOMUX_PAD(0x072C, 0x0344, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__WDOG2_WDOG_B		= IOMUX_PAD(0x072C, 0x0344, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__GPIO_1_21		= IOMUX_PAD(0x072C, 0x0344, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__WDOG2_WDOG_RST_B_DEB	= IOMUX_PAD(0x072C, 0x0344, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT3__ANATOP_TESTO_6	= IOMUX_PAD(0x072C, 0x0344, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__USDHC1_CMD		= IOMUX_PAD(0x0730, 0x0348, 16, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__ECSPI5_MOSI		= IOMUX_PAD(0x0730, 0x0348, 1, 0x0830, 0, 0),
+-	MX6_PAD_SD1_CMD__PWM4_PWMO		= IOMUX_PAD(0x0730, 0x0348, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__GPT_CMPOUT1		= IOMUX_PAD(0x0730, 0x0348, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__GPIO_1_18		= IOMUX_PAD(0x0730, 0x0348, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CMD__ANATOP_TESTO_5	= IOMUX_PAD(0x0730, 0x0348, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__USDHC1_DAT2		= IOMUX_PAD(0x0734, 0x034C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__ECSPI5_SS1		= IOMUX_PAD(0x0734, 0x034C, 1, 0x0838, 1, 0),
+-	MX6_PAD_SD1_DAT2__GPT_CMPOUT2		= IOMUX_PAD(0x0734, 0x034C, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__PWM2_PWMO		= IOMUX_PAD(0x0734, 0x034C, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__WDOG1_WDOG_B		= IOMUX_PAD(0x0734, 0x034C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__GPIO_1_19		= IOMUX_PAD(0x0734, 0x034C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__WDOG1_WDOG_RST_B_DEB	= IOMUX_PAD(0x0734, 0x034C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_DAT2__ANATOP_TESTO_4	= IOMUX_PAD(0x0734, 0x034C, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__USDHC1_CLK		= IOMUX_PAD(0x0738, 0x0350, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__ECSPI5_SCLK		= IOMUX_PAD(0x0738, 0x0350, 1, 0x0828, 0, 0),
+-	MX6_PAD_SD1_CLK__OSC32K_32K_OUT	= IOMUX_PAD(0x0738, 0x0350, 2, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__GPT_CLKIN		= IOMUX_PAD(0x0738, 0x0350, 3, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__GPIO_1_20		= IOMUX_PAD(0x0738, 0x0350, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__PHY_DTB_0		= IOMUX_PAD(0x0738, 0x0350, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD1_CLK__SATA_PHY_DTB_0	= IOMUX_PAD(0x0738, 0x0350, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__USDHC2_CLK		= IOMUX_PAD(0x073C, 0x0354, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__ECSPI5_SCLK		= IOMUX_PAD(0x073C, 0x0354, 1, 0x0828, 1, 0),
+-	MX6_PAD_SD2_CLK__KPP_COL_5		= IOMUX_PAD(0x073C, 0x0354, 2, 0x08E8, 3, 0),
+-	MX6_PAD_SD2_CLK__AUDMUX_AUD4_RXFS	= IOMUX_PAD(0x073C, 0x0354, 3, 0x07C0, 1, 0),
+-	MX6_PAD_SD2_CLK__PCIE_CTRL_MUX_9	= IOMUX_PAD(0x073C, 0x0354, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__GPIO_1_10		= IOMUX_PAD(0x073C, 0x0354, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__PHY_DTB_1		= IOMUX_PAD(0x073C, 0x0354, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CLK__SATA_PHY_DTB_1	= IOMUX_PAD(0x073C, 0x0354, 7, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CMD__USDHC2_CMD		= IOMUX_PAD(0x0740, 0x0358, 16, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CMD__ECSPI5_MOSI		= IOMUX_PAD(0x0740, 0x0358, 1, 0x0830, 1, 0),
+-	MX6_PAD_SD2_CMD__KPP_ROW_5		= IOMUX_PAD(0x0740, 0x0358, 2, 0x08F4, 2, 0),
+-	MX6_PAD_SD2_CMD__AUDMUX_AUD4_RXC	= IOMUX_PAD(0x0740, 0x0358, 3, 0x07BC, 1, 0),
+-	MX6_PAD_SD2_CMD__PCIE_CTRL_MUX_10	= IOMUX_PAD(0x0740, 0x0358, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD2_CMD__GPIO_1_11		= IOMUX_PAD(0x0740, 0x0358, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__USDHC2_DAT3		= IOMUX_PAD(0x0744, 0x035C, 0, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__ECSPI5_SS3		= IOMUX_PAD(0x0744, 0x035C, 1, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__KPP_COL_6		= IOMUX_PAD(0x0744, 0x035C, 2, 0x08EC, 2, 0),
+-	MX6_PAD_SD2_DAT3__AUDMUX_AUD4_TXC	= IOMUX_PAD(0x0744, 0x035C, 3, 0x07C4, 1, 0),
+-	MX6_PAD_SD2_DAT3__PCIE_CTRL_MUX_11	= IOMUX_PAD(0x0744, 0x035C, 4, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__GPIO_1_12		= IOMUX_PAD(0x0744, 0x035C, 5, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__SJC_DONE		= IOMUX_PAD(0x0744, 0x035C, 6, 0x0000, 0, 0),
+-	MX6_PAD_SD2_DAT3__ANATOP_TESTO_3	= IOMUX_PAD(0x0744, 0x035C, 7, 0x0000, 0, 0),
+-};
++MX6_PAD_DECL(SD2_DAT1__USDHC2_DAT1		, 0x0360, 0x004C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__ECSPI5_SS0		, 0x0360, 0x004C, 1, 0x0834, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__WEIM_WEIM_CS_2	, 0x0360, 0x004C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__AUDMUX_AUD4_TXFS	, 0x0360, 0x004C, 3, 0x07C8, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__KPP_COL_7		, 0x0360, 0x004C, 4, 0x08F0, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__GPIO_1_14		, 0x0360, 0x004C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__CCM_WAIT		, 0x0360, 0x004C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT1__ANATOP_TESTO_0	, 0x0360, 0x004C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__USDHC2_DAT2		, 0x0364, 0x0050, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__ECSPI5_SS1		, 0x0364, 0x0050, 1, 0x0838, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__WEIM_WEIM_CS_3	, 0x0364, 0x0050, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__AUDMUX_AUD4_TXD	, 0x0364, 0x0050, 3, 0x07B8, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__KPP_ROW_6		, 0x0364, 0x0050, 4, 0x08F8, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__GPIO_1_13		, 0x0364, 0x0050, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__CCM_STOP		, 0x0364, 0x0050, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT2__ANATOP_TESTO_1	, 0x0364, 0x0050, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__USDHC2_DAT0		, 0x0368, 0x0054, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__ECSPI5_MISO		, 0x0368, 0x0054, 1, 0x082C, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__AUDMUX_AUD4_RXD	, 0x0368, 0x0054, 3, 0x07B4, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__KPP_ROW_7		, 0x0368, 0x0054, 4, 0x08FC, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__GPIO_1_15		, 0x0368, 0x0054, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__DCIC2_DCIC_OUT	, 0x0368, 0x0054, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT0__TESTO_2		, 0x0368, 0x0054, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__USBOH3_H2_DATA	, 0x036C, 0x0058, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__ENET_RGMII_TXC	, 0x036C, 0x0058, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__SPDIF_SPDIF_EXTCLK	, 0x036C, 0x0058, 2, 0x0918, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__GPIO_6_19		, 0x036C, 0x0058, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__MIPI_CORE_DPHY_IN_0 , 0x036C, 0x0058, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TXC__ANATOP_24M_OUT	, 0x036C, 0x0058, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__MIPI_HSI_CRL_TX_RDY , 0x0370, 0x005C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__ENET_RGMII_TD0	, 0x0370, 0x005C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__GPIO_6_20		, 0x0370, 0x005C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD0__MIPI_CORE_DPHY_IN_1 , 0x0370, 0x005C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__MIPI_HSI_CRL_RX_FLG , 0x0374, 0x0060, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__ENET_RGMII_TD1	, 0x0374, 0x0060, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__GPIO_6_21		, 0x0374, 0x0060, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__MIPI_CORE_DPHY_IN_2 , 0x0374, 0x0060, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD1__CCM_PLL3_BYP	, 0x0374, 0x0060, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__MIPI_HSI_CRL_RX_DTA , 0x0378, 0x0064, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__ENET_RGMII_TD2	, 0x0378, 0x0064, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__GPIO_6_22		, 0x0378, 0x0064, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__MIPI_CORE_DPHY_IN_3 , 0x0378, 0x0064, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD2__CCM_PLL2_BYP	, 0x0378, 0x0064, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__MIPI_HSI_CRL_RX_WAK , 0x037C, 0x0068, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__ENET_RGMII_TD3	, 0x037C, 0x0068, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__GPIO_6_23		, 0x037C, 0x0068, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TD3__MIPI_CORE_DPHY_IN_4 , 0x037C, 0x0068, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__USBOH3_H3_DATA   , 0x0380, 0x006C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__RGMII_RX_CTL	, 0x0380, 0x006C, 1, 0x0858, 0, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__GPIO_6_24	, 0x0380, 0x006C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RX_CTL__MIPI_DPHY_IN_5	, 0x0380, 0x006C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD0__MIPI_HSI_CRL_RX_RDY , 0x0384, 0x0070, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD0__ENET_RGMII_RD0      , 0x0384, 0x0070, 1, 0x0848, 0, 0)
++MX6_PAD_DECL(RGMII_RD0__GPIO_6_25		, 0x0384, 0x0070, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD0__MIPI_CORE_DPHY_IN_6 , 0x0384, 0x0070, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__USBOH3_H2_STROBE , 0x0388, 0x0074, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__RGMII_TX_CTL	, 0x0388, 0x0074, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__GPIO_6_26	, 0x0388, 0x0074, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__CORE_DPHY_IN_7	, 0x0388, 0x0074, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_TX_CTL__ANATOP_REF_OUT	, 0x0388, 0x0074, 7, 0x083C, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__MIPI_HSI_CTRL_TX_FL , 0x038C, 0x0078, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__ENET_RGMII_RD1	, 0x038C, 0x0078, 1, 0x084C, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__GPIO_6_27		, 0x038C, 0x0078, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__CORE_DPHY_TEST_IN_8 , 0x038C, 0x0078, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD1__SJC_FAIL		, 0x038C, 0x0078, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD2__MIPI_HSI_CRL_TX_DTA , 0x0390, 0x007C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD2__ENET_RGMII_RD2	, 0x0390, 0x007C, 1, 0x0850, 0, 0)
++MX6_PAD_DECL(RGMII_RD2__GPIO_6_28		, 0x0390, 0x007C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD2__MIPI_CORE_DPHY_IN_9 , 0x0390, 0x007C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD3__MIPI_HSI_CRL_TX_WAK , 0x0394, 0x0080, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD3__ENET_RGMII_RD3	, 0x0394, 0x0080, 1, 0x0854, 0, 0)
++MX6_PAD_DECL(RGMII_RD3__GPIO_6_29		, 0x0394, 0x0080, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RD3__MIPI_CORE_DPHY_IN10 , 0x0394, 0x0080, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RXC__USBOH3_H3_STROBE    , 0x0398, 0x0084, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RXC__ENET_RGMII_RXC	, 0x0398, 0x0084, 1, 0x0844, 0, 0)
++MX6_PAD_DECL(RGMII_RXC__GPIO_6_30		, 0x0398, 0x0084, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(RGMII_RXC__MIPI_CORE_DPHY_IN11 , 0x0398, 0x0084, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__WEIM_WEIM_A_25	, 0x039C, 0x0088, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__ECSPI4_SS1		, 0x039C, 0x0088, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__ECSPI2_RDY		, 0x039C, 0x0088, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__IPU1_DI1_PIN12	, 0x039C, 0x0088, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__IPU1_DI0_D1_CS	, 0x039C, 0x0088, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__GPIO_5_2		, 0x039C, 0x0088, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A25__HDMI_TX_CEC_LINE	, 0x039C, 0x0088, 6, 0x088C, 0, 0)
++MX6_PAD_DECL(EIM_A25__PL301_PER1_HBURST_0	, 0x039C, 0x0088, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB2__WEIM_WEIM_EB_2	, 0x03A0, 0x008C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB2__ECSPI1_SS0		, 0x03A0, 0x008C, 1, 0x0800, 0, 0)
++MX6_PAD_DECL(EIM_EB2__CCM_DI1_EXT_CLK	, 0x03A0, 0x008C, 2, 0x07EC, 0, 0)
++MX6_PAD_DECL(EIM_EB2__IPU2_CSI1_D_19	, 0x03A0, 0x008C, 3, 0x08D4, 0, 0)
++MX6_PAD_DECL(EIM_EB2__HDMI_TX_DDC_SCL	, 0x03A0, 0x008C, 4, 0x0890, 0, 0)
++MX6_PAD_DECL(EIM_EB2__GPIO_2_30		, 0x03A0, 0x008C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB2__I2C2_SCL		, 0x03A0, 0x008C, 22, 0x08A0, 0, 0)
++MX6_PAD_DECL(EIM_EB2__SRC_BT_CFG_30		, 0x03A0, 0x008C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__WEIM_WEIM_D_16	, 0x03A4, 0x0090, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__ECSPI1_SCLK		, 0x03A4, 0x0090, 1, 0x07F4, 0, 0)
++MX6_PAD_DECL(EIM_D16__IPU1_DI0_PIN5		, 0x03A4, 0x0090, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__IPU2_CSI1_D_18	, 0x03A4, 0x0090, 3, 0x08D0, 0, 0)
++MX6_PAD_DECL(EIM_D16__HDMI_TX_DDC_SDA	, 0x03A4, 0x0090, 4, 0x0894, 0, 0)
++MX6_PAD_DECL(EIM_D16__GPIO_3_16		, 0x03A4, 0x0090, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D16__I2C2_SDA		, 0x03A4, 0x0090, 22, 0x08A4, 0, 0)
++MX6_PAD_DECL(EIM_D17__WEIM_WEIM_D_17	, 0x03A8, 0x0094, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__ECSPI1_MISO		, 0x03A8, 0x0094, 1, 0x07F8, 0, 0)
++MX6_PAD_DECL(EIM_D17__IPU1_DI0_PIN6		, 0x03A8, 0x0094, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__IPU2_CSI1_PIXCLK	, 0x03A8, 0x0094, 3, 0x08E0, 0, 0)
++MX6_PAD_DECL(EIM_D17__DCIC1_DCIC_OUT	, 0x03A8, 0x0094, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__GPIO_3_17		, 0x03A8, 0x0094, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D17__I2C3_SCL		, 0x03A8, 0x0094, 22, 0x08A8, 0, 0)
++MX6_PAD_DECL(EIM_D17__PL301_PER1_HBURST_1	, 0x03A8, 0x0094, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__WEIM_WEIM_D_18	, 0x03AC, 0x0098, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__ECSPI1_MOSI		, 0x03AC, 0x0098, 1, 0x07FC, 0, 0)
++MX6_PAD_DECL(EIM_D18__IPU1_DI0_PIN7		, 0x03AC, 0x0098, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__IPU2_CSI1_D_17	, 0x03AC, 0x0098, 3, 0x08CC, 0, 0)
++MX6_PAD_DECL(EIM_D18__IPU1_DI1_D0_CS	, 0x03AC, 0x0098, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__GPIO_3_18		, 0x03AC, 0x0098, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D18__I2C3_SDA		, 0x03AC, 0x0098, 22, 0x08AC, 0, 0)
++MX6_PAD_DECL(EIM_D18__PL301_PER1_HBURST_2	, 0x03AC, 0x0098, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__WEIM_WEIM_D_19	, 0x03B0, 0x009C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__ECSPI1_SS1		, 0x03B0, 0x009C, 1, 0x0804, 0, 0)
++MX6_PAD_DECL(EIM_D19__IPU1_DI0_PIN8		, 0x03B0, 0x009C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__IPU2_CSI1_D_16	, 0x03B0, 0x009C, 3, 0x08C8, 0, 0)
++MX6_PAD_DECL(EIM_D19__UART1_CTS		, 0x03B0, 0x009C, 4, 0x091C, 0, 0)
++MX6_PAD_DECL(EIM_D19__GPIO_3_19		, 0x03B0, 0x009C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__EPIT1_EPITO		, 0x03B0, 0x009C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D19__PL301MX6QPER1_HRESP   , 0x03B0, 0x009C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__WEIM_WEIM_D_20	, 0x03B4, 0x00A0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__ECSPI4_SS0		, 0x03B4, 0x00A0, 1, 0x0824, 0, 0)
++MX6_PAD_DECL(EIM_D20__IPU1_DI0_PIN16	, 0x03B4, 0x00A0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__IPU2_CSI1_D_15	, 0x03B4, 0x00A0, 3, 0x08C4, 0, 0)
++MX6_PAD_DECL(EIM_D20__UART1_CTS		, 0x03B4, 0x00A0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__UART1_RTS		, 0x03B4, 0x00A0, 4, 0x091C, 1, 0)
++MX6_PAD_DECL(EIM_D20__GPIO_3_20		, 0x03B4, 0x00A0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D20__EPIT2_EPITO		, 0x03B4, 0x00A0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__WEIM_WEIM_D_21	, 0x03B8, 0x00A4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__ECSPI4_SCLK		, 0x03B8, 0x00A4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__IPU1_DI0_PIN17	, 0x03B8, 0x00A4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__IPU2_CSI1_D_11	, 0x03B8, 0x00A4, 3, 0x08B4, 0, 0)
++MX6_PAD_DECL(EIM_D21__USBOH3_USBOTG_OC	, 0x03B8, 0x00A4, 4, 0x0944, 0, 0)
++MX6_PAD_DECL(EIM_D21__GPIO_3_21		, 0x03B8, 0x00A4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D21__I2C1_SCL		, 0x03B8, 0x00A4, 22, 0x0898, 0, 0)
++MX6_PAD_DECL(EIM_D21__SPDIF_IN1		, 0x03B8, 0x00A4, 7, 0x0914, 0, 0)
++MX6_PAD_DECL(EIM_D22__WEIM_WEIM_D_22	, 0x03BC, 0x00A8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__ECSPI4_MISO		, 0x03BC, 0x00A8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__IPU1_DI0_PIN1		, 0x03BC, 0x00A8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__IPU2_CSI1_D_10	, 0x03BC, 0x00A8, 3, 0x08B0, 0, 0)
++MX6_PAD_DECL(EIM_D22__USBOH3_USBOTG_PWR	, 0x03BC, 0x00A8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__GPIO_3_22		, 0x03BC, 0x00A8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__SPDIF_OUT1		, 0x03BC, 0x00A8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D22__PL301MX6QPER1_HWRITE	, 0x03BC, 0x00A8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__WEIM_WEIM_D_23	, 0x03C0, 0x00AC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU1_DI0_D0_CS	, 0x03C0, 0x00AC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__UART3_CTS		, 0x03C0, 0x00AC, 2, 0x092C, 0, 0)
++MX6_PAD_DECL(EIM_D23__UART1_DCD		, 0x03C0, 0x00AC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU2_CSI1_DATA_EN	, 0x03C0, 0x00AC, 4, 0x08D8, 0, 0)
++MX6_PAD_DECL(EIM_D23__GPIO_3_23		, 0x03C0, 0x00AC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU1_DI1_PIN2		, 0x03C0, 0x00AC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D23__IPU1_DI1_PIN14	, 0x03C0, 0x00AC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__WEIM_WEIM_EB_3	, 0x03C4, 0x00B0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__ECSPI4_RDY		, 0x03C4, 0x00B0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__UART3_CTS		, 0x03C4, 0x00B0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__UART3_RTS		, 0x03C4, 0x00B0, 2, 0x092C, 1, 0)
++MX6_PAD_DECL(EIM_EB3__UART1_RI		, 0x03C4, 0x00B0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__IPU2_CSI1_HSYNC	, 0x03C4, 0x00B0, 4, 0x08DC, 0, 0)
++MX6_PAD_DECL(EIM_EB3__GPIO_2_31		, 0x03C4, 0x00B0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__IPU1_DI1_PIN3		, 0x03C4, 0x00B0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB3__SRC_BT_CFG_31		, 0x03C4, 0x00B0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__WEIM_WEIM_D_24	, 0x03C8, 0x00B4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__ECSPI4_SS2		, 0x03C8, 0x00B4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__UART3_TXD		, 0x03C8, 0x00B4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__UART3_TXD_RXD		, 0x03C8, 0x00B4, 2, 0x0930, 0, 0)
++MX6_PAD_DECL(EIM_D24__ECSPI1_SS2		, 0x03C8, 0x00B4, 3, 0x0808, 0, 0)
++MX6_PAD_DECL(EIM_D24__ECSPI2_SS2		, 0x03C8, 0x00B4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__GPIO_3_24		, 0x03C8, 0x00B4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D24__AUDMUX_AUD5_RXFS	, 0x03C8, 0x00B4, 6, 0x07D8, 0, 0)
++MX6_PAD_DECL(EIM_D24__UART1_DTR		, 0x03C8, 0x00B4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__WEIM_WEIM_D_25	, 0x03CC, 0x00B8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__ECSPI4_SS3		, 0x03CC, 0x00B8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__UART3_RXD		, 0x03CC, 0x00B8, 2, 0x0930, 1, 0)
++MX6_PAD_DECL(EIM_D25__ECSPI1_SS3		, 0x03CC, 0x00B8, 3, 0x080C, 0, 0)
++MX6_PAD_DECL(EIM_D25__ECSPI2_SS3		, 0x03CC, 0x00B8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__GPIO_3_25		, 0x03CC, 0x00B8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D25__AUDMUX_AUD5_RXC	, 0x03CC, 0x00B8, 6, 0x07D4, 0, 0)
++MX6_PAD_DECL(EIM_D25__UART1_DSR		, 0x03CC, 0x00B8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__WEIM_WEIM_D_26	, 0x03D0, 0x00BC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_DI1_PIN11	, 0x03D0, 0x00BC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_CSI0_D_1		, 0x03D0, 0x00BC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU2_CSI1_D_14	, 0x03D0, 0x00BC, 3, 0x08C0, 0, 0)
++MX6_PAD_DECL(EIM_D26__UART2_TXD		, 0x03D0, 0x00BC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__UART2_TXD_RXD		, 0x03D0, 0x00BC, 4, 0x0928, 0, 0)
++MX6_PAD_DECL(EIM_D26__GPIO_3_26		, 0x03D0, 0x00BC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_SISG_2		, 0x03D0, 0x00BC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D26__IPU1_DISP1_DAT_22	, 0x03D0, 0x00BC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__WEIM_WEIM_D_27	, 0x03D4, 0x00C0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_DI1_PIN13	, 0x03D4, 0x00C0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_CSI0_D_0		, 0x03D4, 0x00C0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU2_CSI1_D_13	, 0x03D4, 0x00C0, 3, 0x08BC, 0, 0)
++MX6_PAD_DECL(EIM_D27__UART2_RXD		, 0x03D4, 0x00C0, 4, 0x0928, 1, 0)
++MX6_PAD_DECL(EIM_D27__GPIO_3_27		, 0x03D4, 0x00C0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_SISG_3		, 0x03D4, 0x00C0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D27__IPU1_DISP1_DAT_23	, 0x03D4, 0x00C0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__WEIM_WEIM_D_28	, 0x03D8, 0x00C4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__I2C1_SDA		, 0x03D8, 0x00C4, 17, 0x089C, 0, 0)
++MX6_PAD_DECL(EIM_D28__ECSPI4_MOSI		, 0x03D8, 0x00C4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__IPU2_CSI1_D_12	, 0x03D8, 0x00C4, 3, 0x08B8, 0, 0)
++MX6_PAD_DECL(EIM_D28__UART2_CTS		, 0x03D8, 0x00C4, 4, 0x0924, 0, 0)
++MX6_PAD_DECL(EIM_D28__GPIO_3_28		, 0x03D8, 0x00C4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__IPU1_EXT_TRIG		, 0x03D8, 0x00C4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D28__IPU1_DI0_PIN13	, 0x03D8, 0x00C4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__WEIM_WEIM_D_29	, 0x03DC, 0x00C8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__IPU1_DI1_PIN15	, 0x03DC, 0x00C8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__ECSPI4_SS0		, 0x03DC, 0x00C8, 2, 0x0824, 1, 0)
++MX6_PAD_DECL(EIM_D29__UART2_CTS		, 0x03DC, 0x00C8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__UART2_RTS		, 0x03DC, 0x00C8, 4, 0x0924, 1, 0)
++MX6_PAD_DECL(EIM_D29__GPIO_3_29		, 0x03DC, 0x00C8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D29__IPU2_CSI1_VSYNC	, 0x03DC, 0x00C8, 6, 0x08E4, 0, 0)
++MX6_PAD_DECL(EIM_D29__IPU1_DI0_PIN14	, 0x03DC, 0x00C8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__WEIM_WEIM_D_30	, 0x03E0, 0x00CC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__IPU1_DISP1_DAT_21	, 0x03E0, 0x00CC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__IPU1_DI0_PIN11	, 0x03E0, 0x00CC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__IPU1_CSI0_D_3		, 0x03E0, 0x00CC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__UART3_CTS		, 0x03E0, 0x00CC, 4, 0x092C, 2, 0)
++MX6_PAD_DECL(EIM_D30__GPIO_3_30		, 0x03E0, 0x00CC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D30__USBOH3_USBH1_OC	, 0x03E0, 0x00CC, 6, 0x0948, 0, 0)
++MX6_PAD_DECL(EIM_D30__PL301MX6QPER1_HPROT_0 , 0x03E0, 0x00CC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__WEIM_WEIM_D_31	, 0x03E4, 0x00D0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__IPU1_DISP1_DAT_20	, 0x03E4, 0x00D0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__IPU1_DI0_PIN12	, 0x03E4, 0x00D0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__IPU1_CSI0_D_2		, 0x03E4, 0x00D0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__UART3_CTS		, 0x03E4, 0x00D0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__UART3_RTS		, 0x03E4, 0x00D0, 4, 0x092C, 3, 0)
++MX6_PAD_DECL(EIM_D31__GPIO_3_31		, 0x03E4, 0x00D0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__USBOH3_USBH1_PWR	, 0x03E4, 0x00D0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_D31__PL301MX6QPER1_HPROT_1 , 0x03E4, 0x00D0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__WEIM_WEIM_A_24	, 0x03E8, 0x00D4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__IPU1_DISP1_DAT_19	, 0x03E8, 0x00D4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__IPU2_CSI1_D_19	, 0x03E8, 0x00D4, 2, 0x08D4, 1, 0)
++MX6_PAD_DECL(EIM_A24__IPU2_SISG_2		, 0x03E8, 0x00D4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__IPU1_SISG_2		, 0x03E8, 0x00D4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__GPIO_5_4		, 0x03E8, 0x00D4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__PL301MX6QPER1_HPROT_2 , 0x03E8, 0x00D4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A24__SRC_BT_CFG_24		, 0x03E8, 0x00D4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__WEIM_WEIM_A_23	, 0x03EC, 0x00D8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__IPU1_DISP1_DAT_18	, 0x03EC, 0x00D8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__IPU2_CSI1_D_18	, 0x03EC, 0x00D8, 2, 0x08D0, 1, 0)
++MX6_PAD_DECL(EIM_A23__IPU2_SISG_3		, 0x03EC, 0x00D8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__IPU1_SISG_3		, 0x03EC, 0x00D8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__GPIO_6_6		, 0x03EC, 0x00D8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__PL301MX6QPER1_HPROT_3	, 0x03EC, 0x00D8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A23__SRC_BT_CFG_23		, 0x03EC, 0x00D8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__WEIM_WEIM_A_22	, 0x03F0, 0x00DC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__IPU1_DISP1_DAT_17	, 0x03F0, 0x00DC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__IPU2_CSI1_D_17	, 0x03F0, 0x00DC, 2, 0x08CC, 1, 0)
++MX6_PAD_DECL(EIM_A22__GPIO_2_16		, 0x03F0, 0x00DC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__TPSMP_HDATA_0		, 0x03F0, 0x00DC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A22__SRC_BT_CFG_22		, 0x03F0, 0x00DC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__WEIM_WEIM_A_21	, 0x03F4, 0x00E0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__IPU1_DISP1_DAT_16	, 0x03F4, 0x00E0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__IPU2_CSI1_D_16	, 0x03F4, 0x00E0, 2, 0x08C8, 1, 0)
++MX6_PAD_DECL(EIM_A21__RESERVED_RESERVED	, 0x03F4, 0x00E0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__MIPI_CORE_DPHY_OUT_18 , 0x03F4, 0x00E0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__GPIO_2_17		, 0x03F4, 0x00E0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__TPSMP_HDATA_1		, 0x03F4, 0x00E0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A21__SRC_BT_CFG_21		, 0x03F4, 0x00E0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__WEIM_WEIM_A_20	, 0x03F8, 0x00E4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__IPU1_DISP1_DAT_15	, 0x03F8, 0x00E4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__IPU2_CSI1_D_15	, 0x03F8, 0x00E4, 2, 0x08C4, 1, 0)
++MX6_PAD_DECL(EIM_A20__RESERVED_RESERVED	, 0x03F8, 0x00E4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__MIPI_CORE_DPHY_OUT_19 , 0x03F8, 0x00E4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__GPIO_2_18		, 0x03F8, 0x00E4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__TPSMP_HDATA_2		, 0x03F8, 0x00E4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A20__SRC_BT_CFG_20		, 0x03F8, 0x00E4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__WEIM_WEIM_A_19	, 0x03FC, 0x00E8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__IPU1_DISP1_DAT_14	, 0x03FC, 0x00E8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__IPU2_CSI1_D_14	, 0x03FC, 0x00E8, 2, 0x08C0, 1, 0)
++MX6_PAD_DECL(EIM_A19__RESERVED_RESERVED	, 0x03FC, 0x00E8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__MIPI_CORE_DPHY_OUT_20 , 0x03FC, 0x00E8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__GPIO_2_19		, 0x03FC, 0x00E8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__TPSMP_HDATA_3		, 0x03FC, 0x00E8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A19__SRC_BT_CFG_19		, 0x03FC, 0x00E8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__WEIM_WEIM_A_18	, 0x0400, 0x00EC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__IPU1_DISP1_DAT_13	, 0x0400, 0x00EC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__IPU2_CSI1_D_13	, 0x0400, 0x00EC, 2, 0x08BC, 1, 0)
++MX6_PAD_DECL(EIM_A18__RESERVED_RESERVED	, 0x0400, 0x00EC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__MIPI_CORE_DPHY_OUT_21 , 0x0400, 0x00EC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__GPIO_2_20		, 0x0400, 0x00EC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__TPSMP_HDATA_4		, 0x0400, 0x00EC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A18__SRC_BT_CFG_18		, 0x0400, 0x00EC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__WEIM_WEIM_A_17	, 0x0404, 0x00F0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__IPU1_DISP1_DAT_12	, 0x0404, 0x00F0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__IPU2_CSI1_D_12	, 0x0404, 0x00F0, 2, 0x08B8, 1, 0)
++MX6_PAD_DECL(EIM_A17__RESERVED_RESERVED	, 0x0404, 0x00F0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__MIPI_CORE_DPHY_OUT_22 , 0x0404, 0x00F0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__GPIO_2_21		, 0x0404, 0x00F0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__TPSMP_HDATA_5		, 0x0404, 0x00F0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A17__SRC_BT_CFG_17		, 0x0404, 0x00F0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__WEIM_WEIM_A_16	, 0x0408, 0x00F4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__IPU1_DI1_DISP_CLK	, 0x0408, 0x00F4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__IPU2_CSI1_PIXCLK	, 0x0408, 0x00F4, 2, 0x08E0, 1, 0)
++MX6_PAD_DECL(EIM_A16__MIPI_CORE_DPHY_OUT_23 , 0x0408, 0x00F4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__GPIO_2_22		, 0x0408, 0x00F4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__TPSMP_HDATA_6		, 0x0408, 0x00F4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_A16__SRC_BT_CFG_16		, 0x0408, 0x00F4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__WEIM_WEIM_CS_0	, 0x040C, 0x00F8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__IPU1_DI1_PIN5		, 0x040C, 0x00F8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__ECSPI2_SCLK		, 0x040C, 0x00F8, 2, 0x0810, 0, 0)
++MX6_PAD_DECL(EIM_CS0__MIPI_CORE_DPHY_OUT_24 , 0x040C, 0x00F8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__GPIO_2_23		, 0x040C, 0x00F8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS0__TPSMP_HDATA_7		, 0x040C, 0x00F8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__WEIM_WEIM_CS_1	, 0x0410, 0x00FC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__IPU1_DI1_PIN6		, 0x0410, 0x00FC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__ECSPI2_MOSI		, 0x0410, 0x00FC, 2, 0x0818, 0, 0)
++MX6_PAD_DECL(EIM_CS1__MIPI_CORE_DPHY_OUT_25 , 0x0410, 0x00FC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__GPIO_2_24		, 0x0410, 0x00FC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_CS1__TPSMP_HDATA_8		, 0x0410, 0x00FC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__WEIM_WEIM_OE		, 0x0414, 0x0100, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__IPU1_DI1_PIN7		, 0x0414, 0x0100, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__ECSPI2_MISO		, 0x0414, 0x0100, 2, 0x0814, 0, 0)
++MX6_PAD_DECL(EIM_OE__MIPI_CORE_DPHY_OUT_26  , 0x0414, 0x0100, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__GPIO_2_25		, 0x0414, 0x0100, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_OE__TPSMP_HDATA_9		, 0x0414, 0x0100, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__WEIM_WEIM_RW		, 0x0418, 0x0104, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__IPU1_DI1_PIN8		, 0x0418, 0x0104, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__ECSPI2_SS0		, 0x0418, 0x0104, 2, 0x081C, 0, 0)
++MX6_PAD_DECL(EIM_RW__MIPI_CORE_DPHY_OUT_27  , 0x0418, 0x0104, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__GPIO_2_26		, 0x0418, 0x0104, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__TPSMP_HDATA_10		, 0x0418, 0x0104, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_RW__SRC_BT_CFG_29		, 0x0418, 0x0104, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__WEIM_WEIM_LBA		, 0x041C, 0x0108, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__IPU1_DI1_PIN17	, 0x041C, 0x0108, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__ECSPI2_SS1		, 0x041C, 0x0108, 2, 0x0820, 0, 0)
++MX6_PAD_DECL(EIM_LBA__GPIO_2_27		, 0x041C, 0x0108, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__TPSMP_HDATA_11	, 0x041C, 0x0108, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_LBA__SRC_BT_CFG_26		, 0x041C, 0x0108, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__WEIM_WEIM_EB_0	, 0x0420, 0x010C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__IPU1_DISP1_DAT_11	, 0x0420, 0x010C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__IPU2_CSI1_D_11	, 0x0420, 0x010C, 2, 0x08B4, 1, 0)
++MX6_PAD_DECL(EIM_EB0__MIPI_CORE_DPHY_OUT_0  , 0x0420, 0x010C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__CCM_PMIC_RDY		, 0x0420, 0x010C, 4, 0x07F0, 0, 0)
++MX6_PAD_DECL(EIM_EB0__GPIO_2_28		, 0x0420, 0x010C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__TPSMP_HDATA_12	, 0x0420, 0x010C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB0__SRC_BT_CFG_27		, 0x0420, 0x010C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__WEIM_WEIM_EB_1	, 0x0424, 0x0110, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__IPU1_DISP1_DAT_10	, 0x0424, 0x0110, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__IPU2_CSI1_D_10	, 0x0424, 0x0110, 2, 0x08B0, 1, 0)
++MX6_PAD_DECL(EIM_EB1__MIPI_CORE_DPHY__OUT_1 , 0x0424, 0x0110, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__GPIO_2_29		, 0x0424, 0x0110, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__TPSMP_HDATA_13	, 0x0424, 0x0110, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_EB1__SRC_BT_CFG_28		, 0x0424, 0x0110, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__WEIM_WEIM_DA_A_0	, 0x0428, 0x0114, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__IPU1_DISP1_DAT_9	, 0x0428, 0x0114, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__IPU2_CSI1_D_9		, 0x0428, 0x0114, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__MIPI_CORE_DPHY__OUT_2	, 0x0428, 0x0114, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__GPIO_3_0		, 0x0428, 0x0114, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__TPSMP_HDATA_14	, 0x0428, 0x0114, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA0__SRC_BT_CFG_0		, 0x0428, 0x0114, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__WEIM_WEIM_DA_A_1	, 0x042C, 0x0118, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__IPU1_DISP1_DAT_8	, 0x042C, 0x0118, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__IPU2_CSI1_D_8		, 0x042C, 0x0118, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__MIPI_CORE_DPHY_OUT_3	, 0x042C, 0x0118, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__USBPHY1_TX_LS_MODE	, 0x042C, 0x0118, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__GPIO_3_1		, 0x042C, 0x0118, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__TPSMP_HDATA_15	, 0x042C, 0x0118, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA1__SRC_BT_CFG_1		, 0x042C, 0x0118, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__WEIM_WEIM_DA_A_2	, 0x0430, 0x011C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__IPU1_DISP1_DAT_7	, 0x0430, 0x011C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__IPU2_CSI1_D_7		, 0x0430, 0x011C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__MIPI_CORE_DPHY_OUT_4  , 0x0430, 0x011C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__USBPHY1_TX_HS_MODE	, 0x0430, 0x011C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__GPIO_3_2		, 0x0430, 0x011C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__TPSMP_HDATA_16	, 0x0430, 0x011C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA2__SRC_BT_CFG_2		, 0x0430, 0x011C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__WEIM_WEIM_DA_A_3	, 0x0434, 0x0120, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__IPU1_DISP1_DAT_6	, 0x0434, 0x0120, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__IPU2_CSI1_D_6		, 0x0434, 0x0120, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__MIPI_CORE_DPHY_OUT_5  , 0x0434, 0x0120, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__USBPHY1_TX_HIZ        , 0x0434, 0x0120, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__GPIO_3_3		, 0x0434, 0x0120, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__TPSMP_HDATA_17	, 0x0434, 0x0120, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA3__SRC_BT_CFG_3		, 0x0434, 0x0120, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__WEIM_WEIM_DA_A_4	, 0x0438, 0x0124, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__IPU1_DISP1_DAT_5	, 0x0438, 0x0124, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__IPU2_CSI1_D_5		, 0x0438, 0x0124, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__MIPI_CORE_DPHY_OUT_6  , 0x0438, 0x0124, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__ANATOP_USBPHY1_TX_EN  , 0x0438, 0x0124, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__GPIO_3_4		, 0x0438, 0x0124, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__TPSMP_HDATA_18	, 0x0438, 0x0124, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA4__SRC_BT_CFG_4		, 0x0438, 0x0124, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__WEIM_WEIM_DA_A_5	, 0x043C, 0x0128, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__IPU1_DISP1_DAT_4	, 0x043C, 0x0128, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__IPU2_CSI1_D_4		, 0x043C, 0x0128, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__MIPI_CORE_DPHY_OUT_7  , 0x043C, 0x0128, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__ANATOP_USBPHY1_TX_DP  , 0x043C, 0x0128, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__GPIO_3_5		, 0x043C, 0x0128, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__TPSMP_HDATA_19	, 0x043C, 0x0128, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA5__SRC_BT_CFG_5		, 0x043C, 0x0128, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__WEIM_WEIM_DA_A_6	, 0x0440, 0x012C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__IPU1_DISP1_DAT_3	, 0x0440, 0x012C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__IPU2_CSI1_D_3		, 0x0440, 0x012C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__MIPI_CORE_DPHY_OUT_8  , 0x0440, 0x012C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__ANATOP_USBPHY1_TX_DN  , 0x0440, 0x012C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__GPIO_3_6		, 0x0440, 0x012C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__TPSMP_HDATA_20	, 0x0440, 0x012C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA6__SRC_BT_CFG_6		, 0x0440, 0x012C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__WEIM_WEIM_DA_A_7	, 0x0444, 0x0130, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__IPU1_DISP1_DAT_2	, 0x0444, 0x0130, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__IPU2_CSI1_D_2		, 0x0444, 0x0130, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__MIPI_CORE_DPHY_OUT_9	, 0x0444, 0x0130, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__GPIO_3_7		, 0x0444, 0x0130, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__TPSMP_HDATA_21	, 0x0444, 0x0130, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA7__SRC_BT_CFG_7		, 0x0444, 0x0130, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__WEIM_WEIM_DA_A_8	, 0x0448, 0x0134, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__IPU1_DISP1_DAT_1	, 0x0448, 0x0134, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__IPU2_CSI1_D_1		, 0x0448, 0x0134, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__MIPI_CORE_DPHY_OUT_10 , 0x0448, 0x0134, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__GPIO_3_8		, 0x0448, 0x0134, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__TPSMP_HDATA_22	, 0x0448, 0x0134, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA8__SRC_BT_CFG_8		, 0x0448, 0x0134, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__WEIM_WEIM_DA_A_9	, 0x044C, 0x0138, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__IPU1_DISP1_DAT_0	, 0x044C, 0x0138, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__IPU2_CSI1_D_0		, 0x044C, 0x0138, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__MIPI_CORE_DPHY_OUT_11 , 0x044C, 0x0138, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__GPIO_3_9		, 0x044C, 0x0138, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__TPSMP_HDATA_23	, 0x044C, 0x0138, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA9__SRC_BT_CFG_9		, 0x044C, 0x0138, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__WEIM_WEIM_DA_A_10	, 0x0450, 0x013C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__IPU1_DI1_PIN15	, 0x0450, 0x013C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__IPU2_CSI1_DATA_EN    , 0x0450, 0x013C, 2, 0x08D8, 1, 0)
++MX6_PAD_DECL(EIM_DA10__MIPI_CORE_DPHY_OUT12	, 0x0450, 0x013C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__GPIO_3_10		, 0x0450, 0x013C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__TPSMP_HDATA_24	, 0x0450, 0x013C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA10__SRC_BT_CFG_10	, 0x0450, 0x013C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__WEIM_WEIM_DA_A_11	, 0x0454, 0x0140, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__IPU1_DI1_PIN2	, 0x0454, 0x0140, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__IPU2_CSI1_HSYNC	, 0x0454, 0x0140, 2, 0x08DC, 1, 0)
++MX6_PAD_DECL(EIM_DA11__MIPI_CORE_DPHY_OUT13	, 0x0454, 0x0140, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__SDMA_DBG_EVT_CHN_6	, 0x0454, 0x0140, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__GPIO_3_11		, 0x0454, 0x0140, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__TPSMP_HDATA_25	, 0x0454, 0x0140, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA11__SRC_BT_CFG_11	, 0x0454, 0x0140, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__WEIM_WEIM_DA_A_12	, 0x0458, 0x0144, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__IPU1_DI1_PIN3	, 0x0458, 0x0144, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__IPU2_CSI1_VSYNC	, 0x0458, 0x0144, 2, 0x08E4, 1, 0)
++MX6_PAD_DECL(EIM_DA12__MIPI_CORE_DPHY_OUT14	, 0x0458, 0x0144, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__SDMA_DEBUG_EVT_CHN_3 , 0x0458, 0x0144, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__GPIO_3_12		, 0x0458, 0x0144, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__TPSMP_HDATA_26	, 0x0458, 0x0144, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA12__SRC_BT_CFG_12	, 0x0458, 0x0144, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__WEIM_WEIM_DA_A_13	, 0x045C, 0x0148, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__IPU1_DI1_D0_CS	, 0x045C, 0x0148, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__CCM_DI1_EXT_CLK	, 0x045C, 0x0148, 2, 0x07EC, 1, 0)
++MX6_PAD_DECL(EIM_DA13__MIPI_CORE_DPHY_OUT15	, 0x045C, 0x0148, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__SDMA_DEBUG_EVT_CHN_4 , 0x045C, 0x0148, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__GPIO_3_13		, 0x045C, 0x0148, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__TPSMP_HDATA_27	, 0x045C, 0x0148, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA13__SRC_BT_CFG_13	, 0x045C, 0x0148, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__WEIM_WEIM_DA_A_14	, 0x0460, 0x014C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__IPU1_DI1_D1_CS	, 0x0460, 0x014C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__CCM_DI0_EXT_CLK	, 0x0460, 0x014C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__MIPI_CORE_DPHY_OUT16	, 0x0460, 0x014C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__SDMA_DEBUG_EVT_CHN_5 , 0x0460, 0x014C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__GPIO_3_14		, 0x0460, 0x014C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__TPSMP_HDATA_28	, 0x0460, 0x014C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA14__SRC_BT_CFG_14	, 0x0460, 0x014C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__WEIM_WEIM_DA_A_15	, 0x0464, 0x0150, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__IPU1_DI1_PIN1	, 0x0464, 0x0150, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__IPU1_DI1_PIN4	, 0x0464, 0x0150, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__MIPI_CORE_DPHY_OUT17	, 0x0464, 0x0150, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__GPIO_3_15		, 0x0464, 0x0150, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__TPSMP_HDATA_29	, 0x0464, 0x0150, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_DA15__SRC_BT_CFG_15	, 0x0464, 0x0150, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__WEIM_WEIM_WAIT	, 0x0468, 0x0154, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__WEIM_WEIM_DTACK_B	, 0x0468, 0x0154, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__GPIO_5_0		, 0x0468, 0x0154, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__TPSMP_HDATA_30	, 0x0468, 0x0154, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_WAIT__SRC_BT_CFG_25	, 0x0468, 0x0154, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__WEIM_WEIM_BCLK	, 0x046C, 0x0158, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__IPU1_DI1_PIN16	, 0x046C, 0x0158, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__GPIO_6_31		, 0x046C, 0x0158, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(EIM_BCLK__TPSMP_HDATA_31	, 0x046C, 0x0158, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__IPU1_DI0_DISP_CLK , 0x0470, 0x015C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_DISP_CLK__IPU2_DI0_DISP_CLK , 0x0470, 0x015C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__MIPI_CR_DPY_OT28 , 0x0470, 0x015C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__SDMA_DBG_CR_STA0 , 0x0470, 0x015C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__GPIO_4_16	, 0x0470, 0x015C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_DISP_CLK__MMDC_DEBUG_0	, 0x0470, 0x015C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__IPU1_DI0_PIN15	, 0x0474, 0x0160, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN15__IPU2_DI0_PIN15	, 0x0474, 0x0160, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__AUDMUX_AUD6_TXC	, 0x0474, 0x0160, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__MIPI_CR_DPHY_OUT_29 , 0x0474, 0x0160, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__SDMA_DBG_CORE_STA_1 , 0x0474, 0x0160, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__GPIO_4_17		, 0x0474, 0x0160, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN15__MMDC_MMDC_DEBUG_1	, 0x0474, 0x0160, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__IPU1_DI0_PIN2	, 0x0478, 0x0164, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN2__IPU2_DI0_PIN2	, 0x0478, 0x0164, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__AUDMUX_AUD6_TXD	, 0x0478, 0x0164, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__MIPI_CR_DPHY_OUT_30	, 0x0478, 0x0164, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__SDMA_DBG_CORE_STA_2	, 0x0478, 0x0164, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__GPIO_4_18		, 0x0478, 0x0164, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__MMDC_DEBUG_2		, 0x0478, 0x0164, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN2__PL301_PER1_HADDR_9	, 0x0478, 0x0164, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__IPU1_DI0_PIN3	, 0x047C, 0x0168, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN3__IPU2_DI0_PIN3	, 0x047C, 0x0168, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__AUDMUX_AUD6_TXFS	, 0x047C, 0x0168, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__MIPI_CORE_DPHY_OUT31 , 0x047C, 0x0168, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__SDMA_DBG_CORE_STA_3	, 0x047C, 0x0168, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__GPIO_4_19		, 0x047C, 0x0168, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__MMDC_MMDC_DEBUG_3	, 0x047C, 0x0168, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN3__PL301_PER1_HADDR_10	, 0x047C, 0x0168, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__IPU1_DI0_PIN4	, 0x0480, 0x016C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__IPU2_DI0_PIN4	, 0x0480, 0x016C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__AUDMUX_AUD6_RXD	, 0x0480, 0x016C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__USDHC1_WP		, 0x0480, 0x016C, 3, 0x094C, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__SDMA_DEBUG_YIELD	, 0x0480, 0x016C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__GPIO_4_20		, 0x0480, 0x016C, 5, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DI0_PIN4__MMDC_MMDC_DEBUG_4	, 0x0480, 0x016C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DI0_PIN4__PL301_PER1_HADDR_11  , 0x0480, 0x016C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__IPU1_DISP0_DAT_0	, 0x0484, 0x0170, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT0__IPU2_DISP0_DAT_0	, 0x0484, 0x0170, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__ECSPI3_SCLK	, 0x0484, 0x0170, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__USDHC1_USDHC_DBG_0 , 0x0484, 0x0170, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__SDMA_DBG_CORE_RUN	, 0x0484, 0x0170, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__GPIO_4_21		, 0x0484, 0x0170, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT0__MMDC_MMDC_DEBUG_5	, 0x0484, 0x0170, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__IPU1_DISP0_DAT_1	, 0x0488, 0x0174, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT1__IPU2_DISP0_DAT_1	, 0x0488, 0x0174, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__ECSPI3_MOSI	, 0x0488, 0x0174, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__USDHC1_USDHC_DBG_1 , 0x0488, 0x0174, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__SDMA_DBG_EVT_CHNSL , 0x0488, 0x0174, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__GPIO_4_22		, 0x0488, 0x0174, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__MMDC_DEBUG_6	, 0x0488, 0x0174, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT1__PL301_PER1_HADR_12 , 0x0488, 0x0174, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__IPU1_DISP0_DAT_2	, 0x048C, 0x0178, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT2__IPU2_DISP0_DAT_2	, 0x048C, 0x0178, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__ECSPI3_MISO	, 0x048C, 0x0178, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__USDHC1_USDHC_DBG_2 , 0x048C, 0x0178, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__SDMA_DEBUG_MODE	, 0x048C, 0x0178, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__GPIO_4_23		, 0x048C, 0x0178, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__MMDC_DEBUG_7	, 0x048C, 0x0178, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT2__PL301_PER1_HADR_13 , 0x048C, 0x0178, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__IPU1_DISP0_DAT_3	, 0x0490, 0x017C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT3__IPU2_DISP0_DAT_3	, 0x0490, 0x017C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__ECSPI3_SS0		, 0x0490, 0x017C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__USDHC1_USDHC_DBG_3 , 0x0490, 0x017C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__SDMA_DBG_BUS_ERROR , 0x0490, 0x017C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__GPIO_4_24		, 0x0490, 0x017C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__MMDC_MMDC_DBG_8	, 0x0490, 0x017C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT3__PL301_PER1_HADR_14 , 0x0490, 0x017C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__IPU1_DISP0_DAT_4	, 0x0494, 0x0180, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT4__IPU2_DISP0_DAT_4	, 0x0494, 0x0180, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__ECSPI3_SS1		, 0x0494, 0x0180, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__USDHC1_USDHC_DBG_4	, 0x0494, 0x0180, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__SDMA_DEBUG_BUS_RWB , 0x0494, 0x0180, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__GPIO_4_25		, 0x0494, 0x0180, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__MMDC_MMDC_DEBUG_9	, 0x0494, 0x0180, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT4__PL301_PER1_HADR_15	, 0x0494, 0x0180, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__IPU1_DISP0_DAT_5	, 0x0498, 0x0184, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT5__IPU2_DISP0_DAT_5	, 0x0498, 0x0184, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__ECSPI3_SS2		, 0x0498, 0x0184, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__AUDMUX_AUD6_RXFS	, 0x0498, 0x0184, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__SDMA_DBG_MCH_DMBUS , 0x0498, 0x0184, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__GPIO_4_26		, 0x0498, 0x0184, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__MMDC_DEBUG_10	, 0x0498, 0x0184, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT5__PL301_PER1_HADR_16 , 0x0498, 0x0184, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__IPU1_DISP0_DAT_6	, 0x049C, 0x0188, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT6__IPU2_DISP0_DAT_6	, 0x049C, 0x0188, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__ECSPI3_SS3		, 0x049C, 0x0188, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__AUDMUX_AUD6_RXC	, 0x049C, 0x0188, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__SDMA_DBG_RTBUF_WRT , 0x049C, 0x0188, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__GPIO_4_27		, 0x049C, 0x0188, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__MMDC_DEBUG_11	, 0x049C, 0x0188, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT6__PL301_PER1_HADR_17 , 0x049C, 0x0188, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__IPU1_DISP0_DAT_7	, 0x04A0, 0x018C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT7__IPU2_DISP0_DAT_7	, 0x04A0, 0x018C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__ECSPI3_RDY		, 0x04A0, 0x018C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__USDHC1_USDHC_DBG_5 , 0x04A0, 0x018C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__SDMA_DBG_EVT_CHN_0 , 0x04A0, 0x018C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__GPIO_4_28		, 0x04A0, 0x018C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__MMDC_DEBUG_12	, 0x04A0, 0x018C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT7__PL301_PER1_HADR_18 , 0x04A0, 0x018C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__IPU1_DISP0_DAT_8	, 0x04A4, 0x0190, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT8__IPU2_DISP0_DAT_8	, 0x04A4, 0x0190, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__PWM1_PWMO		, 0x04A4, 0x0190, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__WDOG1_WDOG_B	, 0x04A4, 0x0190, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__SDMA_DBG_EVT_CHN_1	, 0x04A4, 0x0190, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__GPIO_4_29		, 0x04A4, 0x0190, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__MMDC_DEBUG_13	, 0x04A4, 0x0190, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT8__PL301_PER1_HADR_19 , 0x04A4, 0x0190, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__IPU1_DISP0_DAT_9	, 0x04A8, 0x0194, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT9__IPU2_DISP0_DAT_9	, 0x04A8, 0x0194, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__PWM2_PWMO		, 0x04A8, 0x0194, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__WDOG2_WDOG_B	, 0x04A8, 0x0194, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__SDMA_DBG_EVT_CHN_2 , 0x04A8, 0x0194, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__GPIO_4_30		, 0x04A8, 0x0194, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__MMDC_DEBUG_14	, 0x04A8, 0x0194, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT9__PL301_PER1_HADR_20 , 0x04A8, 0x0194, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__IPU1_DISP0_DAT_10	, 0x04AC, 0x0198, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT10__IPU2_DISP0_DAT_10	, 0x04AC, 0x0198, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__USDHC1_DBG_6	, 0x04AC, 0x0198, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__SDMA_DBG_EVT_CHN3 , 0x04AC, 0x0198, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__GPIO_4_31		, 0x04AC, 0x0198, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__MMDC_DEBUG_15	, 0x04AC, 0x0198, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT10__PL301_PER1_HADR21 , 0x04AC, 0x0198, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__IPU1_DISP0_DAT_11	, 0x04B0, 0x019C, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT11__IPU2_DISP0_DAT_11	, 0x04B0, 0x019C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__USDHC1_USDHC_DBG7 , 0x04B0, 0x019C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__SDMA_DBG_EVT_CHN4 , 0x04B0, 0x019C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__GPIO_5_5		, 0x04B0, 0x019C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__MMDC_DEBUG_16	, 0x04B0, 0x019C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT11__PL301_PER1_HADR22 , 0x04B0, 0x019C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__IPU1_DISP0_DAT_12	, 0x04B4, 0x01A0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT12__IPU2_DISP0_DAT_12	, 0x04B4, 0x01A0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__RESERVED_RESERVED	, 0x04B4, 0x01A0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__SDMA_DBG_EVT_CHN5 , 0x04B4, 0x01A0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__GPIO_5_6		, 0x04B4, 0x01A0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__MMDC_DEBUG_17	, 0x04B4, 0x01A0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT12__PL301_PER1_HADR23 , 0x04B4, 0x01A0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__IPU1_DISP0_DAT_13	, 0x04B8, 0x01A4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT13__IPU2_DISP0_DAT_13	, 0x04B8, 0x01A4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__AUDMUX_AUD5_RXFS	, 0x04B8, 0x01A4, 3, 0x07D8, 1, 0)
++MX6_PAD_DECL(DISP0_DAT13__SDMA_DBG_EVT_CHN0 , 0x04B8, 0x01A4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__GPIO_5_7		, 0x04B8, 0x01A4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__MMDC_DEBUG_18	, 0x04B8, 0x01A4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT13__PL301_PER1_HADR24 , 0x04B8, 0x01A4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__IPU1_DISP0_DAT_14	, 0x04BC, 0x01A8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT14__IPU2_DISP0_DAT_14	, 0x04BC, 0x01A8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__AUDMUX_AUD5_RXC	, 0x04BC, 0x01A8, 3, 0x07D4, 1, 0)
++MX6_PAD_DECL(DISP0_DAT14__SDMA_DBG_EVT_CHN1 , 0x04BC, 0x01A8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__GPIO_5_8		, 0x04BC, 0x01A8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT14__MMDC_DEBUG_19	, 0x04BC, 0x01A8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__IPU1_DISP0_DAT_15	, 0x04C0, 0x01AC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT15__IPU2_DISP0_DAT_15	, 0x04C0, 0x01AC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__ECSPI1_SS1	, 0x04C0, 0x01AC, 2, 0x0804, 1, 0)
++MX6_PAD_DECL(DISP0_DAT15__ECSPI2_SS1	, 0x04C0, 0x01AC, 3, 0x0820, 1, 0)
++MX6_PAD_DECL(DISP0_DAT15__SDMA_DBG_EVT_CHN2 , 0x04C0, 0x01AC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__GPIO_5_9		, 0x04C0, 0x01AC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__MMDC_DEBUG_20	, 0x04C0, 0x01AC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT15__PL301_PER1_HADR25 , 0x04C0, 0x01AC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__IPU1_DISP0_DAT_16	, 0x04C4, 0x01B0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT16__IPU2_DISP0_DAT_16	, 0x04C4, 0x01B0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__ECSPI2_MOSI	, 0x04C4, 0x01B0, 2, 0x0818, 1, 0)
++MX6_PAD_DECL(DISP0_DAT16__AUDMUX_AUD5_TXC	, 0x04C4, 0x01B0, 3, 0x07DC, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__SDMA_EXT_EVENT_0	, 0x04C4, 0x01B0, 4, 0x090C, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__GPIO_5_10		, 0x04C4, 0x01B0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__MMDC_DEBUG_21	, 0x04C4, 0x01B0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT16__PL301_PER1_HADR26 , 0x04C4, 0x01B0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__IPU1_DISP0_DAT_17	, 0x04C8, 0x01B4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT17__IPU2_DISP0_DAT_17	, 0x04C8, 0x01B4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__ECSPI2_MISO	, 0x04C8, 0x01B4, 2, 0x0814, 1, 0)
++MX6_PAD_DECL(DISP0_DAT17__AUDMUX_AUD5_TXD	, 0x04C8, 0x01B4, 3, 0x07D0, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__SDMA_EXT_EVENT_1	, 0x04C8, 0x01B4, 4, 0x0910, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__GPIO_5_11		, 0x04C8, 0x01B4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__MMDC_DEBUG_22	, 0x04C8, 0x01B4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT17__PL301_PER1_HADR27	, 0x04C8, 0x01B4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__IPU1_DISP0_DAT_18	, 0x04CC, 0x01B8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT18__IPU2_DISP0_DAT_18	, 0x04CC, 0x01B8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__ECSPI2_SS0	, 0x04CC, 0x01B8, 2, 0x081C, 1, 0)
++MX6_PAD_DECL(DISP0_DAT18__AUDMUX_AUD5_TXFS	, 0x04CC, 0x01B8, 3, 0x07E0, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__AUDMUX_AUD4_RXFS	, 0x04CC, 0x01B8, 4, 0x07C0, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__GPIO_5_12		, 0x04CC, 0x01B8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__MMDC_DEBUG_23	, 0x04CC, 0x01B8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT18__WEIM_WEIM_CS_2	, 0x04CC, 0x01B8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__IPU1_DISP0_DAT_19	, 0x04D0, 0x01BC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT19__IPU2_DISP0_DAT_19	, 0x04D0, 0x01BC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__ECSPI2_SCLK	, 0x04D0, 0x01BC, 2, 0x0810, 1, 0)
++MX6_PAD_DECL(DISP0_DAT19__AUDMUX_AUD5_RXD	, 0x04D0, 0x01BC, 3, 0x07CC, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__AUDMUX_AUD4_RXC	, 0x04D0, 0x01BC, 4, 0x07BC, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__GPIO_5_13		, 0x04D0, 0x01BC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__MMDC_DEBUG_24	, 0x04D0, 0x01BC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT19__WEIM_WEIM_CS_3	, 0x04D0, 0x01BC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__IPU1_DISP0_DAT_20	, 0x04D4, 0x01C0, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT20__IPU2_DISP0_DAT_20	, 0x04D4, 0x01C0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__ECSPI1_SCLK	, 0x04D4, 0x01C0, 2, 0x07F4, 1, 0)
++MX6_PAD_DECL(DISP0_DAT20__AUDMUX_AUD4_TXC	, 0x04D4, 0x01C0, 3, 0x07C4, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__SDMA_DBG_EVT_CHN7	, 0x04D4, 0x01C0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__GPIO_5_14		, 0x04D4, 0x01C0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__MMDC_DEBUG_25	, 0x04D4, 0x01C0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT20__PL301_PER1_HADR28 , 0x04D4, 0x01C0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__IPU1_DISP0_DAT_21	, 0x04D8, 0x01C4, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT21__IPU2_DISP0_DAT_21	, 0x04D8, 0x01C4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__ECSPI1_MOSI	, 0x04D8, 0x01C4, 2, 0x07FC, 1, 0)
++MX6_PAD_DECL(DISP0_DAT21__AUDMUX_AUD4_TXD	, 0x04D8, 0x01C4, 3, 0x07B8, 1, 0)
++MX6_PAD_DECL(DISP0_DAT21__SDMA_DBG_BUS_DEV0 , 0x04D8, 0x01C4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__GPIO_5_15		, 0x04D8, 0x01C4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__MMDC_DEBUG_26	, 0x04D8, 0x01C4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT21__PL301_PER1_HADR29 , 0x04D8, 0x01C4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__IPU1_DISP0_DAT_22	, 0x04DC, 0x01C8, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT22__IPU2_DISP0_DAT_22	, 0x04DC, 0x01C8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__ECSPI1_MISO	, 0x04DC, 0x01C8, 2, 0x07F8, 1, 0)
++MX6_PAD_DECL(DISP0_DAT22__AUDMUX_AUD4_TXFS	, 0x04DC, 0x01C8, 3, 0x07C8, 1, 0)
++MX6_PAD_DECL(DISP0_DAT22__SDMA_DBG_BUS_DEV1 , 0x04DC, 0x01C8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__GPIO_5_16		, 0x04DC, 0x01C8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__MMDC_DEBUG_27	, 0x04DC, 0x01C8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT22__PL301_PER1_HADR30 , 0x04DC, 0x01C8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__IPU1_DISP0_DAT_23	, 0x04E0, 0x01CC, 0, 0x0000, 0, PAD_CTL_DSE_120ohm)
++MX6_PAD_DECL(DISP0_DAT23__IPU2_DISP0_DAT_23	, 0x04E0, 0x01CC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__ECSPI1_SS0	, 0x04E0, 0x01CC, 2, 0x0800, 1, 0)
++MX6_PAD_DECL(DISP0_DAT23__AUDMUX_AUD4_RXD	, 0x04E0, 0x01CC, 3, 0x07B4, 1, 0)
++MX6_PAD_DECL(DISP0_DAT23__SDMA_DBG_BUS_DEV2 , 0x04E0, 0x01CC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__GPIO_5_17		, 0x04E0, 0x01CC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__MMDC_DEBUG_28	, 0x04E0, 0x01CC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(DISP0_DAT23__PL301_PER1_HADR31	, 0x04E0, 0x01CC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__RESERVED_RESERVED	, 0x04E4, 0x01D0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__ENET_MDIO		, 0x04E4, 0x01D0, 1, 0x0840, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__ESAI1_SCKR		, 0x04E4, 0x01D0, 2, 0x086C, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__SDMA_DEBUG_BUS_DEV3 , 0x04E4, 0x01D0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__ENET_1588_EVT1_OUT	, 0x04E4, 0x01D0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__GPIO_1_22		, 0x04E4, 0x01D0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDIO__SPDIF_PLOCK		, 0x04E4, 0x01D0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__RESERVED_RSRVED	, 0x04E8, 0x01D4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__ENET_TX_CLK	, 0x04E8, 0x01D4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__ESAI1_FSR	, 0x04E8, 0x01D4, 2, 0x085C, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__SDMA_DBGBUS_DEV4 , 0x04E8, 0x01D4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__GPIO_1_23	, 0x04E8, 0x01D4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__SPDIF_SRCLK	, 0x04E8, 0x01D4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_REF_CLK__USBPHY1_RX_SQH	, 0x04E8, 0x01D4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__ENET_RX_ER		, 0x04EC, 0x01D8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__ESAI1_HCKR		, 0x04EC, 0x01D8, 2, 0x0864, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__SPDIF_IN1		, 0x04EC, 0x01D8, 3, 0x0914, 1, 0)
++MX6_PAD_DECL(ENET_RX_ER__ENET_1588_EVT2_OUT , 0x04EC, 0x01D8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__GPIO_1_24		, 0x04EC, 0x01D8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__PHY_TDI		, 0x04EC, 0x01D8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RX_ER__USBPHY1_RX_HS_RXD	, 0x04EC, 0x01D8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__RESERVED_RSRVED	, 0x04F0, 0x01DC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__ENET_RX_EN	, 0x04F0, 0x01DC, 1, 0x0858, 1, 0)
++MX6_PAD_DECL(ENET_CRS_DV__ESAI1_SCKT	, 0x04F0, 0x01DC, 2, 0x0870, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__SPDIF_EXTCLK	, 0x04F0, 0x01DC, 3, 0x0918, 1, 0)
++MX6_PAD_DECL(ENET_CRS_DV__GPIO_1_25		, 0x04F0, 0x01DC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__PHY_TDO		, 0x04F0, 0x01DC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_CRS_DV__USBPHY1_RX_FS_RXD	, 0x04F0, 0x01DC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__MLB_MLBSIG		, 0x04F4, 0x01E0, 0, 0x0908, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__ENET_RDATA_1	, 0x04F4, 0x01E0, 1, 0x084C, 1, 0)
++MX6_PAD_DECL(ENET_RXD1__ESAI1_FST		, 0x04F4, 0x01E0, 2, 0x0860, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__ENET_1588_EVT3_OUT	, 0x04F4, 0x01E0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__GPIO_1_26		, 0x04F4, 0x01E0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__PHY_TCK		, 0x04F4, 0x01E0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD1__USBPHY1_RX_DISCON	, 0x04F4, 0x01E0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__OSC32K_32K_OUT	, 0x04F8, 0x01E4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__ENET_RDATA_0	, 0x04F8, 0x01E4, 1, 0x0848, 1, 0)
++MX6_PAD_DECL(ENET_RXD0__ESAI1_HCKT		, 0x04F8, 0x01E4, 2, 0x0868, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__SPDIF_OUT1		, 0x04F8, 0x01E4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__GPIO_1_27		, 0x04F8, 0x01E4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__PHY_TMS		, 0x04F8, 0x01E4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_RXD0__USBPHY1_PLL_CK20DIV	, 0x04F8, 0x01E4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__RESERVED_RSRVED	, 0x04FC, 0x01E8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__ENET_TX_EN		, 0x04FC, 0x01E8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__ESAI1_TX3_RX2	, 0x04FC, 0x01E8, 2, 0x0880, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__GPIO_1_28		, 0x04FC, 0x01E8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__SATA_PHY_TDI	, 0x04FC, 0x01E8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TX_EN__USBPHY2_RX_SQH	, 0x04FC, 0x01E8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__MLB_MLBCLK		, 0x0500, 0x01EC, 0, 0x0900, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__ENET_TDATA_1	, 0x0500, 0x01EC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__ESAI1_TX2_RX3	, 0x0500, 0x01EC, 2, 0x087C, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__ENET_1588_EVENT0_IN	, 0x0500, 0x01EC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__GPIO_1_29		, 0x0500, 0x01EC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__SATA_PHY_TDO	, 0x0500, 0x01EC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD1__USBPHY2_RX_HS_RXD	, 0x0500, 0x01EC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__RESERVED_RSRVED	, 0x0504, 0x01F0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__ENET_TDATA_0	, 0x0504, 0x01F0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__ESAI1_TX4_RX1	, 0x0504, 0x01F0, 2, 0x0884, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__GPIO_1_30		, 0x0504, 0x01F0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__SATA_PHY_TCK	, 0x0504, 0x01F0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_TXD0__USBPHY2_RX_FS_RXD   , 0x0504, 0x01F0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__MLB_MLBDAT		, 0x0508, 0x01F4, 0, 0x0904, 0, 0)
++MX6_PAD_DECL(ENET_MDC__ENET_MDC		, 0x0508, 0x01F4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__ESAI1_TX5_RX0	, 0x0508, 0x01F4, 2, 0x0888, 0, 0)
++MX6_PAD_DECL(ENET_MDC__ENET_1588_EVENT1_IN	, 0x0508, 0x01F4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__GPIO_1_31		, 0x0508, 0x01F4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__SATA_PHY_TMS		, 0x0508, 0x01F4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(ENET_MDC__USBPHY2_RX_DISCON	, 0x0508, 0x01F4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D40__MMDC_DRAM_D_40	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D41__MMDC_DRAM_D_41	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D42__MMDC_DRAM_D_42	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D43__MMDC_DRAM_D_43	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D44__MMDC_DRAM_D_44	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D45__MMDC_DRAM_D_45	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D46__MMDC_DRAM_D_46	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D47__MMDC_DRAM_D_47	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS5__MMDC_DRAM_SDQS_5	, 0x050C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM5__MMDC_DRAM_DQM_5	, 0x0510, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D32__MMDC_DRAM_D_32	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D33__MMDC_DRAM_D_33	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D34__MMDC_DRAM_D_34	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D35__MMDC_DRAM_D_35	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D36__MMDC_DRAM_D_36	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D37__MMDC_DRAM_D_37	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D38__MMDC_DRAM_D_38	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D39__MMDC_DRAM_D_39	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM4__MMDC_DRAM_DQM_4	, 0x0514, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS4__MMDC_DRAM_SDQS_4	, 0x0518, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D24__MMDC_DRAM_D_24	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D25__MMDC_DRAM_D_25	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D26__MMDC_DRAM_D_26	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D27__MMDC_DRAM_D_27	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D28__MMDC_DRAM_D_28	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D29__MMDC_DRAM_D_29	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS3__MMDC_DRAM_SDQS_3	, 0x051C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D30__MMDC_DRAM_D_30	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D31__MMDC_DRAM_D_31	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM3__MMDC_DRAM_DQM_3	, 0x0520, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D16__MMDC_DRAM_D_16	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D17__MMDC_DRAM_D_17	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D18__MMDC_DRAM_D_18	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D19__MMDC_DRAM_D_19	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D20__MMDC_DRAM_D_20	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D21__MMDC_DRAM_D_21	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D22__MMDC_DRAM_D_22	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS2__MMDC_DRAM_SDQS_2	, 0x0524, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D23__MMDC_DRAM_D_23	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM2__MMDC_DRAM_DQM_2	, 0x0528, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A0__MMDC_DRAM_A_0		, 0x052C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A1__MMDC_DRAM_A_1		, 0x0530, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A2__MMDC_DRAM_A_2		, 0x0534, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A3__MMDC_DRAM_A_3		, 0x0538, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A4__MMDC_DRAM_A_4		, 0x053C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A5__MMDC_DRAM_A_5		, 0x0540, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A6__MMDC_DRAM_A_6		, 0x0544, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A7__MMDC_DRAM_A_7		, 0x0548, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A8__MMDC_DRAM_A_8		, 0x054C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A9__MMDC_DRAM_A_9		, 0x0550, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A10__MMDC_DRAM_A_10	, 0x0554, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A11__MMDC_DRAM_A_11	, 0x0558, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A12__MMDC_DRAM_A_12	, 0x055C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A13__MMDC_DRAM_A_13	, 0x0560, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A14__MMDC_DRAM_A_14	, 0x0564, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_A15__MMDC_DRAM_A_15	, 0x0568, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_CAS__MMDC_DRAM_CAS	, 0x056C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_CS0__MMDC_DRAM_CS_0	, 0x0570, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_CS1__MMDC_DRAM_CS_1	, 0x0574, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_RAS__MMDC_DRAM_RAS	, 0x0578, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_RESET__MMDC_DRAM_RESET	, 0x057C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDBA0__MMDC_DRAM_SDBA_0	, 0x0580, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDBA1__MMDC_DRAM_SDBA_1	, 0x0584, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCLK_0__MMDC_DRAM_SDCLK0	, 0x0588, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDBA2__MMDC_DRAM_SDBA_2	, 0x058C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCKE0__MMDC_DRAM_SDCKE_0	, 0x0590, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCLK_1__MMDC_DRAM_SDCLK1	, 0x0594, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDCKE1__MMDC_DRAM_SDCKE_1	, 0x0598, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDODT0__MMDC_DRAM_ODT_0	, 0x059C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDODT1__MMDC_DRAM_ODT_1	, 0x05A0, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDWE__MMDC_DRAM_SDWE	, 0x05A4, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D0__MMDC_DRAM_D_0		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D1__MMDC_DRAM_D_1		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D2__MMDC_DRAM_D_2		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D3__MMDC_DRAM_D_3		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D4__MMDC_DRAM_D_4		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D5__MMDC_DRAM_D_5		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS0__MMDC_DRAM_SDQS_0	, 0x05A8, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D6__MMDC_DRAM_D_6		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D7__MMDC_DRAM_D_7		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM0__MMDC_DRAM_DQM_0	, 0x05AC, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D8__MMDC_DRAM_D_8		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D9__MMDC_DRAM_D_9		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D10__MMDC_DRAM_D_10	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D11__MMDC_DRAM_D_11	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D12__MMDC_DRAM_D_12	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D13__MMDC_DRAM_D_13	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D14__MMDC_DRAM_D_14	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS1__MMDC_DRAM_SDQS_1	, 0x05B0, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D15__MMDC_DRAM_D_15	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM1__MMDC_DRAM_DQM_1	, 0x05B4, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D48__MMDC_DRAM_D_48	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D49__MMDC_DRAM_D_49	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D50__MMDC_DRAM_D_50	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D51__MMDC_DRAM_D_51	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D52__MMDC_DRAM_D_52	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D53__MMDC_DRAM_D_53	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D54__MMDC_DRAM_D_54	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D55__MMDC_DRAM_D_55	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS6__MMDC_DRAM_SDQS_6	, 0x05B8, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM6__MMDC_DRAM_DQM_6	, 0x05BC, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D56__MMDC_DRAM_D_56	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_SDQS7__MMDC_DRAM_SDQS_7	, 0x05C0, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D57__MMDC_DRAM_D_57	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D58__MMDC_DRAM_D_58	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D59__MMDC_DRAM_D_59	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D60__MMDC_DRAM_D_60	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_DQM7__MMDC_DRAM_DQM_7	, 0x05C4, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D61__MMDC_DRAM_D_61	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D62__MMDC_DRAM_D_62	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(DRAM_D63__MMDC_DRAM_D_63	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__ECSPI1_SCLK		, 0x05C8, 0x01F8, 0, 0x07F4, 2, 0)
++MX6_PAD_DECL(KEY_COL0__ENET_RDATA_3		, 0x05C8, 0x01F8, 1, 0x0854, 1, 0)
++MX6_PAD_DECL(KEY_COL0__AUDMUX_AUD5_TXC	, 0x05C8, 0x01F8, 2, 0x07DC, 1, 0)
++MX6_PAD_DECL(KEY_COL0__KPP_COL_0		, 0x05C8, 0x01F8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__UART4_TXD		, 0x05C8, 0x01F8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__UART4_TXD_RXD	, 0x05C8, 0x01F8, 4, 0x0938, 0, 0)
++MX6_PAD_DECL(KEY_COL0__GPIO_4_6		, 0x05C8, 0x01F8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__DCIC1_DCIC_OUT	, 0x05C8, 0x01F8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL0__SRC_ANY_PU_RST	, 0x05C8, 0x01F8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__ECSPI1_MOSI		, 0x05CC, 0x01FC, 0, 0x07FC, 2, 0)
++MX6_PAD_DECL(KEY_ROW0__ENET_TDATA_3		, 0x05CC, 0x01FC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__AUDMUX_AUD5_TXD	, 0x05CC, 0x01FC, 2, 0x07D0, 1, 0)
++MX6_PAD_DECL(KEY_ROW0__KPP_ROW_0		, 0x05CC, 0x01FC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__UART4_RXD		, 0x05CC, 0x01FC, 4, 0x0938, 1, 0)
++MX6_PAD_DECL(KEY_ROW0__GPIO_4_7		, 0x05CC, 0x01FC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__DCIC2_DCIC_OUT	, 0x05CC, 0x01FC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW0__PL301_PER1_HADR_0	, 0x05CC, 0x01FC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__ECSPI1_MISO		, 0x05D0, 0x0200, 0, 0x07F8, 2, 0)
++MX6_PAD_DECL(KEY_COL1__ENET_MDIO		, 0x05D0, 0x0200, 1, 0x0840, 1, 0)
++MX6_PAD_DECL(KEY_COL1__AUDMUX_AUD5_TXFS	, 0x05D0, 0x0200, 2, 0x07E0, 1, 0)
++MX6_PAD_DECL(KEY_COL1__KPP_COL_1		, 0x05D0, 0x0200, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__UART5_TXD		, 0x05D0, 0x0200, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__UART5_TXD_RXD	, 0x05D0, 0x0200, 4, 0x0940, 0, 0)
++MX6_PAD_DECL(KEY_COL1__GPIO_4_8		, 0x05D0, 0x0200, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__USDHC1_VSELECT	, 0x05D0, 0x0200, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL1__PL301MX_PER1_HADR_1	, 0x05D0, 0x0200, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__ECSPI1_SS0		, 0x05D4, 0x0204, 0, 0x0800, 2, 0)
++MX6_PAD_DECL(KEY_ROW1__ENET_COL		, 0x05D4, 0x0204, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__AUDMUX_AUD5_RXD	, 0x05D4, 0x0204, 2, 0x07CC, 1, 0)
++MX6_PAD_DECL(KEY_ROW1__KPP_ROW_1		, 0x05D4, 0x0204, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__UART5_RXD		, 0x05D4, 0x0204, 4, 0x0940, 1, 0)
++MX6_PAD_DECL(KEY_ROW1__GPIO_4_9		, 0x05D4, 0x0204, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__USDHC2_VSELECT	, 0x05D4, 0x0204, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW1__PL301_PER1_HADDR_2	, 0x05D4, 0x0204, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__ECSPI1_SS1		, 0x05D8, 0x0208, 0, 0x0804, 2, 0)
++MX6_PAD_DECL(KEY_COL2__ENET_RDATA_2		, 0x05D8, 0x0208, 1, 0x0850, 1, 0)
++MX6_PAD_DECL(KEY_COL2__CAN1_TXCAN		, 0x05D8, 0x0208, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__KPP_COL_2		, 0x05D8, 0x0208, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__ENET_MDC		, 0x05D8, 0x0208, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__GPIO_4_10		, 0x05D8, 0x0208, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__USBOH3_H1_PWRCTL_WKP , 0x05D8, 0x0208, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL2__PL301_PER1_HADDR_3   , 0x05D8, 0x0208, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__ECSPI1_SS2		, 0x05DC, 0x020C, 0, 0x0808, 1, 0)
++MX6_PAD_DECL(KEY_ROW2__ENET_TDATA_2		, 0x05DC, 0x020C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__CAN1_RXCAN		, 0x05DC, 0x020C, 2, 0x07E4, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__KPP_ROW_2		, 0x05DC, 0x020C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__USDHC2_VSELECT	, 0x05DC, 0x020C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__GPIO_4_11		, 0x05DC, 0x020C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW2__HDMI_TX_CEC_LINE	, 0x05DC, 0x020C, 6, 0x088C, 1, 0)
++MX6_PAD_DECL(KEY_ROW2__PL301_PER1_HADR_4    , 0x05DC, 0x020C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__ECSPI1_SS3		, 0x05E0, 0x0210, 0, 0x080C, 1, 0)
++MX6_PAD_DECL(KEY_COL3__ENET_CRS		, 0x05E0, 0x0210, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__HDMI_TX_DDC_SCL	, 0x05E0, 0x0210, 2, 0x0890, 1, 0)
++MX6_PAD_DECL(KEY_COL3__KPP_COL_3		, 0x05E0, 0x0210, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__I2C2_SCL		, 0x05E0, 0x0210, 20, 0x08A0, 1, 0)
++MX6_PAD_DECL(KEY_COL3__GPIO_4_12		, 0x05E0, 0x0210, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL3__SPDIF_IN1		, 0x05E0, 0x0210, 6, 0x0914, 2, 0)
++MX6_PAD_DECL(KEY_COL3__PL301_PER1_HADR_5	, 0x05E0, 0x0210, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__OSC32K_32K_OUT	, 0x05E4, 0x0214, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__ASRC_ASRC_EXT_CLK	, 0x05E4, 0x0214, 1, 0x07B0, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__HDMI_TX_DDC_SDA	, 0x05E4, 0x0214, 2, 0x0894, 1, 0)
++MX6_PAD_DECL(KEY_ROW3__KPP_ROW_3		, 0x05E4, 0x0214, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__I2C2_SDA		, 0x05E4, 0x0214, 20, 0x08A4, 1, 0)
++MX6_PAD_DECL(KEY_ROW3__GPIO_4_13		, 0x05E4, 0x0214, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__USDHC1_VSELECT	, 0x05E4, 0x0214, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW3__PL301_PER1_HADR_6	, 0x05E4, 0x0214, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__CAN2_TXCAN		, 0x05E8, 0x0218, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__IPU1_SISG_4		, 0x05E8, 0x0218, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__USBOH3_USBOTG_OC	, 0x05E8, 0x0218, 2, 0x0944, 1, 0)
++MX6_PAD_DECL(KEY_COL4__KPP_COL_4		, 0x05E8, 0x0218, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__UART5_CTS		, 0x05E8, 0x0218, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__UART5_RTS		, 0x05E8, 0x0218, 4, 0x093C, 0, 0)
++MX6_PAD_DECL(KEY_COL4__GPIO_4_14		, 0x05E8, 0x0218, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__MMDC_DEBUG_49	, 0x05E8, 0x0218, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_COL4__PL301_PER1_HADDR_7	, 0x05E8, 0x0218, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__CAN2_RXCAN		, 0x05EC, 0x021C, 0, 0x07E8, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__IPU1_SISG_5		, 0x05EC, 0x021C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__USBOH3_USBOTG_PWR	, 0x05EC, 0x021C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__KPP_ROW_4		, 0x05EC, 0x021C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__UART5_CTS		, 0x05EC, 0x021C, 4, 0x093C, 1, 0)
++MX6_PAD_DECL(KEY_ROW4__GPIO_4_15		, 0x05EC, 0x021C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__MMDC_DEBUG_50	, 0x05EC, 0x021C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(KEY_ROW4__PL301_PER1_HADR_8    , 0x05EC, 0x021C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__CCM_CLKO		, 0x05F0, 0x0220, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__KPP_COL_5		, 0x05F0, 0x0220, 2, 0x08E8, 0, 0)
++MX6_PAD_DECL(GPIO_0__ASRC_ASRC_EXT_CLK	, 0x05F0, 0x0220, 3, 0x07B0, 1, 0)
++MX6_PAD_DECL(GPIO_0__EPIT1_EPITO		, 0x05F0, 0x0220, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__GPIO_1_0		, 0x05F0, 0x0220, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__USBOH3_USBH1_PWR	, 0x05F0, 0x0220, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_0__SNVS_HP_WRAP_SNVS_VIO5 , 0x05F0, 0x0220, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__ESAI1_SCKR		, 0x05F4, 0x0224, 0, 0x086C, 1, 0)
++MX6_PAD_DECL(GPIO_1__WDOG2_WDOG_B		, 0x05F4, 0x0224, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__KPP_ROW_5		, 0x05F4, 0x0224, 2, 0x08F4, 0, 0)
++MX6_PAD_DECL(GPIO_1__USB_OTG_ID		, 0x05F4, 0x0224, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__PWM2_PWMO		, 0x05F4, 0x0224, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__GPIO_1_1		, 0x05F4, 0x0224, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__USDHC1_CD		, 0x05F4, 0x0224, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_1__SRC_TESTER_ACK		, 0x05F4, 0x0224, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__ESAI1_FSR		, 0x05F8, 0x0228, 0, 0x085C, 1, 0)
++MX6_PAD_DECL(GPIO_9__WDOG1_WDOG_B		, 0x05F8, 0x0228, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__KPP_COL_6		, 0x05F8, 0x0228, 2, 0x08EC, 0, 0)
++MX6_PAD_DECL(GPIO_9__CCM_REF_EN_B		, 0x05F8, 0x0228, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__PWM1_PWMO		, 0x05F8, 0x0228, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__GPIO_1_9		, 0x05F8, 0x0228, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_9__USDHC1_WP		, 0x05F8, 0x0228, 6, 0x094C, 1, 0)
++MX6_PAD_DECL(GPIO_9__SRC_EARLY_RST		, 0x05F8, 0x0228, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__ESAI1_HCKR		, 0x05FC, 0x022C, 0, 0x0864, 1, 0)
++MX6_PAD_DECL(GPIO_3__OBSERVE_MUX_INT_OUT0	, 0x05FC, 0x022C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__I2C3_SCL		, 0x05FC, 0x022C, 18, 0x08A8, 1, 0)
++MX6_PAD_DECL(GPIO_3__ANATOP_24M_OUT		, 0x05FC, 0x022C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__CCM_CLKO2		, 0x05FC, 0x022C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__GPIO_1_3		, 0x05FC, 0x022C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_3__USBOH3_USBH1_OC	, 0x05FC, 0x022C, 6, 0x0948, 1, 0)
++MX6_PAD_DECL(GPIO_3__MLB_MLBCLK		, 0x05FC, 0x022C, 7, 0x0900, 1, 0)
++MX6_PAD_DECL(GPIO_6__ESAI1_SCKT		, 0x0600, 0x0230, 0, 0x0870, 1, 0)
++MX6_PAD_DECL(GPIO_6__OBSERVE_MUX_INT_OUT1	, 0x0600, 0x0230, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__I2C3_SDA		, 0x0600, 0x0230, 18, 0x08AC, 1, 0)
++MX6_PAD_DECL(GPIO_6__CCM_CCM_OUT_0		, 0x0600, 0x0230, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__CSU_CSU_INT_DEB	, 0x0600, 0x0230, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__GPIO_1_6		, 0x0600, 0x0230, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__USDHC2_LCTL		, 0x0600, 0x0230, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_6__MLB_MLBSIG		, 0x0600, 0x0230, 7, 0x0908, 1, 0)
++MX6_PAD_DECL(GPIO_2__ESAI1_FST		, 0x0604, 0x0234, 0, 0x0860, 1, 0)
++MX6_PAD_DECL(GPIO_2__OBSERVE_MUX_INT_OUT2	, 0x0604, 0x0234, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__KPP_ROW_6		, 0x0604, 0x0234, 2, 0x08F8, 1, 0)
++MX6_PAD_DECL(GPIO_2__CCM_CCM_OUT_1		, 0x0604, 0x0234, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__CSU_CSU_ALARM_AUT_0	, 0x0604, 0x0234, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__GPIO_1_2		, 0x0604, 0x0234, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__USDHC2_WP		, 0x0604, 0x0234, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_2__MLB_MLBDAT		, 0x0604, 0x0234, 7, 0x0904, 1, 0)
++MX6_PAD_DECL(GPIO_4__ESAI1_HCKT		, 0x0608, 0x0238, 0, 0x0868, 1, 0)
++MX6_PAD_DECL(GPIO_4__OBSERVE_MUX_INT_OUT3	, 0x0608, 0x0238, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__KPP_COL_7		, 0x0608, 0x0238, 2, 0x08F0, 1, 0)
++MX6_PAD_DECL(GPIO_4__CCM_CCM_OUT_2		, 0x0608, 0x0238, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__CSU_CSU_ALARM_AUT_1	, 0x0608, 0x0238, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__GPIO_1_4		, 0x0608, 0x0238, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__USDHC2_CD		, 0x0608, 0x0238, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_4__OCOTP_CRL_WRAR_FUSE_LA , 0x0608, 0x0238, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__ESAI1_TX2_RX3		, 0x060C, 0x023C, 0, 0x087C, 1, 0)
++MX6_PAD_DECL(GPIO_5__OBSERVE_MUX_INT_OUT4	, 0x060C, 0x023C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__KPP_ROW_7		, 0x060C, 0x023C, 2, 0x08FC, 1, 0)
++MX6_PAD_DECL(GPIO_5__CCM_CLKO		, 0x060C, 0x023C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__CSU_CSU_ALARM_AUT_2	, 0x060C, 0x023C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__GPIO_1_5		, 0x060C, 0x023C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_5__I2C3_SCL		, 0x060C, 0x023C, 22, 0x08A8, 2, 0)
++MX6_PAD_DECL(GPIO_5__CHEETAH_EVENTI		, 0x060C, 0x023C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__ESAI1_TX4_RX1		, 0x0610, 0x0240, 0, 0x0884, 1, 0)
++MX6_PAD_DECL(GPIO_7__ECSPI5_RDY		, 0x0610, 0x0240, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__EPIT1_EPITO		, 0x0610, 0x0240, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__CAN1_TXCAN		, 0x0610, 0x0240, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__UART2_TXD		, 0x0610, 0x0240, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__UART2_TXD_RXD		, 0x0610, 0x0240, 4, 0x0928, 2, 0)
++MX6_PAD_DECL(GPIO_7__GPIO_1_7		, 0x0610, 0x0240, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__SPDIF_PLOCK		, 0x0610, 0x0240, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_7__USBOH3_OTGUSB_HST_MODE	, 0x0610, 0x0240, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__ESAI1_TX5_RX0		, 0x0614, 0x0244, 0, 0x0888, 1, 0)
++MX6_PAD_DECL(GPIO_8__ANATOP_ANATOP_32K_OUT	, 0x0614, 0x0244, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__EPIT2_EPITO		, 0x0614, 0x0244, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__CAN1_RXCAN		, 0x0614, 0x0244, 3, 0x07E4, 1, 0)
++MX6_PAD_DECL(GPIO_8__UART2_RXD		, 0x0614, 0x0244, 4, 0x0928, 3, 0)
++MX6_PAD_DECL(GPIO_8__GPIO_1_8		, 0x0614, 0x0244, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__SPDIF_SRCLK		, 0x0614, 0x0244, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_8__USBOH3_OTG_PWRCTL_WAK	, 0x0614, 0x0244, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__ESAI1_TX3_RX2		, 0x0618, 0x0248, 0, 0x0880, 1, 0)
++MX6_PAD_DECL(GPIO_16__ENET_1588_EVENT2_IN	, 0x0618, 0x0248, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT , 0x0618, 0x0248, 2, 0x083C, 1, 0)
++MX6_PAD_DECL(GPIO_16__USDHC1_LCTL		, 0x0618, 0x0248, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__SPDIF_IN1		, 0x0618, 0x0248, 4, 0x0914, 3, 0)
++MX6_PAD_DECL(GPIO_16__GPIO_7_11		, 0x0618, 0x0248, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_16__I2C3_SDA		, 0x0618, 0x0248, 22, 0x08AC, 2, 0)
++MX6_PAD_DECL(GPIO_16__SJC_DE_B		, 0x0618, 0x0248, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__ESAI1_TX0		, 0x061C, 0x024C, 0, 0x0874, 0, 0)
++MX6_PAD_DECL(GPIO_17__ENET_1588_EVENT3_IN	, 0x061C, 0x024C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__CCM_PMIC_RDY		, 0x061C, 0x024C, 2, 0x07F0, 1, 0)
++MX6_PAD_DECL(GPIO_17__SDMA_SDMA_EXT_EVENT_0	, 0x061C, 0x024C, 3, 0x090C, 1, 0)
++MX6_PAD_DECL(GPIO_17__SPDIF_OUT1		, 0x061C, 0x024C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__GPIO_7_12		, 0x061C, 0x024C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_17__SJC_JTAG_ACT		, 0x061C, 0x024C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__ESAI1_TX1		, 0x0620, 0x0250, 0, 0x0878, 0, 0)
++MX6_PAD_DECL(GPIO_18__ENET_RX_CLK		, 0x0620, 0x0250, 1, 0x0844, 1, 0)
++MX6_PAD_DECL(GPIO_18__USDHC3_VSELECT	, 0x0620, 0x0250, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__SDMA_SDMA_EXT_EVENT_1 , 0x0620, 0x0250, 3, 0x0910, 1, 0)
++MX6_PAD_DECL(GPIO_18__ASRC_ASRC_EXT_CLK	, 0x0620, 0x0250, 4, 0x07B0, 2, 0)
++MX6_PAD_DECL(GPIO_18__GPIO_7_13		, 0x0620, 0x0250, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__SNVS_HP_WRA_SNVS_VIO5 , 0x0620, 0x0250, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_18__SRC_SYSTEM_RST	, 0x0620, 0x0250, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__KPP_COL_5		, 0x0624, 0x0254, 0, 0x08E8, 1, 0)
++MX6_PAD_DECL(GPIO_19__ENET_1588_EVENT0_OUT	, 0x0624, 0x0254, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__SPDIF_OUT1		, 0x0624, 0x0254, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__CCM_CLKO		, 0x0624, 0x0254, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__ECSPI1_RDY		, 0x0624, 0x0254, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__GPIO_4_5		, 0x0624, 0x0254, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__ENET_TX_ER		, 0x0624, 0x0254, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(GPIO_19__SRC_INT_BOOT		, 0x0624, 0x0254, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__IPU1_CSI0_PIXCLK	, 0x0628, 0x0258, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__PCIE_CTRL_MUX_12	, 0x0628, 0x0258, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__SDMA_DEBUG_PC_0	, 0x0628, 0x0258, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__GPIO_5_18		, 0x0628, 0x0258, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK___MMDC_DEBUG_29	, 0x0628, 0x0258, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_PIXCLK__CHEETAH_EVENTO	, 0x0628, 0x0258, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__IPU1_CSI0_HSYNC	, 0x062C, 0x025C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__PCIE_CTRL_MUX_13	, 0x062C, 0x025C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__CCM_CLKO		, 0x062C, 0x025C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__SDMA_DEBUG_PC_1	, 0x062C, 0x025C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__GPIO_5_19		, 0x062C, 0x025C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__MMDC_MMDC_DEBUG_30	, 0x062C, 0x025C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_MCLK__CHEETAH_TRCTL	, 0x062C, 0x025C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__IPU1_CSI0_DA_EN	, 0x0630, 0x0260, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__WEIM_WEIM_D_0	, 0x0630, 0x0260, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__PCIE_CTRL_MUX_14	, 0x0630, 0x0260, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__SDMA_DEBUG_PC_2	, 0x0630, 0x0260, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__GPIO_5_20	, 0x0630, 0x0260, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__MMDC_DEBUG_31	, 0x0630, 0x0260, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DATA_EN__CHEETAH_TRCLK	, 0x0630, 0x0260, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__IPU1_CSI0_VSYNC	, 0x0634, 0x0264, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__WEIM_WEIM_D_1	, 0x0634, 0x0264, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__PCIE_CTRL_MUX_15	, 0x0634, 0x0264, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__SDMA_DEBUG_PC_3	, 0x0634, 0x0264, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__GPIO_5_21		, 0x0634, 0x0264, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__MMDC_DEBUG_32	, 0x0634, 0x0264, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_VSYNC__CHEETAH_TRACE_0	, 0x0634, 0x0264, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__IPU1_CSI0_D_4	, 0x0638, 0x0268, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__WEIM_WEIM_D_2	, 0x0638, 0x0268, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__ECSPI1_SCLK		, 0x0638, 0x0268, 2, 0x07F4, 3, 0)
++MX6_PAD_DECL(CSI0_DAT4__KPP_COL_5		, 0x0638, 0x0268, 3, 0x08E8, 2, 0)
++MX6_PAD_DECL(CSI0_DAT4__AUDMUX_AUD3_TXC	, 0x0638, 0x0268, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__GPIO_5_22		, 0x0638, 0x0268, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__MMDC_DEBUG_43	, 0x0638, 0x0268, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT4__CHEETAH_TRACE_1	, 0x0638, 0x0268, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__IPU1_CSI0_D_5	, 0x063C, 0x026C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__WEIM_WEIM_D_3	, 0x063C, 0x026C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__ECSPI1_MOSI		, 0x063C, 0x026C, 2, 0x07FC, 3, 0)
++MX6_PAD_DECL(CSI0_DAT5__KPP_ROW_5		, 0x063C, 0x026C, 3, 0x08F4, 1, 0)
++MX6_PAD_DECL(CSI0_DAT5__AUDMUX_AUD3_TXD	, 0x063C, 0x026C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__GPIO_5_23		, 0x063C, 0x026C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__MMDC_MMDC_DEBUG_44	, 0x063C, 0x026C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT5__CHEETAH_TRACE_2	, 0x063C, 0x026C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__IPU1_CSI0_D_6	, 0x0640, 0x0270, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__WEIM_WEIM_D_4	, 0x0640, 0x0270, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__ECSPI1_MISO		, 0x0640, 0x0270, 2, 0x07F8, 3, 0)
++MX6_PAD_DECL(CSI0_DAT6__KPP_COL_6		, 0x0640, 0x0270, 3, 0x08EC, 1, 0)
++MX6_PAD_DECL(CSI0_DAT6__AUDMUX_AUD3_TXFS	, 0x0640, 0x0270, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__GPIO_5_24		, 0x0640, 0x0270, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__MMDC_MMDC_DEBUG_45	, 0x0640, 0x0270, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT6__CHEETAH_TRACE_3	, 0x0640, 0x0270, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__IPU1_CSI0_D_7	, 0x0644, 0x0274, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__WEIM_WEIM_D_5	, 0x0644, 0x0274, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__ECSPI1_SS0		, 0x0644, 0x0274, 2, 0x0800, 3, 0)
++MX6_PAD_DECL(CSI0_DAT7__KPP_ROW_6		, 0x0644, 0x0274, 3, 0x08F8, 2, 0)
++MX6_PAD_DECL(CSI0_DAT7__AUDMUX_AUD3_RXD	, 0x0644, 0x0274, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__GPIO_5_25		, 0x0644, 0x0274, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__MMDC_MMDC_DEBUG_46	, 0x0644, 0x0274, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT7__CHEETAH_TRACE_4	, 0x0644, 0x0274, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__IPU1_CSI0_D_8	, 0x0648, 0x0278, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__WEIM_WEIM_D_6	, 0x0648, 0x0278, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__ECSPI2_SCLK		, 0x0648, 0x0278, 2, 0x0810, 2, 0)
++MX6_PAD_DECL(CSI0_DAT8__KPP_COL_7		, 0x0648, 0x0278, 3, 0x08F0, 2, 0)
++MX6_PAD_DECL(CSI0_DAT8__I2C1_SDA		, 0x0648, 0x0278, 20, 0x089C, 1, 0)
++MX6_PAD_DECL(CSI0_DAT8__GPIO_5_26		, 0x0648, 0x0278, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__MMDC_MMDC_DEBUG_47	, 0x0648, 0x0278, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT8__CHEETAH_TRACE_5	, 0x0648, 0x0278, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__IPU1_CSI0_D_9	, 0x064C, 0x027C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__WEIM_WEIM_D_7	, 0x064C, 0x027C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__ECSPI2_MOSI		, 0x064C, 0x027C, 2, 0x0818, 2, 0)
++MX6_PAD_DECL(CSI0_DAT9__KPP_ROW_7		, 0x064C, 0x027C, 3, 0x08FC, 2, 0)
++MX6_PAD_DECL(CSI0_DAT9__I2C1_SCL		, 0x064C, 0x027C, 20, 0x0898, 1, 0)
++MX6_PAD_DECL(CSI0_DAT9__GPIO_5_27		, 0x064C, 0x027C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__MMDC_MMDC_DEBUG_48	, 0x064C, 0x027C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT9__CHEETAH_TRACE_6	, 0x064C, 0x027C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__IPU1_CSI0_D_10	, 0x0650, 0x0280, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__AUDMUX_AUD3_RXC	, 0x0650, 0x0280, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__ECSPI2_MISO	, 0x0650, 0x0280, 2, 0x0814, 2, 0)
++MX6_PAD_DECL(CSI0_DAT10__UART1_TXD		, 0x0650, 0x0280, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__UART1_TXD_RXD	, 0x0650, 0x0280, 3, 0x0920, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__SDMA_DEBUG_PC_4	, 0x0650, 0x0280, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__GPIO_5_28		, 0x0650, 0x0280, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__MMDC_MMDC_DEBUG_33	, 0x0650, 0x0280, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT10__CHEETAH_TRACE_7	, 0x0650, 0x0280, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__IPU1_CSI0_D_11	, 0x0654, 0x0284, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__AUDMUX_AUD3_RXFS	, 0x0654, 0x0284, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__ECSPI2_SS0		, 0x0654, 0x0284, 2, 0x081C, 2, 0)
++MX6_PAD_DECL(CSI0_DAT11__UART1_RXD		, 0x0654, 0x0284, 3, 0x0920, 1, 0)
++MX6_PAD_DECL(CSI0_DAT11__SDMA_DEBUG_PC_5	, 0x0654, 0x0284, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__GPIO_5_29		, 0x0654, 0x0284, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__MMDC_MMDC_DEBUG_34	, 0x0654, 0x0284, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT11__CHEETAH_TRACE_8	, 0x0654, 0x0284, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__IPU1_CSI0_D_12	, 0x0658, 0x0288, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__WEIM_WEIM_D_8	, 0x0658, 0x0288, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__PCIE_CTRL_MUX_16	, 0x0658, 0x0288, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__UART4_TXD		, 0x0658, 0x0288, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__UART4_TXD_RXD	, 0x0658, 0x0288, 3, 0x0938, 2, 0)
++MX6_PAD_DECL(CSI0_DAT12__SDMA_DEBUG_PC_6	, 0x0658, 0x0288, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__GPIO_5_30		, 0x0658, 0x0288, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__MMDC_MMDC_DEBUG_35	, 0x0658, 0x0288, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT12__CHEETAH_TRACE_9	, 0x0658, 0x0288, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__IPU1_CSI0_D_13	, 0x065C, 0x028C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__WEIM_WEIM_D_9	, 0x065C, 0x028C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__PCIE_CTRL_MUX_17	, 0x065C, 0x028C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__UART4_RXD		, 0x065C, 0x028C, 3, 0x0938, 3, 0)
++MX6_PAD_DECL(CSI0_DAT13__SDMA_DEBUG_PC_7	, 0x065C, 0x028C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__GPIO_5_31		, 0x065C, 0x028C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__MMDC_MMDC_DEBUG_36	, 0x065C, 0x028C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT13__CHEETAH_TRACE_10	, 0x065C, 0x028C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__IPU1_CSI0_D_14	, 0x0660, 0x0290, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__WEIM_WEIM_D_10	, 0x0660, 0x0290, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__PCIE_CTRL_MUX_18	, 0x0660, 0x0290, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__UART5_TXD		, 0x0660, 0x0290, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__UART5_TXD_RXD	, 0x0660, 0x0290, 3, 0x0940, 2, 0)
++MX6_PAD_DECL(CSI0_DAT14__SDMA_DEBUG_PC_8	, 0x0660, 0x0290, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__GPIO_6_0		, 0x0660, 0x0290, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__MMDC_MMDC_DEBUG_37	, 0x0660, 0x0290, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT14__CHEETAH_TRACE_11	, 0x0660, 0x0290, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__IPU1_CSI0_D_15	, 0x0664, 0x0294, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__WEIM_WEIM_D_11	, 0x0664, 0x0294, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__PCIE_CTRL_MUX_19	, 0x0664, 0x0294, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__UART5_RXD		, 0x0664, 0x0294, 3, 0x0940, 3, 0)
++MX6_PAD_DECL(CSI0_DAT15__SDMA_DEBUG_PC_9	, 0x0664, 0x0294, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__GPIO_6_1		, 0x0664, 0x0294, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__MMDC_MMDC_DEBUG_38	, 0x0664, 0x0294, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT15__CHEETAH_TRACE_12	, 0x0664, 0x0294, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__IPU1_CSI0_D_16	, 0x0668, 0x0298, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__WEIM_WEIM_D_12	, 0x0668, 0x0298, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__PCIE_CTRL_MUX_20	, 0x0668, 0x0298, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__UART4_CTS		, 0x0668, 0x0298, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__UART4_RTS		, 0x0668, 0x0298, 3, 0x0934, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__SDMA_DEBUG_PC_10	, 0x0668, 0x0298, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__GPIO_6_2		, 0x0668, 0x0298, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__MMDC_MMDC_DEBUG_39	, 0x0668, 0x0298, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT16__CHEETAH_TRACE_13	, 0x0668, 0x0298, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__IPU1_CSI0_D_17	, 0x066C, 0x029C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__WEIM_WEIM_D_13	, 0x066C, 0x029C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__PCIE_CTRL_MUX_21	, 0x066C, 0x029C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__UART4_CTS		, 0x066C, 0x029C, 3, 0x0934, 1, 0)
++MX6_PAD_DECL(CSI0_DAT17__SDMA_DEBUG_PC_11	, 0x066C, 0x029C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__GPIO_6_3		, 0x066C, 0x029C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__MMDC_MMDC_DEBUG_40	, 0x066C, 0x029C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT17__CHEETAH_TRACE_14	, 0x066C, 0x029C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__IPU1_CSI0_D_18	, 0x0670, 0x02A0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__WEIM_WEIM_D_14	, 0x0670, 0x02A0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__PCIE_CTRL_MUX_22	, 0x0670, 0x02A0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__UART5_CTS		, 0x0670, 0x02A0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__UART5_RTS		, 0x0670, 0x02A0, 3, 0x093C, 2, 0)
++MX6_PAD_DECL(CSI0_DAT18__SDMA_DEBUG_PC_12	, 0x0670, 0x02A0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__GPIO_6_4		, 0x0670, 0x02A0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__MMDC_MMDC_DEBUG_41	, 0x0670, 0x02A0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT18__CHEETAH_TRACE_15	, 0x0670, 0x02A0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__IPU1_CSI0_D_19	, 0x0674, 0x02A4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__WEIM_WEIM_D_15	, 0x0674, 0x02A4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__PCIE_CTRL_MUX_23	, 0x0674, 0x02A4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__UART5_CTS		, 0x0674, 0x02A4, 3, 0x093C, 3, 0)
++MX6_PAD_DECL(CSI0_DAT19__SDMA_DEBUG_PC_13	, 0x0674, 0x02A4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__GPIO_6_5		, 0x0674, 0x02A4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__MMDC_MMDC_DEBUG_42	, 0x0674, 0x02A4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(CSI0_DAT19__ANATOP_TESTO_9	, 0x0674, 0x02A4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TMS__SJC_TMS		, 0x0678, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_MOD__SJC_MOD		, 0x067C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TRSTB__SJC_TRSTB		, 0x0680, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TDI__SJC_TDI		, 0x0684, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TCK__SJC_TCK		, 0x0688, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(JTAG_TDO__SJC_TDO		, 0x068C, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX3_P__LDB_LVDS1_TX3	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX2_P__LDB_LVDS1_TX2	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_CLK_P__LDB_LVDS1_CLK	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX1_P__LDB_LVDS1_TX1	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS1_TX0_P__LDB_LVDS1_TX0	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX3_P__LDB_LVDS0_TX3	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_CLK_P__LDB_LVDS0_CLK	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX2_P__LDB_LVDS0_TX2	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX1_P__LDB_LVDS0_TX1	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(LVDS0_TX0_P__LDB_LVDS0_TX0	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(TAMPER__SNVS_LP_WRAP_SNVS_TD1	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(PMIC_ON_REQ__SNVS_LPWRAP_WKALM , NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(PMIC_STBY_REQ__CCM_PMIC_STBYRQ , NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(POR_B__SRC_POR_B		, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(BOOT_MODE1__SRC_BOOT_MODE_1	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(RESET_IN_B__SRC_RESET_B	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(BOOT_MODE0__SRC_BOOT_MODE_0	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(TEST_MODE__TCU_TEST_MODE	, NO_PAD_I, NO_MUX_I, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__USDHC3_DAT7		, 0x0690, 0x02A8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__UART1_TXD		, 0x0690, 0x02A8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__UART1_TXD_RXD	, 0x0690, 0x02A8, 1, 0x0920, 2, 0)
++MX6_PAD_DECL(SD3_DAT7__PCIE_CTRL_MUX_24	, 0x0690, 0x02A8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__USBOH3_UH3_DFD_OUT_0	, 0x0690, 0x02A8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__USBOH3_UH2_DFD_OUT_0	, 0x0690, 0x02A8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__GPIO_6_17		, 0x0690, 0x02A8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__MIPI_CORE_DPHY_IN_12	, 0x0690, 0x02A8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT7__USBPHY2_CLK20DIV	, 0x0690, 0x02A8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__USDHC3_DAT6		, 0x0694, 0x02AC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__UART1_RXD		, 0x0694, 0x02AC, 1, 0x0920, 3, 0)
++MX6_PAD_DECL(SD3_DAT6__PCIE_CTRL_MUX_25	, 0x0694, 0x02AC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__USBOH3_UH3_DFD_OUT_1 , 0x0694, 0x02AC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__USBOH3_UH2_DFD_OUT_1 , 0x0694, 0x02AC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__GPIO_6_18		, 0x0694, 0x02AC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__MIPI_CORE_DPHY_IN_13	, 0x0694, 0x02AC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT6__ANATOP_TESTO_10	, 0x0694, 0x02AC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__USDHC3_DAT5		, 0x0698, 0x02B0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__UART2_TXD		, 0x0698, 0x02B0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__UART2_TXD_RXD	, 0x0698, 0x02B0, 1, 0x0928, 4, 0)
++MX6_PAD_DECL(SD3_DAT5__PCIE_CTRL_MUX_26	, 0x0698, 0x02B0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__USBOH3_UH3_DFD_OUT_2	, 0x0698, 0x02B0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__USBOH3_UH2_DFD_OUT_2	, 0x0698, 0x02B0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__GPIO_7_0		, 0x0698, 0x02B0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__MIPI_CORE_DPHY_IN_14	, 0x0698, 0x02B0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT5__ANATOP_TESTO_11	, 0x0698, 0x02B0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__USDHC3_DAT4		, 0x069C, 0x02B4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__UART2_RXD		, 0x069C, 0x02B4, 1, 0x0928, 5, 0)
++MX6_PAD_DECL(SD3_DAT4__PCIE_CTRL_MUX_27	, 0x069C, 0x02B4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__USBOH3_UH3_DFD_OUT_3	, 0x069C, 0x02B4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__USBOH3_UH2_DFD_OUT_3	, 0x069C, 0x02B4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__GPIO_7_1		, 0x069C, 0x02B4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__MIPI_CORE_DPHY_IN_15	, 0x069C, 0x02B4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT4__ANATOP_TESTO_12	, 0x069C, 0x02B4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__USDHC3_CMD		, 0x06A0, 0x02B8, 16, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__UART2_CTS		, 0x06A0, 0x02B8, 1, 0x0924, 2, 0)
++MX6_PAD_DECL(SD3_CMD__CAN1_TXCAN		, 0x06A0, 0x02B8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__USBOH3_UH3_DFD_OUT_4	, 0x06A0, 0x02B8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__USBOH3_UH2_DFD_OUT_4	, 0x06A0, 0x02B8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__GPIO_7_2		, 0x06A0, 0x02B8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__MIPI_CORE_DPHY_IN_16	, 0x06A0, 0x02B8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CMD__ANATOP_TESTO_13	, 0x06A0, 0x02B8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__USDHC3_CLK		, 0x06A4, 0x02BC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__UART2_CTS		, 0x06A4, 0x02BC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__UART2_RTS		, 0x06A4, 0x02BC, 1, 0x0924, 3, 0)
++MX6_PAD_DECL(SD3_CLK__CAN1_RXCAN		, 0x06A4, 0x02BC, 2, 0x07E4, 2, 0)
++MX6_PAD_DECL(SD3_CLK__USBOH3_UH3_DFD_OUT_5	, 0x06A4, 0x02BC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__USBOH3_UH2_DFD_OUT_5	, 0x06A4, 0x02BC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__GPIO_7_3		, 0x06A4, 0x02BC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__MIPI_CORE_DPHY_IN_17	, 0x06A4, 0x02BC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_CLK__ANATOP_TESTO_14	, 0x06A4, 0x02BC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__USDHC3_DAT0		, 0x06A8, 0x02C0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__UART1_CTS		, 0x06A8, 0x02C0, 1, 0x091C, 2, 0)
++MX6_PAD_DECL(SD3_DAT0__CAN2_TXCAN		, 0x06A8, 0x02C0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__USBOH3_UH3_DFD_OUT_6	, 0x06A8, 0x02C0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__USBOH3_UH2_DFD_OUT_6	, 0x06A8, 0x02C0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__GPIO_7_4		, 0x06A8, 0x02C0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__MIPI_CORE_DPHY_IN_18	, 0x06A8, 0x02C0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT0__ANATOP_TESTO_15	, 0x06A8, 0x02C0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__USDHC3_DAT1		, 0x06AC, 0x02C4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__UART1_CTS		, 0x06AC, 0x02C4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__UART1_RTS		, 0x06AC, 0x02C4, 1, 0x091C, 3, 0)
++MX6_PAD_DECL(SD3_DAT1__CAN2_RXCAN		, 0x06AC, 0x02C4, 2, 0x07E8, 1, 0)
++MX6_PAD_DECL(SD3_DAT1__USBOH3_UH3_DFD_OUT_7	, 0x06AC, 0x02C4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__USBOH3_UH2_DFD_OUT_7	, 0x06AC, 0x02C4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__GPIO_7_5		, 0x06AC, 0x02C4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__MIPI_CORE_DPHY_IN_19 , 0x06AC, 0x02C4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT1__ANATOP_TESTI_0	, 0x06AC, 0x02C4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__USDHC3_DAT2		, 0x06B0, 0x02C8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__PCIE_CTRL_MUX_28	, 0x06B0, 0x02C8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__USBOH3_UH3_DFD_OUT_8	, 0x06B0, 0x02C8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__USBOH3_UH2_DFD_OUT_8	, 0x06B0, 0x02C8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__GPIO_7_6		, 0x06B0, 0x02C8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__MIPI_CORE_DPHY_IN_20	, 0x06B0, 0x02C8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT2__ANATOP_TESTI_1	, 0x06B0, 0x02C8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__USDHC3_DAT3		, 0x06B4, 0x02CC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__UART3_CTS		, 0x06B4, 0x02CC, 1, 0x092C, 4, 0)
++MX6_PAD_DECL(SD3_DAT3__PCIE_CTRL_MUX_29	, 0x06B4, 0x02CC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__USBOH3_UH3_DFD_OUT_9	, 0x06B4, 0x02CC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__USBOH3_UH2_DFD_OUT_9	, 0x06B4, 0x02CC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__GPIO_7_7		, 0x06B4, 0x02CC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__MIPI_CORE_DPHY_IN_21	, 0x06B4, 0x02CC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_DAT3__ANATOP_TESTI_2	, 0x06B4, 0x02CC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__USDHC3_RST		, 0x06B8, 0x02D0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__UART3_CTS		, 0x06B8, 0x02D0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__UART3_RTS		, 0x06B8, 0x02D0, 1, 0x092C, 5, 0)
++MX6_PAD_DECL(SD3_RST__PCIE_CTRL_MUX_30	, 0x06B8, 0x02D0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__USBOH3_UH3_DFD_OUT_10	, 0x06B8, 0x02D0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__USBOH3_UH2_DFD_OUT_10	, 0x06B8, 0x02D0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__GPIO_7_8		, 0x06B8, 0x02D0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__MIPI_CORE_DPHY_IN_22	, 0x06B8, 0x02D0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD3_RST__ANATOP_ANATOP_TESTI_3	, 0x06B8, 0x02D0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__RAWNAND_CLE		, 0x06BC, 0x02D4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__IPU2_SISG_4		, 0x06BC, 0x02D4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__PCIE_CTRL_MUX_31	, 0x06BC, 0x02D4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__USBOH3_UH3_DFD_OT11 , 0x06BC, 0x02D4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__USBOH3_UH2_DFD_OT11	, 0x06BC, 0x02D4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__GPIO_6_7		, 0x06BC, 0x02D4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__MIPI_CORE_DPHY_IN23 , 0x06BC, 0x02D4, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CLE__TPSMP_HTRANS_0	, 0x06BC, 0x02D4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__RAWNAND_ALE		, 0x06C0, 0x02D8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__USDHC4_RST		, 0x06C0, 0x02D8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__PCIE_CTRL_MUX_0	, 0x06C0, 0x02D8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__USBOH3_UH3_DFD_OT12	, 0x06C0, 0x02D8, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__USBOH3_UH2_DFD_OT12	, 0x06C0, 0x02D8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__GPIO_6_8		, 0x06C0, 0x02D8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__MIPI_CR_DPHY_IN_24	, 0x06C0, 0x02D8, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_ALE__TPSMP_HTRANS_1	, 0x06C0, 0x02D8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__RAWNAND_RESETN	, 0x06C4, 0x02DC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__IPU2_SISG_5	, 0x06C4, 0x02DC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__PCIE_CTRL__MUX_1	, 0x06C4, 0x02DC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__USBOH3_UH3_DFDOT13 , 0x06C4, 0x02DC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__USBOH3_UH2_DFDOT13 , 0x06C4, 0x02DC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__GPIO_6_9		, 0x06C4, 0x02DC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__MIPI_CR_DPHY_OUT32	, 0x06C4, 0x02DC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_WP_B__PL301_PER1_HSIZE_0 , 0x06C4, 0x02DC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__RAWNAND_READY0	, 0x06C8, 0x02E0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__IPU2_DI0_PIN1	, 0x06C8, 0x02E0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__PCIE_CTRL_MUX_2	, 0x06C8, 0x02E0, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__USBOH3_UH3_DFD_OT14 , 0x06C8, 0x02E0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__USBOH3_UH2_DFD_OT14 , 0x06C8, 0x02E0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__GPIO_6_10		, 0x06C8, 0x02E0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__MIPI_CR_DPHY_OUT_33	, 0x06C8, 0x02E0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_RB0__PL301_PER1_HSIZE_1	, 0x06C8, 0x02E0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__RAWNAND_CE0N	, 0x06CC, 0x02E4, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__USBOH3_UH3_DFD_OT15 , 0x06CC, 0x02E4, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__USBOH3_UH2_DFD_OT15 , 0x06CC, 0x02E4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__GPIO_6_11		, 0x06CC, 0x02E4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS0__PL301_PER1_HSIZE_2	, 0x06CC, 0x02E4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__RAWNAND_CE1N	, 0x06D0, 0x02E8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__USDHC4_VSELECT	, 0x06D0, 0x02E8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__USDHC3_VSELECT	, 0x06D0, 0x02E8, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__PCIE_CTRL_MUX_3	, 0x06D0, 0x02E8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__GPIO_6_14		, 0x06D0, 0x02E8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS1__PL301_PER1_HRDYOUT	, 0x06D0, 0x02E8, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__RAWNAND_CE2N	, 0x06D4, 0x02EC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__IPU1_SISG_0		, 0x06D4, 0x02EC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__ESAI1_TX0		, 0x06D4, 0x02EC, 2, 0x0874, 1, 0)
++MX6_PAD_DECL(NANDF_CS2__WEIM_WEIM_CRE	, 0x06D4, 0x02EC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__CCM_CLKO2		, 0x06D4, 0x02EC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__GPIO_6_15		, 0x06D4, 0x02EC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS2__IPU2_SISG_0		, 0x06D4, 0x02EC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__RAWNAND_CE3N	, 0x06D8, 0x02F0, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__IPU1_SISG_1		, 0x06D8, 0x02F0, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__ESAI1_TX1		, 0x06D8, 0x02F0, 2, 0x0878, 1, 0)
++MX6_PAD_DECL(NANDF_CS3__WEIM_WEIM_A_26	, 0x06D8, 0x02F0, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__PCIE_CTRL_MUX_4	, 0x06D8, 0x02F0, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__GPIO_6_16		, 0x06D8, 0x02F0, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__IPU2_SISG_1		, 0x06D8, 0x02F0, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_CS3__TPSMP_CLK		, 0x06D8, 0x02F0, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__USDHC4_CMD		, 0x06DC, 0x02F4, 16, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__RAWNAND_RDN		, 0x06DC, 0x02F4, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__UART3_TXD		, 0x06DC, 0x02F4, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__UART3_TXD_RXD		, 0x06DC, 0x02F4, 2, 0x0930, 2, 0)
++MX6_PAD_DECL(SD4_CMD__PCIE_CTRL_MUX_5	, 0x06DC, 0x02F4, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__GPIO_7_9		, 0x06DC, 0x02F4, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CMD__TPSMP_HDATA_DIR	, 0x06DC, 0x02F4, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__USDHC4_CLK		, 0x06E0, 0x02F8, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__RAWNAND_WRN		, 0x06E0, 0x02F8, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__UART3_RXD		, 0x06E0, 0x02F8, 2, 0x0930, 3, 0)
++MX6_PAD_DECL(SD4_CLK__PCIE_CTRL_MUX_6	, 0x06E0, 0x02F8, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_CLK__GPIO_7_10		, 0x06E0, 0x02F8, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__RAWNAND_D0		, 0x06E4, 0x02FC, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__USDHC1_DAT4		, 0x06E4, 0x02FC, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__GPU3D_GPU_DBG_OUT_0	, 0x06E4, 0x02FC, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__USBOH3_UH2_DFD_OUT16	, 0x06E4, 0x02FC, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__USBOH3_UH3_DFD_OUT16	, 0x06E4, 0x02FC, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__GPIO_2_0		, 0x06E4, 0x02FC, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__IPU1_IPU_DIAG_BUS_0	, 0x06E4, 0x02FC, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D0__IPU2_IPU_DIAG_BUS_0	, 0x06E4, 0x02FC, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__RAWNAND_D1		, 0x06E8, 0x0300, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__USDHC1_DAT5		, 0x06E8, 0x0300, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__GPU3D_GPU_DEBUG_OUT1	, 0x06E8, 0x0300, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__USBOH3_UH2_DFD_OUT17	, 0x06E8, 0x0300, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__USBOH3_UH3_DFD_OUT17	, 0x06E8, 0x0300, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__GPIO_2_1		, 0x06E8, 0x0300, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__IPU1_IPU_DIAG_BUS_1	, 0x06E8, 0x0300, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D1__IPU2_IPU_DIAG_BUS_1	, 0x06E8, 0x0300, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__RAWNAND_D2		, 0x06EC, 0x0304, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__USDHC1_DAT6		, 0x06EC, 0x0304, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__GPU3D_GPU_DBG_OUT_2	, 0x06EC, 0x0304, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__USBOH3_UH2_DFD_OUT18	, 0x06EC, 0x0304, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__USBOH3_UH3_DFD_OUT18	, 0x06EC, 0x0304, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__GPIO_2_2		, 0x06EC, 0x0304, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__IPU1_IPU_DIAG_BUS_2	, 0x06EC, 0x0304, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D2__IPU2_IPU_DIAG_BUS_2	, 0x06EC, 0x0304, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__RAWNAND_D3		, 0x06F0, 0x0308, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__USDHC1_DAT7		, 0x06F0, 0x0308, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__GPU3D_GPU_DBG_OUT_3	, 0x06F0, 0x0308, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__USBOH3_UH2_DFD_OUT19	, 0x06F0, 0x0308, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__USBOH3_UH3_DFD_OUT19	, 0x06F0, 0x0308, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__GPIO_2_3		, 0x06F0, 0x0308, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__IPU1_IPU_DIAG_BUS_3	, 0x06F0, 0x0308, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D3__IPU2_IPU_DIAG_BUS_3	, 0x06F0, 0x0308, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__RAWNAND_D4		, 0x06F4, 0x030C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__USDHC2_DAT4		, 0x06F4, 0x030C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__GPU3D_GPU_DBG_OUT_4	, 0x06F4, 0x030C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__USBOH3_UH2_DFD_OUT20	, 0x06F4, 0x030C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__USBOH3_UH3_DFD_OUT20	, 0x06F4, 0x030C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__GPIO_2_4		, 0x06F4, 0x030C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__IPU1_IPU_DIAG_BUS_4	, 0x06F4, 0x030C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D4__IPU2_IPU_DIAG_BUS_4	, 0x06F4, 0x030C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__RAWNAND_D5		, 0x06F8, 0x0310, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__USDHC2_DAT5		, 0x06F8, 0x0310, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__GPU3D_GPU_DBG_OUT_5	, 0x06F8, 0x0310, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__USBOH3_UH2_DFD_OUT21	, 0x06F8, 0x0310, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__USBOH3_UH3_DFD_OUT21	, 0x06F8, 0x0310, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__GPIO_2_5		, 0x06F8, 0x0310, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__IPU1_IPU_DIAG_BUS_5	, 0x06F8, 0x0310, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D5__IPU2_IPU_DIAG_BUS_5	, 0x06F8, 0x0310, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__RAWNAND_D6		, 0x06FC, 0x0314, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__USDHC2_DAT6		, 0x06FC, 0x0314, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__GPU3D_GPU_DBG_OUT_6	, 0x06FC, 0x0314, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__USBOH3_UH2_DFD_OUT22	, 0x06FC, 0x0314, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__USBOH3_UH3_DFD_OUT22	, 0x06FC, 0x0314, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__GPIO_2_6		, 0x06FC, 0x0314, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__IPU1_IPU_DIAG_BUS_6	, 0x06FC, 0x0314, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D6__IPU2_IPU_DIAG_BUS_6	, 0x06FC, 0x0314, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__RAWNAND_D7		, 0x0700, 0x0318, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__USDHC2_DAT7		, 0x0700, 0x0318, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__GPU3D_GPU_DBG_OUT_7	, 0x0700, 0x0318, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__USBOH3_UH2_DFD_OUT23	, 0x0700, 0x0318, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__USBOH3_UH3_DFD_OUT23	, 0x0700, 0x0318, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__GPIO_2_7		, 0x0700, 0x0318, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__IPU1_IPU_DIAG_BUS_7	, 0x0700, 0x0318, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(NANDF_D7__IPU2_IPU_DIAG_BUS_7	, 0x0700, 0x0318, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__RAWNAND_D8		, 0x0704, 0x031C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__USDHC4_DAT0		, 0x0704, 0x031C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__RAWNAND_DQS		, 0x0704, 0x031C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__USBOH3_UH2_DFD_OUT24	, 0x0704, 0x031C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__USBOH3_UH3_DFD_OUT24	, 0x0704, 0x031C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__GPIO_2_8		, 0x0704, 0x031C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__IPU1_IPU_DIAG_BUS_8	, 0x0704, 0x031C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT0__IPU2_IPU_DIAG_BUS_8	, 0x0704, 0x031C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__RAWNAND_D9		, 0x0708, 0x0320, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__USDHC4_DAT1		, 0x0708, 0x0320, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__PWM3_PWMO		, 0x0708, 0x0320, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__USBOH3_UH2_DFD_OUT25	, 0x0708, 0x0320, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__USBOH3_UH3_DFD_OUT25	, 0x0708, 0x0320, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__GPIO_2_9		, 0x0708, 0x0320, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__IPU1_IPU_DIAG_BUS_9	, 0x0708, 0x0320, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT1__IPU2_IPU_DIAG_BUS_9	, 0x0708, 0x0320, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__RAWNAND_D10		, 0x070C, 0x0324, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__USDHC4_DAT2		, 0x070C, 0x0324, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__PWM4_PWMO		, 0x070C, 0x0324, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__USBOH3_UH2_DFD_OUT26	, 0x070C, 0x0324, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__USBOH3_UH3_DFD_OUT26	, 0x070C, 0x0324, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__GPIO_2_10		, 0x070C, 0x0324, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__IPU1_IPU_DIAG_BUS_10	, 0x070C, 0x0324, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT2__IPU2_IPU_DIAG_BUS_10	, 0x070C, 0x0324, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__RAWNAND_D11		, 0x0710, 0x0328, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__USDHC4_DAT3		, 0x0710, 0x0328, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__USBOH3_UH2_DFD_OUT27	, 0x0710, 0x0328, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__USBOH3_UH3_DFD_OUT27	, 0x0710, 0x0328, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__GPIO_2_11		, 0x0710, 0x0328, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__IPU1_IPU_DIAG_BUS_11	, 0x0710, 0x0328, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT3__IPU2_IPU_DIAG_BUS_11	, 0x0710, 0x0328, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__RAWNAND_D12		, 0x0714, 0x032C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__USDHC4_DAT4		, 0x0714, 0x032C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__UART2_RXD		, 0x0714, 0x032C, 2, 0x0928, 6, 0)
++MX6_PAD_DECL(SD4_DAT4__USBOH3_UH2_DFD_OUT28	, 0x0714, 0x032C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__USBOH3_UH3_DFD_OUT28	, 0x0714, 0x032C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__GPIO_2_12		, 0x0714, 0x032C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__IPU1_IPU_DIAG_BUS_12	, 0x0714, 0x032C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT4__IPU2_IPU_DIAG_BUS_12	, 0x0714, 0x032C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__RAWNAND_D13		, 0x0718, 0x0330, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__USDHC4_DAT5		, 0x0718, 0x0330, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__UART2_CTS		, 0x0718, 0x0330, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__UART2_RTS		, 0x0718, 0x0330, 2, 0x0924, 4, 0)
++MX6_PAD_DECL(SD4_DAT5__USBOH3_UH2_DFD_OUT29	, 0x0718, 0x0330, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__USBOH3_UH3_DFD_OUT29	, 0x0718, 0x0330, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__GPIO_2_13		, 0x0718, 0x0330, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__IPU1_IPU_DIAG_BUS_13	, 0x0718, 0x0330, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT5__IPU2_IPU_DIAG_BUS_13	, 0x0718, 0x0330, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__RAWNAND_D14		, 0x071C, 0x0334, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__USDHC4_DAT6		, 0x071C, 0x0334, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__UART2_CTS		, 0x071C, 0x0334, 2, 0x0924, 5, 0)
++MX6_PAD_DECL(SD4_DAT6__USBOH3_UH2_DFD_OUT30	, 0x071C, 0x0334, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__USBOH3_UH3_DFD_OUT30	, 0x071C, 0x0334, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__GPIO_2_14		, 0x071C, 0x0334, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__IPU1_IPU_DIAG_BUS_14	, 0x071C, 0x0334, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT6__IPU2_IPU_DIAG_BUS_14	, 0x071C, 0x0334, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__RAWNAND_D15		, 0x0720, 0x0338, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__USDHC4_DAT7		, 0x0720, 0x0338, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__UART2_TXD		, 0x0720, 0x0338, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__UART2_TXD_RXD	, 0x0720, 0x0338, 2, 0x0928, 7, 0)
++MX6_PAD_DECL(SD4_DAT7__USBOH3_UH2_DFD_OUT31 , 0x0720, 0x0338, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__USBOH3_UH3_DFD_OUT31 , 0x0720, 0x0338, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__GPIO_2_15		, 0x0720, 0x0338, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__IPU1_IPU_DIAG_BUS_15	, 0x0720, 0x0338, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD4_DAT7__IPU2_IPU_DIAG_BUS_15	, 0x0720, 0x0338, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__USDHC1_DAT1		, 0x0724, 0x033C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__ECSPI5_SS0		, 0x0724, 0x033C, 1, 0x0834, 1, 0)
++MX6_PAD_DECL(SD1_DAT1__PWM3_PWMO		, 0x0724, 0x033C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__GPT_CAPIN2		, 0x0724, 0x033C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__PCIE_CTRL_MUX_7	, 0x0724, 0x033C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__GPIO_1_17		, 0x0724, 0x033C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__HDMI_TX_OPHYDTB_0	, 0x0724, 0x033C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT1__ANATOP_TESTO_8	, 0x0724, 0x033C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__USDHC1_DAT0		, 0x0728, 0x0340, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__ECSPI5_MISO		, 0x0728, 0x0340, 1, 0x082C, 1, 0)
++MX6_PAD_DECL(SD1_DAT0__CAAM_WRAP_RNG_OSCOBS	, 0x0728, 0x0340, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__GPT_CAPIN1		, 0x0728, 0x0340, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__PCIE_CTRL_MUX_8	, 0x0728, 0x0340, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__GPIO_1_16		, 0x0728, 0x0340, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__HDMI_TX_OPHYDTB_1	, 0x0728, 0x0340, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT0__ANATOP_TESTO_7	, 0x0728, 0x0340, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__USDHC1_DAT3		, 0x072C, 0x0344, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__ECSPI5_SS2		, 0x072C, 0x0344, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__GPT_CMPOUT3		, 0x072C, 0x0344, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__PWM1_PWMO		, 0x072C, 0x0344, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__WDOG2_WDOG_B		, 0x072C, 0x0344, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__GPIO_1_21		, 0x072C, 0x0344, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__WDOG2_WDOG_RST_B_DEB	, 0x072C, 0x0344, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT3__ANATOP_TESTO_6	, 0x072C, 0x0344, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__USDHC1_CMD		, 0x0730, 0x0348, 16, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__ECSPI5_MOSI		, 0x0730, 0x0348, 1, 0x0830, 0, 0)
++MX6_PAD_DECL(SD1_CMD__PWM4_PWMO		, 0x0730, 0x0348, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__GPT_CMPOUT1		, 0x0730, 0x0348, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__GPIO_1_18		, 0x0730, 0x0348, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CMD__ANATOP_TESTO_5	, 0x0730, 0x0348, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__USDHC1_DAT2		, 0x0734, 0x034C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__ECSPI5_SS1		, 0x0734, 0x034C, 1, 0x0838, 1, 0)
++MX6_PAD_DECL(SD1_DAT2__GPT_CMPOUT2		, 0x0734, 0x034C, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__PWM2_PWMO		, 0x0734, 0x034C, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__WDOG1_WDOG_B		, 0x0734, 0x034C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__GPIO_1_19		, 0x0734, 0x034C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__WDOG1_WDOG_RST_B_DEB	, 0x0734, 0x034C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_DAT2__ANATOP_TESTO_4	, 0x0734, 0x034C, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__USDHC1_CLK		, 0x0738, 0x0350, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__ECSPI5_SCLK		, 0x0738, 0x0350, 1, 0x0828, 0, 0)
++MX6_PAD_DECL(SD1_CLK__OSC32K_32K_OUT	, 0x0738, 0x0350, 2, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__GPT_CLKIN		, 0x0738, 0x0350, 3, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__GPIO_1_20		, 0x0738, 0x0350, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__PHY_DTB_0		, 0x0738, 0x0350, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD1_CLK__SATA_PHY_DTB_0	, 0x0738, 0x0350, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__USDHC2_CLK		, 0x073C, 0x0354, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__ECSPI5_SCLK		, 0x073C, 0x0354, 1, 0x0828, 1, 0)
++MX6_PAD_DECL(SD2_CLK__KPP_COL_5		, 0x073C, 0x0354, 2, 0x08E8, 3, 0)
++MX6_PAD_DECL(SD2_CLK__AUDMUX_AUD4_RXFS	, 0x073C, 0x0354, 3, 0x07C0, 1, 0)
++MX6_PAD_DECL(SD2_CLK__PCIE_CTRL_MUX_9	, 0x073C, 0x0354, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__GPIO_1_10		, 0x073C, 0x0354, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__PHY_DTB_1		, 0x073C, 0x0354, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CLK__SATA_PHY_DTB_1	, 0x073C, 0x0354, 7, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CMD__USDHC2_CMD		, 0x0740, 0x0358, 16, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CMD__ECSPI5_MOSI		, 0x0740, 0x0358, 1, 0x0830, 1, 0)
++MX6_PAD_DECL(SD2_CMD__KPP_ROW_5		, 0x0740, 0x0358, 2, 0x08F4, 2, 0)
++MX6_PAD_DECL(SD2_CMD__AUDMUX_AUD4_RXC	, 0x0740, 0x0358, 3, 0x07BC, 1, 0)
++MX6_PAD_DECL(SD2_CMD__PCIE_CTRL_MUX_10	, 0x0740, 0x0358, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_CMD__GPIO_1_11		, 0x0740, 0x0358, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__USDHC2_DAT3		, 0x0744, 0x035C, 0, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__ECSPI5_SS3		, 0x0744, 0x035C, 1, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__KPP_COL_6		, 0x0744, 0x035C, 2, 0x08EC, 2, 0)
++MX6_PAD_DECL(SD2_DAT3__AUDMUX_AUD4_TXC	, 0x0744, 0x035C, 3, 0x07C4, 1, 0)
++MX6_PAD_DECL(SD2_DAT3__PCIE_CTRL_MUX_11	, 0x0744, 0x035C, 4, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__GPIO_1_12		, 0x0744, 0x035C, 5, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__SJC_DONE		, 0x0744, 0x035C, 6, 0x0000, 0, 0)
++MX6_PAD_DECL(SD2_DAT3__ANATOP_TESTO_3	, 0x0744, 0x035C, 7, 0x0000, 0, 0)
+ 
+ #endif	/* __ASM_ARCH_MX6_MX6Q_PINS_H__ */
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/spl.h u-boot-imx6/arch/arm/include/asm/arch-mx6/spl.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/spl.h	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/spl.h	2014-12-17 09:31:33.882048674 +0000
+@@ -0,0 +1,25 @@
++/*
++ * Copyright (C) 2013 TechNexion Ltd.
++ *
++ * Author: Richard Hu <linuxfae@technexion.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License, or (at your option) any later version.
++ */
++
++#ifndef __ASM_ARCH_SPL_H__
++#define __ASM_ARCH_SPL_H__
++
++#define BOOT_DEVICE_MMC1	0
++#define BOOT_DEVICE_MMC2	1
++#define BOOT_DEVICE_MMC2_2	2
++#define BOOT_DEVICE_NAND	3
++#define BOOT_DEVICE_SATA	4
++#define BOOT_DEVICE_NONE	5
++
++#endif	/* __ASM_ARCH_SPL_H__ */
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/sys_proto.h u-boot-imx6/arch/arm/include/asm/arch-mx6/sys_proto.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/arch-mx6/sys_proto.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/arch-mx6/sys_proto.h	2014-12-17 09:31:33.882048674 +0000
+@@ -10,6 +10,21 @@
+ 
+ #include <asm/imx-common/regs-common.h>
+ 
++enum boot_device {
++        MX6_SD0_BOOT,
++        MX6_SD1_BOOT,
++        MX6_MMC_BOOT,
++        MX6_NAND_BOOT,
++        MX6_SATA_BOOT,
++        MX6_WEIM_NOR_BOOT,
++        MX6_ONE_NAND_BOOT,
++        MX6_PATA_BOOT,
++        MX6_I2C_BOOT,
++        MX6_SPI_NOR_BOOT,
++        MX6_UNKNOWN_BOOT,
++        MX6_BOOT_DEV_NUM = MX6_UNKNOWN_BOOT,
++};
++
+ #define MXC_CPU_MX51		0x51
+ #define MXC_CPU_MX53		0x53
+ #define MXC_CPU_MX6SL		0x60
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/armv7.h u-boot-imx6/arch/arm/include/asm/armv7.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/armv7.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/armv7.h	2014-12-17 09:31:33.906048086 +0000
+@@ -7,7 +7,6 @@
+  */
+ #ifndef ARMV7_H
+ #define ARMV7_H
+-#include <linux/types.h>
+ 
+ /* Cortex-A9 revisions */
+ #define MIDR_CORTEX_A9_R0P1	0x410FC091
+@@ -19,6 +18,22 @@
+ #define MIDR_CORTEX_A15_R0P0	0x410FC0F0
+ #define MIDR_CORTEX_A15_R2P2	0x412FC0F2
+ 
++/* Cortex-A7 revisions */
++#define MIDR_CORTEX_A7_R0P0	0x410FC070
++
++#define MIDR_PRIMARY_PART_MASK	0xFF0FFFF0
++
++/* ID_PFR1 feature fields */
++#define CPUID_ARM_SEC_SHIFT		4
++#define CPUID_ARM_SEC_MASK		(0xF << CPUID_ARM_SEC_SHIFT)
++#define CPUID_ARM_VIRT_SHIFT		12
++#define CPUID_ARM_VIRT_MASK		(0xF << CPUID_ARM_VIRT_SHIFT)
++#define CPUID_ARM_GENTIMER_SHIFT	16
++#define CPUID_ARM_GENTIMER_MASK		(0xF << CPUID_ARM_GENTIMER_SHIFT)
++
++/* valid bits in CBAR register / PERIPHBASE value */
++#define CBAR_MASK			0xFFFF8000
++
+ /* CCSIDR */
+ #define CCSIDR_LINE_SIZE_OFFSET		0
+ #define CCSIDR_LINE_SIZE_MASK		0x7
+@@ -41,6 +56,9 @@
+ #define ARMV7_CLIDR_CTYPE_INSTRUCTION_DATA	3
+ #define ARMV7_CLIDR_CTYPE_UNIFIED		4
+ 
++#ifndef __ASSEMBLY__
++#include <linux/types.h>
++
+ /*
+  * CP15 Barrier instructions
+  * Please note that we have separate barrier instructions in ARMv7
+@@ -58,4 +76,17 @@
+ void v7_outer_cache_flush_range(u32 start, u32 end);
+ void v7_outer_cache_inval_range(u32 start, u32 end);
+ 
++#if defined(CONFIG_ARMV7_NONSEC) || defined(CONFIG_ARMV7_VIRT)
++
++int armv7_switch_nonsec(void);
++int armv7_switch_hyp(void);
++
++/* defined in assembly file */
++unsigned int _nonsec_init(void);
++void _smp_pen(void);
++void _switch_to_hyp(void);
++#endif /* CONFIG_ARMV7_NONSEC || CONFIG_ARMV7_VIRT */
++
++#endif /* ! __ASSEMBLY__ */
++
+ #endif
+diff -uNr u-boot-2013.10-rc4/arch/arm/include/asm/gic.h u-boot-imx6/arch/arm/include/asm/gic.h
+--- u-boot-2013.10-rc4/arch/arm/include/asm/gic.h	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/arch/arm/include/asm/gic.h	2014-12-17 09:31:33.906048086 +0000
+@@ -0,0 +1,19 @@
++#ifndef __GIC_V2_H__
++#define __GIC_V2_H__
++
++/* register offsets for the ARM generic interrupt controller (GIC) */
++
++#define GIC_DIST_OFFSET		0x1000
++#define GICD_CTLR		0x0000
++#define GICD_TYPER		0x0004
++#define GICD_IGROUPRn		0x0080
++#define GICD_SGIR		0x0F00
++
++#define GIC_CPU_OFFSET_A9	0x0100
++#define GIC_CPU_OFFSET_A15	0x2000
++#define GICC_CTLR		0x0000
++#define GICC_PMR		0x0004
++#define GICC_IAR		0x000C
++#define GICC_EOIR		0x0010
++
++#endif
+diff -uNr u-boot-2013.10-rc4/arch/arm/lib/bootm.c u-boot-imx6/arch/arm/lib/bootm.c
+--- u-boot-2013.10-rc4/arch/arm/lib/bootm.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/arch/arm/lib/bootm.c	2014-12-17 09:31:33.922047696 +0000
+@@ -22,6 +22,10 @@
+ #include <asm/bootm.h>
+ #include <linux/compiler.h>
+ 
++#if defined(CONFIG_ARMV7_NONSEC) || defined(CONFIG_ARMV7_VIRT)
++#include <asm/armv7.h>
++#endif
++
+ DECLARE_GLOBAL_DATA_PTR;
+ 
+ static struct tag *params;
+@@ -181,6 +185,19 @@
+ 
+ __weak void setup_board_tags(struct tag **in_params) {}
+ 
++static void do_nonsec_virt_switch(void)
++{
++#if defined(CONFIG_ARMV7_NONSEC) || defined(CONFIG_ARMV7_VIRT)
++	if (armv7_switch_nonsec() == 0)
++#ifdef CONFIG_ARMV7_VIRT
++		if (armv7_switch_hyp() == 0)
++			debug("entered HYP mode\n");
++#else
++		debug("entered non-secure state\n");
++#endif
++#endif
++}
++
+ /* Subcommand: PREP */
+ static void boot_prep_linux(bootm_headers_t *images)
+ {
+@@ -217,6 +234,7 @@
+ 		printf("FDT and ATAGS support not compiled in - hanging\n");
+ 		hang();
+ 	}
++	do_nonsec_virt_switch();
+ }
+ 
+ /* Subcommand: GO */
+@@ -279,15 +297,6 @@
+ 
+ #ifdef CONFIG_CMD_BOOTZ
+ 
+-struct zimage_header {
+-	uint32_t	code[9];
+-	uint32_t	zi_magic;
+-	uint32_t	zi_start;
+-	uint32_t	zi_end;
+-};
+-
+-#define	LINUX_ARM_ZIMAGE_MAGIC	0x016f2818
+-
+ int bootz_setup(ulong image, ulong *start, ulong *end)
+ {
+ 	struct zimage_header *zi;
+diff -uNr u-boot-2013.10-rc4/board/armltd/vexpress/vexpress_common.c u-boot-imx6/board/armltd/vexpress/vexpress_common.c
+--- u-boot-2013.10-rc4/board/armltd/vexpress/vexpress_common.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/board/armltd/vexpress/vexpress_common.c	2014-12-17 09:31:34.110043101 +0000
+@@ -256,3 +256,18 @@
+ {
+ 	return (ulong)CONFIG_SYS_HZ;
+ }
++
++#if defined(CONFIG_ARMV7_NONSEC) || defined(CONFIG_ARMV7_VIRT)
++/* Setting the address at which secondary cores start from.
++ * Versatile Express uses one address for all cores, so ignore corenr
++ */
++void smp_set_core_boot_addr(unsigned long addr, int corenr)
++{
++	/* The SYSFLAGS register on VExpress needs to be cleared first
++	 * by writing to the next address, since any writes to the address
++	 * at offset 0 will only be ORed in
++	 */
++	writel(~0, CONFIG_SYSFLAGS_ADDR + 4);
++	writel(addr, CONFIG_SYSFLAGS_ADDR);
++}
++#endif
+diff -uNr u-boot-2013.10-rc4/board/denx/m28evk/m28evk.c u-boot-imx6/board/denx/m28evk/m28evk.c
+--- u-boot-2013.10-rc4/board/denx/m28evk/m28evk.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/board/denx/m28evk/m28evk.c	2014-12-17 09:31:34.146042222 +0000
+@@ -131,13 +131,13 @@
+ 	udelay(10000);
+ #endif
+ 
+-	ret = fecmxc_initialize_multi(bis, 0, 0, MXS_ENET0_BASE);
++	ret = fecmxc_initialize_multi(bis, 0, 1 << 0, MXS_ENET0_BASE);
+ 	if (ret) {
+ 		printf("FEC MXS: Unable to init FEC0\n");
+ 		return ret;
+ 	}
+ 
+-	ret = fecmxc_initialize_multi(bis, 1, 3, MXS_ENET1_BASE);
++	ret = fecmxc_initialize_multi(bis, 1, 1 << 3, MXS_ENET1_BASE);
+ 	if (ret) {
+ 		printf("FEC MXS: Unable to init FEC1\n");
+ 		return ret;
+diff -uNr u-boot-2013.10-rc4/board/freescale/mx28evk/mx28evk.c u-boot-imx6/board/freescale/mx28evk/mx28evk.c
+--- u-boot-2013.10-rc4/board/freescale/mx28evk/mx28evk.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/board/freescale/mx28evk/mx28evk.c	2014-12-17 09:31:34.238039974 +0000
+@@ -118,13 +118,13 @@
+ 	udelay(200);
+ 	gpio_set_value(MX28_PAD_ENET0_RX_CLK__GPIO_4_13, 1);
+ 
+-	ret = fecmxc_initialize_multi(bis, 0, 0, MXS_ENET0_BASE);
++	ret = fecmxc_initialize_multi(bis, 0, 1 << 0, MXS_ENET0_BASE);
+ 	if (ret) {
+ 		puts("FEC MXS: Unable to init FEC0\n");
+ 		return ret;
+ 	}
+ 
+-	ret = fecmxc_initialize_multi(bis, 1, 3, MXS_ENET1_BASE);
++	ret = fecmxc_initialize_multi(bis, 1, 1 << 3, MXS_ENET1_BASE);
+ 	if (ret) {
+ 		puts("FEC MXS: Unable to init FEC1\n");
+ 		return ret;
+diff -uNr u-boot-2013.10-rc4/board/freescale/mx6qarm2/mx6qarm2.c u-boot-imx6/board/freescale/mx6qarm2/mx6qarm2.c
+--- u-boot-2013.10-rc4/board/freescale/mx6qarm2/mx6qarm2.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/board/freescale/mx6qarm2/mx6qarm2.c	2014-12-17 09:31:34.242039876 +0000
+@@ -7,7 +7,7 @@
+ #include <common.h>
+ #include <asm/io.h>
+ #include <asm/arch/imx-regs.h>
+-#include <asm/arch/mx6q_pins.h>
++#include <asm/arch/mx6-pins.h>
+ #include <asm/arch/clock.h>
+ #include <asm/errno.h>
+ #include <asm/gpio.h>
+diff -uNr u-boot-2013.10-rc4/board/freescale/mx6qsabreauto/mx6qsabreauto.c u-boot-imx6/board/freescale/mx6qsabreauto/mx6qsabreauto.c
+--- u-boot-2013.10-rc4/board/freescale/mx6qsabreauto/mx6qsabreauto.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/board/freescale/mx6qsabreauto/mx6qsabreauto.c	2014-12-17 09:31:34.242039876 +0000
+@@ -11,7 +11,7 @@
+ #include <asm/arch/clock.h>
+ #include <asm/arch/imx-regs.h>
+ #include <asm/arch/iomux.h>
+-#include <asm/arch/mx6q_pins.h>
++#include <asm/arch/mx6-pins.h>
+ #include <asm/errno.h>
+ #include <asm/gpio.h>
+ #include <asm/imx-common/iomux-v3.h>
+diff -uNr u-boot-2013.10-rc4/board/schulercontrol/sc_sps_1/sc_sps_1.c u-boot-imx6/board/schulercontrol/sc_sps_1/sc_sps_1.c
+--- u-boot-2013.10-rc4/board/schulercontrol/sc_sps_1/sc_sps_1.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/board/schulercontrol/sc_sps_1/sc_sps_1.c	2014-12-17 09:31:34.354037139 +0000
+@@ -79,13 +79,13 @@
+ 		CLKCTRL_ENET_TIME_SEL_MASK,
+ 		CLKCTRL_ENET_TIME_SEL_RMII_CLK | CLKCTRL_ENET_CLK_OUT_EN);
+ 
+-	ret = fecmxc_initialize_multi(bis, 0, 0, MXS_ENET0_BASE);
++	ret = fecmxc_initialize_multi(bis, 0, 1 << 0, MXS_ENET0_BASE);
+ 	if (ret) {
+ 		printf("FEC MXS: Unable to init FEC0\n");
+ 		return ret;
+ 	}
+ 
+-	ret = fecmxc_initialize_multi(bis, 1, 1, MXS_ENET1_BASE);
++	ret = fecmxc_initialize_multi(bis, 1, 1 << 1, MXS_ENET1_BASE);
+ 	if (ret) {
+ 		printf("FEC MXS: Unable to init FEC1\n");
+ 		return ret;
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_c1/Makefile u-boot-imx6/board/solidrun/mx6_c1/Makefile
+--- u-boot-2013.10-rc4/board/solidrun/mx6_c1/Makefile	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_c1/Makefile	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,42 @@
++#
++# Copyright (C) 2012-2013, Guennadi Liakhovetski <lg@denx.de>
++# (C) Copyright 2012-2013 Freescale Semiconductor, Inc.
++# Copyright (C) 2013, Boundary Devices <info@boundarydevices.com>
++# Copyright (C) 2013, Jon Nettleton <jon.nettleton@gmail.com>
++#
++# This program is free software; you can redistribute it and/or
++# modify it under the terms of the GNU General Public License as
++# published by the Free Software Foundation; either version 2 of
++# the License, or (at your option) any later version.
++#
++# This program is distributed in the hope that it will be useful,
++# but WITHOUT ANY WARRANTY; without even the implied warranty of
++# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++# GNU General Public License for more details.
++#
++# You should have received a copy of the GNU General Public License
++# along with this program; if not, write to the Free Software
++# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
++# MA 02111-1307 USA
++#
++
++include $(TOPDIR)/config.mk
++
++LIB    = $(obj)lib$(BOARD).o
++
++COBJS  := mx6_c1.o
++
++SRCS   := $(COBJS:.o=.c)
++OBJS   := $(addprefix $(obj),$(COBJS))
++
++$(LIB):        $(obj).depend $(OBJS)
++	$(call cmd_link_o_target, $(OBJS))
++
++#########################################################################
++
++# defines $(obj).depend target
++include $(SRCTREE)/rules.mk
++
++sinclude $(obj).depend
++
++#########################################################################
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1_bootscript.txt u-boot-imx6/board/solidrun/mx6_c1/mx6_c1_bootscript.txt
+--- u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1_bootscript.txt	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_c1/mx6_c1_bootscript.txt	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,30 @@
++setenv bootargs enable_wait_mode=off
++setenv nextcon 0;
++
++if test xXGA = "x$panel" ; then
++	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,LDB-XGA,if=RGB24
++else
++	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,OC-VGA,if=RGB24
++fi
++
++setenv nextcon 1
++setenv fbmem "fbmem=10M";
++if hdmidet ; then
++	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=hdmi,1280x720M@60,if=RGB24
++	setenv fbmem $fbmem,28M;
++	setexpr nextcon $nextcon + 1;
++else
++	echo "------ no HDMI monitor";
++fi
++
++while test "4" -ne $nextcon ; do
++	setenv bootargs $bootargs video=mxcfb${nextcon}:off ;
++	setexpr nextcon $nextcon + 1 ;
++done
++
++setenv bootargs $bootargs $fbmem
++setenv bootargs $bootargs console=ttymxc0,115200 vmalloc=400M consoleblank=0 ;
++${fs}load ${dtype} ${disk}:1 10800000 /boot/uImage
++&& ${fs}load ${dtype} ${disk}:1 12800000 /boot/uramdisk.img
++&& bootm 10800000 12800000 ;
++echo "Error loading kernel image"
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1.c u-boot-imx6/board/solidrun/mx6_c1/mx6_c1.c
+--- u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1.c	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_c1/mx6_c1.c	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,340 @@
++/*
++ * Copyright (C) 2012 Freescale Semiconductor, Inc.
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>.
++ *
++ * Author: Fabio Estevam <fabio.estevam@freescale.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License, or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <asm/arch/clock.h>
++#include <asm/arch/crm_regs.h>
++#include <asm/arch/imx-regs.h>
++#include <asm/arch/iomux.h>
++#include <asm/arch/mx6-pins.h>
++#include <asm/arch/mxc_hdmi.h>
++#include <asm/arch/sys_proto.h>
++#include <asm/errno.h>
++#include <asm/gpio.h>
++#include <asm/imx-common/iomux-v3.h>
++#include <asm/imx-common/boot_mode.h>
++#include <asm/io.h>
++#include <mmc.h>
++#include <fsl_esdhc.h>
++#include <miiphy.h>
++#include <netdev.h>
++#include <ipu_pixfmt.h>
++#include "../../../drivers/video/mxcfb.h"
++
++DECLARE_GLOBAL_DATA_PTR;
++
++#define UART_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
++	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |			\
++	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
++
++#define USDHC_PAD_CTRL (PAD_CTL_PUS_47K_UP |			\
++	PAD_CTL_SPEED_LOW | PAD_CTL_DSE_80ohm |			\
++	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
++
++#define USDHC_PAD_CLK_CTRL (PAD_CTL_SPEED_LOW |			\
++	PAD_CTL_DSE_80ohm | PAD_CTL_SRE_FAST |			\
++	PAD_CTL_HYS)
++
++#define USDHC_PAD_GPIO_CTRL (PAD_CTL_PUS_22K_UP |		\
++	PAD_CTL_SPEED_LOW | PAD_CTL_DSE_40ohm |			\
++	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
++
++#define ENET_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
++	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
++
++#define ENET_PAD_CTRL_PD  (PAD_CTL_PUS_100K_DOWN |		\
++	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
++
++#define ENET_PAD_CTRL_CLK  (PAD_CTL_PUS_100K_UP & ~PAD_CTL_PKE | \
++	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_SRE_FAST)
++
++int dram_init(void)
++{
++	gd->ram_size = ((phys_size_t)CONFIG_DDR_MB * 1024 * 1024);
++
++	return 0;
++}
++
++iomux_v3_cfg_t const uart1_pads[] = {
++	MX6_PAD_CSI0_DAT10__UART1_TXD | MUX_PAD_CTRL(UART_PAD_CTRL),
++	MX6_PAD_CSI0_DAT11__UART1_RXD | MUX_PAD_CTRL(UART_PAD_CTRL),
++};
++
++static void setup_iomux_uart(void)
++{
++	imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));
++}
++
++iomux_v3_cfg_t const usdhc2_pads[] = {
++	MX6_PAD_SD2_CLK__USDHC2_CLK	| MUX_PAD_CTRL(USDHC_PAD_CLK_CTRL),
++	MX6_PAD_SD2_CMD__USDHC2_CMD	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT0__USDHC2_DAT0	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT1__USDHC2_DAT1	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT2__USDHC2_DAT2	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT3__USDHC2_DAT3	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++        MX6_PAD_GPIO_4__USDHC2_CD       | MUX_PAD_CTRL(USDHC_PAD_GPIO_CTRL),
++};
++
++#ifdef CONFIG_FSL_ESDHC
++struct fsl_esdhc_cfg usdhc_cfg[1] = {
++        { USDHC2_BASE_ADDR },
++};
++
++int board_mmc_getcd(struct mmc *mmc)
++{
++        struct fsl_esdhc_cfg *cfg = (struct fsl_esdhc_cfg *)mmc->priv;
++
++        if (cfg->esdhc_base == USDHC2_BASE_ADDR) {
++                return !gpio_get_value(IMX_GPIO_NR(1, 4));
++        }
++
++        return 0;
++}
++
++int board_mmc_init(bd_t *bis)
++{
++        /*
++         * Only one USDHC controller on titianium
++         */
++        imx_iomux_v3_setup_multiple_pads(usdhc2_pads, ARRAY_SIZE(usdhc2_pads));
++        gpio_direction_input(IMX_GPIO_NR(1, 4));
++        usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC2_CLK);
++
++        return fsl_esdhc_initialize(bis, &usdhc_cfg[0]);
++}
++#endif
++
++#ifdef CONFIG_FEC_MXC
++iomux_v3_cfg_t const enet_pads[] = {
++	MX6_PAD_ENET_MDIO__ENET_MDIO		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_ENET_MDC__ENET_MDC		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	/* AR8035 reset */
++	MX6_PAD_KEY_ROW4__GPIO_4_15		| MUX_PAD_CTRL(ENET_PAD_CTRL_PD),		
++	/* AR8035 interrupt */
++	MX6_PAD_DI0_PIN2__GPIO_4_18		| MUX_PAD_CTRL(NO_PAD_CTRL),		
++	/* GPIO16 -> AR8035 25MHz */
++	MX6_PAD_GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT	| MUX_PAD_CTRL(NO_PAD_CTRL),		
++	MX6_PAD_RGMII_TXC__ENET_RGMII_TXC		| MUX_PAD_CTRL(NO_PAD_CTRL),		
++	MX6_PAD_RGMII_TD0__ENET_RGMII_TD0		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TD1__ENET_RGMII_TD1		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TD2__ENET_RGMII_TD2		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TD3__ENET_RGMII_TD3		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	/* AR8035 CLK_25M --> ENET_REF_CLK (V22) */
++	MX6_PAD_ENET_REF_CLK__ENET_TX_CLK		| MUX_PAD_CTRL(ENET_PAD_CTRL_CLK),		
++        MX6_PAD_RGMII_RXC__ENET_RGMII_RXC       | MUX_PAD_CTRL(ENET_PAD_CTRL),
++        MX6_PAD_RGMII_RD0__ENET_RGMII_RD0       | MUX_PAD_CTRL(ENET_PAD_CTRL_PD),
++        MX6_PAD_RGMII_RD1__ENET_RGMII_RD1       | MUX_PAD_CTRL(ENET_PAD_CTRL_PD),
++        MX6_PAD_RGMII_RD2__ENET_RGMII_RD2       | MUX_PAD_CTRL(ENET_PAD_CTRL),
++        MX6_PAD_RGMII_RD3__ENET_RGMII_RD3       | MUX_PAD_CTRL(ENET_PAD_CTRL),
++        MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL      | MUX_PAD_CTRL(ENET_PAD_CTRL_PD),
++};
++
++static void setup_iomux_enet(void)
++{
++	imx_iomux_v3_setup_multiple_pads(enet_pads, ARRAY_SIZE(enet_pads));
++
++	/*
++	 * Reset AR8035 PHY. Since it runs 25MHz reference clock, it
++	 * requires two resets.
++	 */
++	gpio_direction_output(IMX_GPIO_NR(4, 15), 0);
++	udelay(1000 * 2);
++	gpio_set_value(IMX_GPIO_NR(4, 15), 1);
++	udelay(1000 * 2);
++	gpio_set_value(IMX_GPIO_NR(4, 15), 0);
++	udelay(1000 * 2);
++	gpio_set_value(IMX_GPIO_NR(4, 15), 1);
++	udelay(1000 * 2);
++}
++
++int board_phy_config(struct phy_device *phydev)
++{
++	if (phydev->drv->config)
++		phydev->drv->config(phydev);
++
++	return 0;
++}
++
++int enable_fec_anatop_clock(void)
++{
++	u32 reg = 0;
++	s32 timeout = 100000;
++
++	struct anatop_regs __iomem *anatop =
++	(struct anatop_regs __iomem *)ANATOP_BASE_ADDR;
++
++	reg = readl(&anatop->pll_enet);
++	reg &= 0xfffffffc; /* Set PLL to generate 25MHz */
++	writel(reg, &anatop->pll_enet);
++	if ((reg & BM_ANADIG_PLL_ENET_POWERDOWN) ||
++	    (!(reg & BM_ANADIG_PLL_ENET_LOCK))) {
++		reg &= ~BM_ANADIG_PLL_ENET_POWERDOWN;
++		writel(reg, &anatop->pll_enet);
++		while (timeout--) {
++			if (readl(&anatop->pll_enet) & BM_ANADIG_PLL_ENET_LOCK)
++				break;
++		}
++		if (timeout < 0)
++			return -ETIMEDOUT;
++	}
++	/* Enable FEC clock */
++	reg |= BM_ANADIG_PLL_ENET_ENABLE;
++	reg &= ~BM_ANADIG_PLL_ENET_BYPASS;
++	writel(reg, &anatop->pll_enet);
++
++	return 0;
++}
++int board_eth_init(bd_t *bis)
++{
++	int ret;
++        struct iomuxc_base_regs *const iomuxc_regs
++                = (struct iomuxc_base_regs *) IOMUXC_BASE_ADDR;
++	struct anatop_regs __iomem *anatop =
++                (struct anatop_regs __iomem *)ANATOP_BASE_ADDR;
++	u32 reg = 0;
++	s32 timeout = 100000;
++
++	enable_fec_anatop_clock();
++	/* set gpr1[21] */
++        clrsetbits_le32(&iomuxc_regs->gpr[1], 0, (1 << 21));
++
++	while (timeout--) {
++        	if (readl(&anatop->pll_enet) & BM_ANADIG_PLL_ENET_LOCK)
++			break;
++	}
++
++	setup_iomux_enet();
++
++	ret = cpu_eth_init(bis);
++	if (ret)
++		printf("FEC MXC: %s:failed\n", __func__);
++
++	return 0;
++}
++#endif
++
++#ifdef CONFIG_VIDEO_IPUV3
++static struct fb_videomode const hdmi = {
++        .name           = "HDMI",
++        .refresh        = 60,
++        .xres           = 1024,
++        .yres           = 768,
++        .pixclock       = 15385,
++        .left_margin    = 220,
++        .right_margin   = 40,
++        .upper_margin   = 21,
++        .lower_margin   = 7,
++        .hsync_len      = 60,
++        .vsync_len      = 10,
++        .sync           = FB_SYNC_EXT | FB_SYNC_CLK_LAT_FALL,
++        .vmode          = FB_VMODE_NONINTERLACED
++};
++
++static int detect_hdmi(void)
++{
++        struct hdmi_regs *hdmi  = (struct hdmi_regs *)HDMI_ARB_BASE_ADDR;
++        return readb(&hdmi->phy_stat0) & HDMI_DVI_STAT;
++}
++
++int board_video_skip(void)
++{
++        int ret;
++
++        ret = ipuv3_fb_init(&hdmi, 0, IPU_PIX_FMT_RGB24);
++
++        if (ret)
++                printf("HDMI cannot be configured: %d\n", ret);
++
++	if (detect_hdmi())
++		imx_enable_hdmi_phy();
++
++        return ret;
++}
++
++static void setup_display(void)
++{
++        struct mxc_ccm_reg *mxc_ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
++        int reg;
++
++        enable_ipu_clock();
++        imx_setup_hdmi();
++
++        reg = readl(&mxc_ccm->chsccdr);
++        reg |= (CHSCCDR_CLK_SEL_LDB_DI0
++                << MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET);
++        writel(reg, &mxc_ccm->chsccdr);
++}
++#endif /* CONFIG_VIDEO_IPUV3 */
++
++#ifdef CONFIG_USB_EHCI_MX6
++int board_ehci_hcd_init(int port)
++{
++        return 0;
++}
++#endif
++
++int board_early_init_f(void)
++{
++	setup_iomux_uart();
++
++#ifdef CONFIG_VIDEO_IPUV3
++	setup_display();
++#endif
++	return 0;
++}
++
++int board_init(void)
++{
++	/* address of boot parameters */
++	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;
++
++	return 0;
++}
++
++static char const *board_type = "uninitialized";
++
++int checkboard(void)
++{
++	puts("Board: MX6-C1\n");
++	board_type = "mx6-c1";
++	return 0;
++}
++
++#ifdef CONFIG_CMD_BMODE
++static const struct boot_mode board_boot_modes[] = {
++	/* 4 bit bus width */
++	{"mmc0", MAKE_CFGVAL(0x40, 0x28, 0x00, 0x00)},
++	{NULL,	 0},
++};
++#endif
++
++int board_late_init(void)
++{
++        int cpurev = get_cpu_rev();
++        setenv("cpu",get_imx_type((cpurev & 0xFF000) >> 12));
++        setenv("board",board_type);
++
++#ifdef CONFIG_CMD_BMODE
++        add_board_boot_modes(board_boot_modes);
++#endif
++
++	return 0;
++}
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1d.cfg u-boot-imx6/board/solidrun/mx6_c1/mx6_c1d.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1d.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_c1/mx6_c1d.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,46 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Refer docs/README.imxmage for more details about how-to configure
++ * and create imximage boot image
++ *
++ * The syntax is taken as close as possible with the kwbimage
++ */
++
++/* image version */
++IMAGE_VERSION 2
++
++/*
++ * Boot Device : one of
++ * spi, sd (the board has no nand neither onenand)
++ */
++BOOT_FROM      sd
++
++#define __ASSEMBLY__
++#include <config.h>
++#include "asm/arch/mx6-ddr.h"
++#include "asm/arch/iomux.h"
++#include "asm/arch/crm_regs.h"
++
++#include "../mx6-microsom/ddr-1066mhz-64bit-setup.cfg"
++#include "../mx6-microsom/1066mhz_4x256mx16.cfg"
++#include "../mx6-microsom/clocks.cfg"
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1dl.cfg u-boot-imx6/board/solidrun/mx6_c1/mx6_c1dl.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1dl.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_c1/mx6_c1dl.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,46 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Refer docs/README.imxmage for more details about how-to configure
++ * and create imximage boot image
++ *
++ * The syntax is taken as close as possible with the kwbimage
++ */
++
++/* image version */
++IMAGE_VERSION 2
++
++/*
++ * Boot Device : one of
++ * spi, sd (the board has no nand neither onenand)
++ */
++BOOT_FROM      sd
++
++#define __ASSEMBLY__
++#include <config.h>
++#include "asm/arch/mx6-ddr.h"
++#include "asm/arch/iomux.h"
++#include "asm/arch/crm_regs.h"
++
++#include "../mx6-microsom/ddr-800mhz-64bit-setup.cfg"
++#include "../mx6-microsom/800mhz_4x128mx16.cfg"
++#include "../mx6-microsom/clocks.cfg"
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1q.cfg u-boot-imx6/board/solidrun/mx6_c1/mx6_c1q.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1q.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_c1/mx6_c1q.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,46 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Refer docs/README.imxmage for more details about how-to configure
++ * and create imximage boot image
++ *
++ * The syntax is taken as close as possible with the kwbimage
++ */
++
++/* image version */
++IMAGE_VERSION 2
++
++/*
++ * Boot Device : one of
++ * spi, sd (the board has no nand neither onenand)
++ */
++BOOT_FROM      sd
++
++#define __ASSEMBLY__
++#include <config.h>
++#include "asm/arch/mx6-ddr.h"
++#include "asm/arch/iomux.h"
++#include "asm/arch/crm_regs.h"
++
++#include "../mx6-microsom/ddr-1066mhz-64bit-setup.cfg"
++#include "../mx6-microsom/1066mhz_4x256mx16.cfg"
++#include "../mx6-microsom/clocks.cfg"
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1solo.cfg u-boot-imx6/board/solidrun/mx6_c1/mx6_c1solo.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6_c1/mx6_c1solo.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_c1/mx6_c1solo.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,46 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Refer docs/README.imxmage for more details about how-to configure
++ * and create imximage boot image
++ *
++ * The syntax is taken as close as possible with the kwbimage
++ */
++
++/* image version */
++IMAGE_VERSION 2
++
++/*
++ * Boot Device : one of
++ * spi, sd (the board has no nand neither onenand)
++ */
++BOOT_FROM      sd
++
++#define __ASSEMBLY__
++#include <config.h>
++#include "asm/arch/mx6-ddr.h"
++#include "asm/arch/iomux.h"
++#include "asm/arch/crm_regs.h"
++
++#include "../mx6-microsom/ddr-800mhz-32bit-setup.cfg"
++#include "../mx6-microsom/800mhz_2x128mx16.cfg"
++#include "../mx6-microsom/clocks.cfg"
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/imx6image.cfg u-boot-imx6/board/solidrun/mx6_cubox-i/imx6image.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/imx6image.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_cubox-i/imx6image.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,28 @@
++/*
++ * Maintainer : Richard Hu <linuxfae@technexion.com>
++ *
++ * Derived from Nitrogen6x code by Boundary Devices
++ *
++ * SPDX-License-Identifier:	GPL-2.0+
++ *
++ * Refer doc/README.imximage for more details about how-to configure
++ * and create imximage boot image
++ *
++ * The syntax is taken as close as possible with the kwbimage
++ */
++
++/* image version */
++IMAGE_VERSION 2
++
++/*
++ * Boot Device : one of
++ * spi, sd (the board has no nand neither onenand)
++ */
++BOOT_FROM      sd
++
++#define __ASSEMBLY__
++#include <config.h>
++#include "asm/arch/iomux.h"
++#include "asm/arch/crm_regs.h"
++
++#include "../mx6-microsom/clocks.cfg"
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/Makefile u-boot-imx6/board/solidrun/mx6_cubox-i/Makefile
+--- u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/Makefile	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_cubox-i/Makefile	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,42 @@
++#
++# Copyright (C) 2012-2013, Guennadi Liakhovetski <lg@denx.de>
++# (C) Copyright 2012-2013 Freescale Semiconductor, Inc.
++# Copyright (C) 2013, Boundary Devices <info@boundarydevices.com>
++# Copyright (C) 2013, Jon Nettleton <jon.nettleton@gmail.com>
++#
++# This program is free software; you can redistribute it and/or
++# modify it under the terms of the GNU General Public License as
++# published by the Free Software Foundation; either version 2 of
++# the License, or (at your option) any later version.
++#
++# This program is distributed in the hope that it will be useful,
++# but WITHOUT ANY WARRANTY; without even the implied warranty of
++# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++# GNU General Public License for more details.
++#
++# You should have received a copy of the GNU General Public License
++# along with this program; if not, write to the Free Software
++# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
++# MA 02111-1307 USA
++#
++
++include $(TOPDIR)/config.mk
++
++LIB    = $(obj)lib$(BOARD).o
++
++COBJS  := mx6_cubox-i.o mx6_cubox-i_spl.o
++
++SRCS   := $(COBJS:.o=.c)
++OBJS   := $(addprefix $(obj),$(COBJS))
++
++$(LIB):        $(obj).depend $(OBJS)
++	$(call cmd_link_o_target, $(OBJS))
++
++#########################################################################
++
++# defines $(obj).depend target
++include $(SRCTREE)/rules.mk
++
++sinclude $(obj).depend
++
++#########################################################################
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/mx6_cubox-i_bootscript.txt u-boot-imx6/board/solidrun/mx6_cubox-i/mx6_cubox-i_bootscript.txt
+--- u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/mx6_cubox-i_bootscript.txt	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_cubox-i/mx6_cubox-i_bootscript.txt	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,30 @@
++setenv bootargs enable_wait_mode=off
++setenv nextcon 0;
++
++if test xXGA = "x$panel" ; then
++	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,LDB-XGA,if=RGB24
++else
++	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,OC-VGA,if=RGB24
++fi
++
++setenv nextcon 1
++setenv fbmem "fbmem=10M";
++if hdmidet ; then
++	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=hdmi,1280x720M@60,if=RGB24
++	setenv fbmem $fbmem,28M;
++	setexpr nextcon $nextcon + 1;
++else
++	echo "------ no HDMI monitor";
++fi
++
++while test "4" -ne $nextcon ; do
++	setenv bootargs $bootargs video=mxcfb${nextcon}:off ;
++	setexpr nextcon $nextcon + 1 ;
++done
++
++setenv bootargs $bootargs $fbmem
++setenv bootargs $bootargs console=ttymxc0,115200 vmalloc=400M consoleblank=0 ;
++${fs}load ${dtype} ${disk}:1 10800000 /boot/uImage
++&& ${fs}load ${dtype} ${disk}:1 12800000 /boot/uramdisk.img
++&& bootm 10800000 12800000 ;
++echo "Error loading kernel image"
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/mx6_cubox-i.c u-boot-imx6/board/solidrun/mx6_cubox-i/mx6_cubox-i.c
+--- u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/mx6_cubox-i.c	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_cubox-i/mx6_cubox-i.c	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,533 @@
++/*
++ * Copyright (C) 2012 Freescale Semiconductor, Inc.
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>.
++ *
++ * Author: Fabio Estevam <fabio.estevam@freescale.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License, or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ */
++
++#include <asm/arch/clock.h>
++#include <asm/arch/crm_regs.h>
++#include <asm/arch/imx-regs.h>
++#include <asm/arch/iomux.h>
++#include <asm/arch/mx6-pins.h>
++#include <asm/arch/mxc_hdmi.h>
++#include <asm/arch/sys_proto.h>
++#include <asm/errno.h>
++#include <asm/gpio.h>
++#include <asm/imx-common/iomux-v3.h>
++#include <asm/imx-common/boot_mode.h>
++#include <asm/io.h>
++#include <mmc.h>
++#include <fsl_esdhc.h>
++#include <miiphy.h>
++#include <netdev.h>
++#include <ipu_pixfmt.h>
++#include "../../../drivers/video/mxcfb.h"
++
++DECLARE_GLOBAL_DATA_PTR;
++
++#define MX6QDL_SET_PAD(p, q) \
++	if (is_cpu_type(MXC_CPU_MX6Q)) \
++		imx_iomux_v3_setup_pad(MX6Q_##p | q);\
++	else \
++		imx_iomux_v3_setup_pad(MX6DL_##p | q)
++
++#define UART_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
++	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |			\
++	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
++
++#define USDHC_PAD_CTRL (PAD_CTL_PUS_47K_UP |			\
++	PAD_CTL_SPEED_LOW | PAD_CTL_DSE_80ohm |			\
++	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
++
++#define USDHC_PAD_CLK_CTRL (PAD_CTL_SPEED_LOW |			\
++	PAD_CTL_DSE_80ohm | PAD_CTL_SRE_FAST |			\
++	PAD_CTL_HYS)
++
++#define USDHC_PAD_GPIO_CTRL (PAD_CTL_PUS_22K_UP |		\
++	PAD_CTL_SPEED_LOW | PAD_CTL_DSE_40ohm |			\
++	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
++
++#define ENET_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			\
++	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
++
++#define ENET_PAD_CTRL_PD  (PAD_CTL_PUS_100K_DOWN |		\
++	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
++
++#define ENET_PAD_CTRL_CLK  (PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | \
++	PAD_CTL_SRE_FAST)
++
++#define LED IMX_GPIO_NR(4, 29)
++
++int hb_cuboxi_ = 0; /* 1 is HummingBoard, 0 is CuBox-i */
++int dram_init(void)
++{
++	uint cpurev, imxtype;
++	u32 sdram_size;
++
++	cpurev = get_cpu_rev();
++	imxtype = (cpurev & 0xFF000) >> 12;
++
++	switch (imxtype){
++	case MXC_CPU_MX6SOLO:
++		sdram_size = 512u * 1024 * 1024;
++		break;
++	case MXC_CPU_MX6Q:
++	{
++		/* Read first the snoop control unit config register */
++		u32 scu_config = *(u32 *)(SCU_BASE_ADDR + 0x4);
++		if ((scu_config & 0x3) == 0x3) /* Quad core */
++			sdram_size = 2u * 1024 * 1024 * 1024;
++		else /* Dual core */
++			sdram_size = 1u * 1024 * 1024 * 1024;
++		break;
++	}
++	case MXC_CPU_MX6DL:
++	default:
++		sdram_size = 1u * 1024 * 1024 * 1024;
++		break;
++	}
++	gd->ram_size = get_ram_size((void *)PHYS_SDRAM, sdram_size);
++
++	return 0;
++}
++
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++iomux_v3_cfg_t const uart1_pads[] = {
++	MX6_PAD_CSI0_DAT10__UART1_TXD | MUX_PAD_CTRL(UART_PAD_CTRL),
++	MX6_PAD_CSI0_DAT11__UART1_RXD | MUX_PAD_CTRL(UART_PAD_CTRL),
++};
++
++
++iomux_v3_cfg_t const usdhc2_pads[] = {
++	MX6_PAD_SD2_CLK__USDHC2_CLK	| MUX_PAD_CTRL(USDHC_PAD_CLK_CTRL),
++	MX6_PAD_SD2_CMD__USDHC2_CMD	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT0__USDHC2_DAT0	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT1__USDHC2_DAT1	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT2__USDHC2_DAT2	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++	MX6_PAD_SD2_DAT3__USDHC2_DAT3	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
++        MX6_PAD_GPIO_4__USDHC2_CD       | MUX_PAD_CTRL(USDHC_PAD_GPIO_CTRL),
++};
++iomux_v3_cfg_t const hb_cbi_sense[] = {
++	/* Following is only for sensing if it's CuBox-i or HummingBoard */
++	MX6_PAD_KEY_ROW1__GPIO_4_9      | MUX_PAD_CTRL(UART_PAD_CTRL),
++	MX6_PAD_EIM_DA4__GPIO_3_4       | MUX_PAD_CTRL(UART_PAD_CTRL),
++};
++#endif
++
++static void setup_iomux_uart(void)
++{
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++	imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));
++#endif
++#if defined(CONFIG_MX6QDL)
++	MX6QDL_SET_PAD(PAD_CSI0_DAT10__UART1_TXD, MUX_PAD_CTRL(UART_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_CSI0_DAT11__UART1_RXD, MUX_PAD_CTRL(UART_PAD_CTRL));
++#endif
++}
++
++#ifdef CONFIG_FSL_ESDHC
++struct fsl_esdhc_cfg usdhc_cfg[1] = {
++        { USDHC2_BASE_ADDR },
++};
++
++int board_mmc_getcd(struct mmc *mmc)
++{
++        struct fsl_esdhc_cfg *cfg = (struct fsl_esdhc_cfg *)mmc->priv;
++
++        if (cfg->esdhc_base == USDHC2_BASE_ADDR) {
++                return !gpio_get_value(IMX_GPIO_NR(1, 4));
++        }
++
++        return 0;
++}
++
++int board_mmc_init(bd_t *bis)
++{
++        /*
++         * Only one USDHC controller
++         */
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++        imx_iomux_v3_setup_multiple_pads(usdhc2_pads, ARRAY_SIZE(usdhc2_pads));
++#endif
++#if defined(CONFIG_MX6QDL)
++	MX6QDL_SET_PAD(PAD_SD2_CLK__USDHC2_CLK   , MUX_PAD_CTRL(USDHC_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_SD2_CMD__USDHC2_CMD   , MUX_PAD_CTRL(USDHC_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_SD2_DAT0__USDHC2_DAT0 , MUX_PAD_CTRL(USDHC_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_SD2_DAT1__USDHC2_DAT1 , MUX_PAD_CTRL(USDHC_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_SD2_DAT2__USDHC2_DAT2 , MUX_PAD_CTRL(USDHC_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_SD2_DAT3__USDHC2_DAT3 , MUX_PAD_CTRL(USDHC_PAD_CTRL));
++	/* Carrier MicroSD Card Detect */
++	MX6QDL_SET_PAD(PAD_GPIO_4__USDHC2_CD	, MUX_PAD_CTRL(NO_PAD_CTRL));
++#endif
++        gpio_direction_input(IMX_GPIO_NR(1, 4));
++        usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC2_CLK);
++
++        return fsl_esdhc_initialize(bis, &usdhc_cfg[0]);
++}
++#endif
++
++#ifdef CONFIG_FEC_MXC
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++iomux_v3_cfg_t const enet_pads[] = {
++	MX6_PAD_ENET_MDIO__ENET_MDIO		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_ENET_MDC__ENET_MDC		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	/* AR8035 reset */
++	MX6_PAD_KEY_ROW4__GPIO_4_15		| MUX_PAD_CTRL(ENET_PAD_CTRL_PD),		
++	/* AR8035 interrupt */
++	MX6_PAD_DI0_PIN2__GPIO_4_18		| MUX_PAD_CTRL(NO_PAD_CTRL),		
++	/* GPIO16 -> AR8035 25MHz */
++	MX6_PAD_GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT	| MUX_PAD_CTRL(NO_PAD_CTRL),		
++	MX6_PAD_RGMII_TXC__ENET_RGMII_TXC		| MUX_PAD_CTRL(NO_PAD_CTRL),		
++	MX6_PAD_RGMII_TD0__ENET_RGMII_TD0		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TD1__ENET_RGMII_TD1		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TD2__ENET_RGMII_TD2		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TD3__ENET_RGMII_TD3		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL		| MUX_PAD_CTRL(ENET_PAD_CTRL),		
++	/* AR8035 CLK_25M --> ENET_REF_CLK (V22) */
++	MX6_PAD_ENET_REF_CLK__ENET_TX_CLK		| MUX_PAD_CTRL(ENET_PAD_CTRL_CLK),		
++        MX6_PAD_RGMII_RXC__ENET_RGMII_RXC       | MUX_PAD_CTRL(ENET_PAD_CTRL),
++        MX6_PAD_RGMII_RD0__ENET_RGMII_RD0       | MUX_PAD_CTRL(ENET_PAD_CTRL_PD),
++        MX6_PAD_RGMII_RD1__ENET_RGMII_RD1       | MUX_PAD_CTRL(ENET_PAD_CTRL_PD),
++        MX6_PAD_RGMII_RD2__ENET_RGMII_RD2       | MUX_PAD_CTRL(ENET_PAD_CTRL),
++        MX6_PAD_RGMII_RD3__ENET_RGMII_RD3       | MUX_PAD_CTRL(ENET_PAD_CTRL),
++        MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL      | MUX_PAD_CTRL(ENET_PAD_CTRL_PD),
++};
++#endif
++
++static void setup_iomux_enet(void)
++{
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++	imx_iomux_v3_setup_multiple_pads(enet_pads, ARRAY_SIZE(enet_pads));
++#endif
++#if defined(CONFIG_MX6QDL)
++	MX6QDL_SET_PAD(PAD_ENET_MDIO__ENET_MDIO, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_ENET_MDC__ENET_MDC, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	/* AR8035 reset */
++	MX6QDL_SET_PAD(PAD_KEY_ROW4__GPIO_4_15, MUX_PAD_CTRL(ENET_PAD_CTRL_PD));
++	/* AR8035 interrupt */
++	MX6QDL_SET_PAD(PAD_DI0_PIN2__GPIO_4_18, MUX_PAD_CTRL(NO_PAD_CTRL));
++	/* GPIO16 -> AR8035 25MHz */
++	MX6QDL_SET_PAD(PAD_GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT, MUX_PAD_CTRL(NO_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_TXC__ENET_RGMII_TXC, MUX_PAD_CTRL(NO_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_TD0__ENET_RGMII_TD0, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_TD1__ENET_RGMII_TD1, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_TD2__ENET_RGMII_TD2, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_TD3__ENET_RGMII_TD3, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_TX_CTL__RGMII_TX_CTL, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	/* AR8035 CLK_25M --> ENET_REF_CLK (V22) */
++	MX6QDL_SET_PAD(PAD_ENET_REF_CLK__ENET_TX_CLK, MUX_PAD_CTRL(ENET_PAD_CTRL_CLK));
++	MX6QDL_SET_PAD(PAD_RGMII_RXC__ENET_RGMII_RXC, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_RD0__ENET_RGMII_RD0, MUX_PAD_CTRL(ENET_PAD_CTRL_PD));
++	MX6QDL_SET_PAD(PAD_RGMII_RD1__ENET_RGMII_RD1, MUX_PAD_CTRL(ENET_PAD_CTRL_PD));
++	MX6QDL_SET_PAD(PAD_RGMII_RD2__ENET_RGMII_RD2, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_RD3__ENET_RGMII_RD3, MUX_PAD_CTRL(ENET_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_RGMII_RX_CTL__RGMII_RX_CTL, MUX_PAD_CTRL(ENET_PAD_CTRL_PD));
++	MX6QDL_SET_PAD(PAD_ENET_RXD0__GPIO_1_27, MUX_PAD_CTRL(ENET_PAD_CTRL_PD));
++	MX6QDL_SET_PAD(PAD_ENET_RXD1__GPIO_1_26, MUX_PAD_CTRL(ENET_PAD_CTRL_PD));
++#endif
++	/*
++	 * Reset AR8035 PHY. Since it runs 25MHz reference clock, it
++	 * requires two resets.
++	 */
++	gpio_direction_output(IMX_GPIO_NR(4, 15), 0);
++	udelay(1000 * 2);
++	gpio_set_value(IMX_GPIO_NR(4, 15), 1);
++	udelay(1000 * 2);
++	gpio_set_value(IMX_GPIO_NR(4, 15), 0);
++	udelay(1000 * 2);
++	gpio_set_value(IMX_GPIO_NR(4, 15), 1);
++	udelay(1000 * 2);
++}
++int fecmxc_initialize(bd_t *bd)
++{
++	/*
++	 * Initialize the phy in address 0x0 or 0x4 (0x11 phy mask).
++	 * The LED_ACT pin on the carrier-one boards had a pull down that
++	 * forces the phy address to 0x0; where on CuBox-i and the production
++	 * HummingBoard that pin is connected directly to LED that depending
++	 * on the pull down strength of the LED it might be sampled
++	 * as '0' or '1' thus the phy address might appear as either address
++	 * 0x0 or 0x4.
++	 */
++	return fecmxc_initialize_multi(bd, -1, 0x11, IMX_FEC_BASE);
++}
++
++int board_phy_config(struct phy_device *phydev)
++{
++	if (phydev->drv->config)
++		phydev->drv->config(phydev);
++
++	return 0;
++}
++
++int enable_fec_anatop_clock(void)
++{
++	u32 reg = 0;
++	s32 timeout = 100000;
++
++	struct anatop_regs __iomem *anatop =
++	(struct anatop_regs __iomem *)ANATOP_BASE_ADDR;
++
++	reg = readl(&anatop->pll_enet);
++	reg &= 0xfffffffc; /* Set PLL to generate 25MHz */
++	writel(reg, &anatop->pll_enet);
++	if ((reg & BM_ANADIG_PLL_ENET_POWERDOWN) ||
++	    (!(reg & BM_ANADIG_PLL_ENET_LOCK))) {
++		reg &= ~BM_ANADIG_PLL_ENET_POWERDOWN;
++		writel(reg, &anatop->pll_enet);
++		while (timeout--) {
++			if (readl(&anatop->pll_enet) & BM_ANADIG_PLL_ENET_LOCK)
++				break;
++		}
++		if (timeout < 0)
++			return -ETIMEDOUT;
++	}
++	/* Enable FEC clock */
++	reg |= BM_ANADIG_PLL_ENET_ENABLE;
++	reg &= ~BM_ANADIG_PLL_ENET_BYPASS;
++	writel(reg, &anatop->pll_enet);
++
++	return 0;
++}
++int board_eth_init(bd_t *bis)
++{
++	int ret;
++        struct iomuxc_base_regs *const iomuxc_regs
++                = (struct iomuxc_base_regs *) IOMUXC_BASE_ADDR;
++	struct anatop_regs __iomem *anatop =
++                (struct anatop_regs __iomem *)ANATOP_BASE_ADDR;
++	u32 reg = 0;
++	s32 timeout = 100000;
++
++	enable_fec_anatop_clock();
++	/* set gpr1[21] */
++        clrsetbits_le32(&iomuxc_regs->gpr[1], 0, (1 << 21));
++
++	while (timeout--) {
++        	if (readl(&anatop->pll_enet) & BM_ANADIG_PLL_ENET_LOCK)
++			break;
++	}
++
++	setup_iomux_enet();
++
++	ret = cpu_eth_init(bis);
++	if (ret)
++		printf("FEC MXC: %s:failed\n", __func__);
++
++	return 0;
++}
++#endif
++
++#ifdef CONFIG_VIDEO_IPUV3
++static struct fb_videomode const hdmi = {
++        .name           = "HDMI",
++        .refresh        = 60,
++        .xres           = 1024,
++        .yres           = 768,
++        .pixclock       = 15385,
++        .left_margin    = 220,
++        .right_margin   = 40,
++        .upper_margin   = 21,
++        .lower_margin   = 7,
++        .hsync_len      = 60,
++        .vsync_len      = 10,
++        .sync           = FB_SYNC_EXT | FB_SYNC_CLK_LAT_FALL,
++        .vmode          = FB_VMODE_NONINTERLACED
++};
++
++static int detect_hdmi(void)
++{
++        struct hdmi_regs *hdmi  = (struct hdmi_regs *)HDMI_ARB_BASE_ADDR;
++        return readb(&hdmi->phy_stat0) & HDMI_DVI_STAT;
++}
++
++int board_video_skip(void)
++{
++        int ret;
++
++        ret = ipuv3_fb_init(&hdmi, 0, IPU_PIX_FMT_RGB24);
++
++        if (ret)
++                printf("HDMI cannot be configured: %d\n", ret);
++
++	if (detect_hdmi())
++		imx_enable_hdmi_phy();
++
++        return ret;
++}
++
++static void setup_display(void)
++{
++        struct mxc_ccm_reg *mxc_ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
++        int reg;
++
++        enable_ipu_clock();
++        imx_setup_hdmi();
++
++        reg = readl(&mxc_ccm->chsccdr);
++        reg |= (CHSCCDR_CLK_SEL_LDB_DI0
++                << MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET);
++        writel(reg, &mxc_ccm->chsccdr);
++}
++#endif /* CONFIG_VIDEO_IPUV3 */
++
++#ifdef CONFIG_USB_EHCI_MX6
++#define USB_OTG_EN IMX_GPIO_NR(3, 22)
++#define USB_H1_EN IMX_GPIO_NR(1, 0)
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++iomux_v3_cfg_t const usb_en_pads[] = {
++	MX6_PAD_EIM_D22__GPIO_3_22 | MUX_PAD_CTRL(UART_PAD_CTRL),
++	MX6_PAD_GPIO_0__GPIO_1_0 | MUX_PAD_CTRL(UART_PAD_CTRL),
++};
++iomux_v3_cfg_t const usb_id_pad[] = {
++	MX6_PAD_GPIO_1__USB_OTG_ID,
++};
++#endif
++
++int board_ehci_hcd_init(int port)
++{
++        return 0;
++}
++#endif
++
++char config_sys_prompt_cuboxi[] = "CuBox-i U-Boot > ";
++char config_sys_prompt_hummingboard[] = "HummingBoard U-Boot > ";
++char *config_sys_prompt = config_sys_prompt_cuboxi;
++static void detect_board(void)
++{
++	int val1,val2;
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++	imx_iomux_v3_setup_multiple_pads(hb_cbi_sense, ARRAY_SIZE(hb_cbi_sense));
++#endif
++#if defined(CONFIG_MX6QDL)
++	MX6QDL_SET_PAD(PAD_KEY_ROW1__GPIO_4_9, MUX_PAD_CTRL(UART_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_EIM_DA4__GPIO_3_4, MUX_PAD_CTRL(UART_PAD_CTRL));
++#endif
++	gpio_direction_input(IMX_GPIO_NR(4, 9));
++	gpio_direction_input(IMX_GPIO_NR(3, 4));
++
++	val1 = gpio_get_value(IMX_GPIO_NR(4, 9));
++	val2 = gpio_get_value(IMX_GPIO_NR(3, 4));
++
++	/*
++	 * Machine selection -
++	 * Machine        val1, val2
++	 * -------------------------
++	 * HB rev 3.x     x     0
++	 * CBi            0     1
++	 * HB             1     1
++	 */
++
++	if (val2 == 0) {
++		hb_cuboxi_ = 1;
++		config_sys_prompt = config_sys_prompt_hummingboard;
++	} else if (val1 == 0) {
++		hb_cuboxi_ = 0;
++		config_sys_prompt = config_sys_prompt_cuboxi;
++	} else {
++		hb_cuboxi_ = 1;
++		config_sys_prompt = config_sys_prompt_hummingboard;
++	}
++}
++
++int board_early_init_f(void)
++{
++	setup_iomux_uart();
++	detect_board();
++#ifdef CONFIG_VIDEO_IPUV3
++	setup_display();
++#endif
++#ifdef CONFIG_USB_EHCI_MX6
++#if defined(CONFIG_MX6QDL)
++	MX6QDL_SET_PAD(PAD_EIM_D22__GPIO_3_22 , MUX_PAD_CTRL(UART_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_GPIO_0__GPIO_1_0 , MUX_PAD_CTRL(UART_PAD_CTRL));
++	if (hb_cuboxi_ == 0) /* CuBox-i */
++		MX6QDL_SET_PAD(PAD_GPIO_1__USB_OTG_ID, 0);
++#else
++	/* Setup USB OTG ID */
++	if (hb_cuboxi_ == 0) /* CuBox-i */
++		imx_iomux_v3_setup_multiple_pads(usb_id_pad, ARRAY_SIZE(usb_id_pad));
++	/* Setup enable pads */
++	imx_iomux_v3_setup_multiple_pads(usb_en_pads, ARRAY_SIZE(usb_en_pads));
++#endif
++	/* Enable USB OTG and H1 current limiter */
++	gpio_direction_output(USB_OTG_EN, 1);
++	gpio_direction_output(USB_H1_EN, 1);
++#endif
++	return 0;
++}
++
++#if defined(CONFIG_MX6Q) || defined(CONFIG_MX6DL)
++iomux_v3_cfg_t const led_pads[] = {
++	MX6_PAD_DISP0_DAT8__GPIO_4_29 | MUX_PAD_CTRL(UART_PAD_CTRL),
++};
++#endif
++
++int board_init(void)
++{
++	/* address of boot parameters */
++	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;
++	/*
++	 * The reason hb_cuboxi_ is not checked here is because it seems to be
++	 * overwritten somewhere, somehow
++	 */
++
++	if (config_sys_prompt == config_sys_prompt_cuboxi) {
++		gd->bd->bi_arch_number = 4821; /* CuBox-i machine ID */
++		/* Enable front LED */
++		gpio_direction_output(LED, 0);
++	} else {
++		gd->bd->bi_arch_number = 4773; /* HummingBoard machine ID */
++	}
++	return 0;
++}
++
++static char const *board_type = "uninitialized";
++
++int checkboard(void)
++{
++	if (hb_cuboxi_ == 0) {
++		puts("Board: MX6-CuBox-i\n");
++		board_type = "mx6-cubox-i";
++	} else {
++		puts("Board: MX6-HummingBoard\n");
++		board_type = "mx6-hummingboard";
++	}
++	return 0;
++}
++
++#ifdef CONFIG_CMD_BMODE
++static const struct boot_mode board_boot_modes[] = {
++	/* 4 bit bus width */
++	{"mmc0", MAKE_CFGVAL(0x40, 0x28, 0x00, 0x00)},
++	{NULL,	 0},
++};
++#endif
++
++int board_late_init(void)
++{
++        int cpurev = get_cpu_rev();
++        setenv("cpu",get_imx_type((cpurev & 0xFF000) >> 12));
++        setenv("board",board_type);
++
++#ifdef CONFIG_CMD_BMODE
++        add_board_boot_modes(board_boot_modes);
++#endif
++
++	return 0;
++}
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/mx6_cubox-i_spl.c u-boot-imx6/board/solidrun/mx6_cubox-i/mx6_cubox-i_spl.c
+--- u-boot-2013.10-rc4/board/solidrun/mx6_cubox-i/mx6_cubox-i_spl.c	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6_cubox-i/mx6_cubox-i_spl.c	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,773 @@
++/*
++ * Author: Tungyi Lin <tungyilin1127@gmail.com>
++ *
++ * Derived from EDM_CF_IMX6 code by TechNexion,Inc
++ * Ported to SolidRun microSOM by Rabeeh Khoury <rabeeh@solid-run.com>
++ *
++ * SPDX-License-Identifier:     GPL-2.0+
++ */
++#include <common.h>
++#include <asm/io.h>
++#include <asm/arch/sys_proto.h>
++#ifdef CONFIG_SPL
++#include <spl.h>
++#include <libfdt.h>
++#endif
++#include <asm/arch/iomux.h>
++#include <asm/arch/mx6-pins.h>
++#include <asm/gpio.h>
++
++#define CONFIG_SPL_STACK	0x0091FFB8
++
++DECLARE_GLOBAL_DATA_PTR;
++
++#if defined(CONFIG_SPL_BUILD)
++
++#define MX6QDL_SET_PAD(p, q) \
++        if (is_cpu_type(MXC_CPU_MX6Q)) \
++                imx_iomux_v3_setup_pad(MX6Q_##p | q);\
++        else \
++                imx_iomux_v3_setup_pad(MX6DL_##p | q)
++
++#define UART_PAD_CTRL  (PAD_CTL_PUS_100K_UP |                   \
++        PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |                 \
++        PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
++
++
++static enum boot_device boot_dev;
++static enum boot_device get_boot_device(void);
++static u32 spl_get_imx_type(void);
++
++static inline void setup_boot_device(void)
++{
++	uint soc_sbmr = readl(SRC_BASE_ADDR + 0x4);
++	uint bt_mem_ctl = (soc_sbmr & 0x000000FF) >> 4 ;
++	uint bt_mem_type = (soc_sbmr & 0x00000008) >> 3;
++	uint bt_mem_mmc = (soc_sbmr & 0x00001000) >> 12;
++
++	switch (bt_mem_ctl) {
++	case 0x0:
++		if (bt_mem_type)
++			boot_dev = MX6_ONE_NAND_BOOT;
++		else
++			boot_dev = MX6_WEIM_NOR_BOOT;
++		break;
++	case 0x2:
++			boot_dev = MX6_SATA_BOOT;
++		break;
++	case 0x3:
++		if (bt_mem_type)
++			boot_dev = MX6_I2C_BOOT;
++		else
++			boot_dev = MX6_SPI_NOR_BOOT;
++		break;
++	case 0x4:
++	case 0x5:
++		if (bt_mem_mmc)
++			boot_dev = MX6_SD0_BOOT;
++		else
++			boot_dev = MX6_SD1_BOOT;
++		break;
++	case 0x6:
++	case 0x7:
++		boot_dev = MX6_MMC_BOOT;
++		break;
++	case 0x8 ... 0xf:
++		boot_dev = MX6_NAND_BOOT;
++		break;
++	default:
++		boot_dev = MX6_SD1_BOOT;
++		break;
++	}
++}
++
++enum boot_device get_boot_device(void) {
++	return boot_dev;
++}
++
++static const char *build_dts_name(void)
++{
++	char *dt_prefix;
++	char *dt_suffix;
++	int val1, val2;
++
++	switch (spl_get_imx_type()){
++	case MXC_CPU_MX6Q:
++		dt_prefix = "imx6q";
++		break;
++	case MXC_CPU_MX6SOLO:
++	case MXC_CPU_MX6DL:
++		dt_prefix = "imx6dl";	
++		break;	
++	default:
++		dt_prefix = "unknown";	
++		break;	
++	}
++
++	MX6QDL_SET_PAD(PAD_KEY_ROW1__GPIO_4_9, MUX_PAD_CTRL(UART_PAD_CTRL));
++	MX6QDL_SET_PAD(PAD_EIM_DA4__GPIO_3_4, MUX_PAD_CTRL(UART_PAD_CTRL));
++
++	gpio_direction_input(IMX_GPIO_NR(4, 9));
++	gpio_direction_input(IMX_GPIO_NR(3, 4));
++
++	val1 = gpio_get_value(IMX_GPIO_NR(4, 9));
++	val2 = gpio_get_value(IMX_GPIO_NR(3, 4));
++
++	/*
++	 * Machine selection -
++	 * Machine        val1, val2
++	 * -------------------------
++	 * HB rev 3.x     x     0
++	 * CBi            0     1
++	 * HB             1     1
++	 */
++
++	if (val2 == 0) {
++                dt_suffix = "-hummingboard.dtb";
++	} else if (val1 == 0) {
++                dt_suffix = "-cubox-i.dtb";
++	} else {
++		dt_suffix = "-hummingboard.dtb";
++	}
++	
++	return strcat(dt_prefix, dt_suffix);
++}
++
++#include "asm/arch/mx6_ddr_regs.h"
++
++static void spl_dram_init_mx6solo_512mb(void);
++static void spl_dram_init_mx6dl_1g(void);
++static void spl_dram_init_mx6dq_1g(void);
++static void spl_dram_init_mx6dq_2g(void);
++static u32 spl_dram_init(u32 imxtype);
++
++static void spl_mx6q_dram_setup_iomux(void)
++{
++	volatile struct mx6qd_iomux_ddr_regs *mx6q_ddr_iomux;
++	volatile struct mx6qd_iomux_grp_regs *mx6q_grp_iomux;
++
++	mx6q_ddr_iomux = (struct mx6dq_iomux_ddr_regs *) MX6DQ_IOM_DDR_BASE;
++	mx6q_grp_iomux = (struct mx6dq_iomux_grp_regs *) MX6DQ_IOM_GRP_BASE;
++
++	mx6q_grp_iomux->grp_ddr_type = (u32)0x000c0000;
++	mx6q_grp_iomux->grp_ddrpke = (u32)0x00000000;
++	mx6q_ddr_iomux->dram_sdclk_0 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_sdclk_1 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_cas = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_ras = (u32)0x00020030;
++	mx6q_grp_iomux->grp_addds = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_reset = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_sdcke0 = (u32)0x00003000;
++	mx6q_ddr_iomux->dram_sdcke1 = (u32)0x00003000;
++	mx6q_ddr_iomux->dram_sdba2 = (u32)0x00000000;
++	mx6q_ddr_iomux->dram_sdodt0 = (u32)0x00003030;
++	mx6q_ddr_iomux->dram_sdodt1 = (u32)0x00003030;
++	mx6q_grp_iomux->grp_ctlds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_ddrmode_ctl = (u32)0x00020000;
++	mx6q_ddr_iomux->dram_sdqs0 = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_sdqs1 = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_sdqs2 = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_sdqs3 = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_sdqs4 = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_sdqs5 = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_sdqs6 = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_sdqs7 = (u32)0x00000030;
++	mx6q_grp_iomux->grp_ddrmode = (u32)0x00020000;
++	mx6q_grp_iomux->grp_b0ds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_b1ds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_b2ds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_b3ds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_b4ds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_b5ds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_b6ds = (u32)0x00000030;
++	mx6q_grp_iomux->grp_b7ds = (u32)0x00000030;
++	mx6q_ddr_iomux->dram_dqm0 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_dqm1 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_dqm2 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_dqm3 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_dqm4 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_dqm5 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_dqm6 = (u32)0x00020030;
++	mx6q_ddr_iomux->dram_dqm7 = (u32)0x00020030;
++}
++
++static void spl_mx6dl_dram_setup_iomux(void)
++{
++	volatile struct mx6sdl_iomux_ddr_regs *mx6dl_ddr_iomux;
++	volatile struct mx6sdl_iomux_grp_regs *mx6dl_grp_iomux;
++
++	mx6dl_ddr_iomux = (struct mx6sdl_iomux_ddr_regs *) MX6SDL_IOM_DDR_BASE;
++	mx6dl_grp_iomux = (struct mx6sdl_iomux_grp_regs *) MX6SDL_IOM_GRP_BASE;
++
++	mx6dl_grp_iomux->grp_ddr_type = (u32)0x000c0000;
++	mx6dl_grp_iomux->grp_ddrpke = (u32)0x00000000;
++	mx6dl_ddr_iomux->dram_sdclk_0 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdclk_1 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_cas = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_ras = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_addds = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_reset = (u32)0x000c0028;
++	mx6dl_ddr_iomux->dram_sdcke0 = (u32)0x00003000;
++	mx6dl_ddr_iomux->dram_sdcke1 = (u32)0x00003000;
++	mx6dl_ddr_iomux->dram_sdba2 = (u32)0x00000000;
++	mx6dl_ddr_iomux->dram_sdodt0 = (u32)0x00003030;
++	mx6dl_ddr_iomux->dram_sdodt1 = (u32)0x00003030;
++	mx6dl_grp_iomux->grp_ctlds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_ddrmode_ctl = (u32)0x00020000;
++	mx6dl_ddr_iomux->dram_sdqs0 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdqs1 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdqs2 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdqs3 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdqs4 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdqs5 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdqs6 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_sdqs7 = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_ddrmode = (u32)0x00020000;
++	mx6dl_grp_iomux->grp_b0ds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_b1ds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_b2ds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_b3ds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_b4ds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_b5ds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_b6ds = (u32)0x00000028;
++	mx6dl_grp_iomux->grp_b7ds = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm0 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm1 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm2 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm3 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm4 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm5 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm6 = (u32)0x00000028;
++	mx6dl_ddr_iomux->dram_dqm7 = (u32)0x00000028;
++}
++
++/* microSOM with Solo processor 512MByte memory */
++static void spl_dram_init_mx6solo_512mb(void)
++{
++	volatile struct mmdc_p_regs *mmdc_p0;
++	volatile struct mmdc_p_regs *mmdc_p1;
++	mmdc_p0 = (struct mmdc_p_regs *) MMDC_P0_BASE_ADDR;
++	mmdc_p1 = (struct mmdc_p_regs *) MMDC_P1_BASE_ADDR;
++
++	/* ZQ */
++	mmdc_p0->mpzqhwctrl = (u32)0xa1390003;
++	mmdc_p1->mpzqhwctrl = (u32)0xa1390003;
++	/* Write leveling */
++	mmdc_p0->mpwldectrl0 = (u32)0x0045004D;
++	mmdc_p0->mpwldectrl1 = (u32)0x003A0047;
++
++	mmdc_p0->mpdgctrl0 = (u32)0x023C0224;
++	mmdc_p0->mpdgctrl1 = (u32)0x02000220;
++	mmdc_p0->mprddlctl = (u32)0x44444846;
++	mmdc_p0->mpwrdlctl = (u32)0x32343032;
++	/* Read data bit delay */
++	mmdc_p0->mprddqby0dl = (u32)0x33333333;
++	mmdc_p0->mprddqby1dl = (u32)0x33333333;
++	mmdc_p0->mprddqby2dl = (u32)0x33333333;
++	mmdc_p0->mprddqby3dl = (u32)0x33333333;
++	mmdc_p1->mprddqby0dl = (u32)0x33333333;
++	mmdc_p1->mprddqby1dl = (u32)0x33333333;
++	mmdc_p1->mprddqby2dl = (u32)0x33333333;
++	mmdc_p1->mprddqby3dl = (u32)0x33333333;
++	/* Complete calibration by forced measurement */
++	mmdc_p0->mpmur0 = (u32)0x00000800;
++	mmdc_p0->mdpdc = (u32)0x0002002d;
++	mmdc_p0->mdotc = (u32)0x00333040;
++	mmdc_p0->mdcfg0 = (u32)0x3f435313;//0x3F4352F3;//0x3f435313
++	mmdc_p0->mdcfg1 = (u32)0xb66e8b63;//0xB66D8B63;//0xb66e8b63
++	mmdc_p0->mdcfg2 = (u32)0x01ff00db;
++	mmdc_p0->mdmisc = (u32)0x00011740;
++	mmdc_p0->mdscr = (u32)0x00008000;
++	mmdc_p0->mdrwd = (u32)0x000026d2;
++	mmdc_p0->mdor = (u32)0x00431023;
++	mmdc_p0->mdasp = (u32)0x00000017;//0x00000017
++	mmdc_p0->mdctl = (u32)0x83190000;//0x83190000 <-- this should be it
++	mmdc_p0->mdscr = (u32)0x02008032;
++	mmdc_p0->mdscr = (u32)0x00008033;
++	mmdc_p0->mdscr = (u32)0x04008031;
++	mmdc_p0->mdscr = (u32)0x05208030;
++	mmdc_p0->mdscr = (u32)0x04008040;
++	mmdc_p0->mdref = (u32)0x00007800;
++	mmdc_p0->mpodtctrl = (u32)0x00011117;
++	mmdc_p1->mpodtctrl = (u32)0x00011117;
++	mmdc_p0->mdpdc = (u32)0x0002556d;
++	mmdc_p1->mdpdc = (u32)0x00011006;
++	mmdc_p0->mdscr = (u32)0x00000000;
++}
++
++/* microSOM with Dual lite processor 1GByte memory */
++static void spl_dram_init_mx6dl_1g(void)
++{
++	volatile struct mmdc_p_regs *mmdc_p0;
++	volatile struct mmdc_p_regs *mmdc_p1;
++	mmdc_p0 = (struct mmdc_p_regs *) MMDC_P0_BASE_ADDR;
++	mmdc_p1 = (struct mmdc_p_regs *) MMDC_P1_BASE_ADDR;
++
++	/* Calibrations */
++	/* ZQ */
++	mmdc_p0->mpzqhwctrl = (u32)0xa1390003;
++	mmdc_p1->mpzqhwctrl = (u32)0xa1390003;
++	/* write leveling */
++	mmdc_p0->mpwldectrl0 = (u32)0x0045004D;
++	mmdc_p0->mpwldectrl1 = (u32)0x003A0047;
++	mmdc_p1->mpwldectrl0 = (u32)0x001F001F;
++	mmdc_p1->mpwldectrl1 = (u32)0x00210035;
++	/* DQS gating, read delay, write delay calibration values
++	based on calibration compare of 0x00ffff00 */
++	mmdc_p0->mpdgctrl0 = (u32)0x023C0224;
++	mmdc_p0->mpdgctrl1 = (u32)0x02000220;
++	mmdc_p1->mpdgctrl0 = (u32)0x02200220;
++	mmdc_p1->mpdgctrl1 = (u32)0x02040208;
++	mmdc_p0->mprddlctl = (u32)0x44444846;
++	mmdc_p1->mprddlctl = (u32)0x4042463C;
++	mmdc_p0->mpwrdlctl = (u32)0x32343032;
++	mmdc_p1->mpwrdlctl = (u32)0x36363430;
++	/* read data bit delay */
++	mmdc_p0->mprddqby0dl = (u32)0x33333333;
++	mmdc_p0->mprddqby1dl = (u32)0x33333333;
++	mmdc_p0->mprddqby2dl = (u32)0x33333333;
++	mmdc_p0->mprddqby3dl = (u32)0x33333333;
++	mmdc_p1->mprddqby0dl = (u32)0x33333333;
++	mmdc_p1->mprddqby1dl = (u32)0x33333333;
++	mmdc_p1->mprddqby2dl = (u32)0x33333333;
++	mmdc_p1->mprddqby3dl = (u32)0x33333333;
++	/* Complete calibration by forced measurment */
++	mmdc_p0->mpmur0 = (u32)0x00000800;
++	mmdc_p1->mpmur0 = (u32)0x00000800;
++	/* MMDC init:
++	 in DDR3, 64-bit mode, only MMDC0 is initiated: */
++	mmdc_p0->mdpdc = (u32)0x0002002d;
++	mmdc_p0->mdotc = (u32)0x00333040;
++
++	mmdc_p0->mdcfg0 = (u32)0x3F4352F3;
++	mmdc_p0->mdcfg1 = (u32)0xB66D8B63;
++
++	mmdc_p0->mdcfg2 = (u32)0x01ff00db;
++	mmdc_p0->mdmisc = (u32)0x00011740;
++	mmdc_p0->mdscr = (u32)0x00008000;
++	mmdc_p0->mdrwd = (u32)0x000026d2;
++	mmdc_p0->mdor = (u32)0x00431023;
++	mmdc_p0->mdasp = (u32)0x00000027;
++	mmdc_p0->mdctl = (u32)0x831A0000;
++
++	/* Initialize 2GB DDR3 - Micron MT41J128M */
++	/* MR2 */
++	mmdc_p0->mdscr = (u32)0x02008032;
++	mmdc_p0->mdscr = (u32)0x0200803a;
++	/* MR3 */
++	mmdc_p0->mdscr = (u32)0x00008033;
++	mmdc_p0->mdscr = (u32)0x0000803b;
++	/* MR1 */
++	mmdc_p0->mdscr = (u32)0x04008031;
++	mmdc_p0->mdscr = (u32)0x04008039;
++	/* MR0 */
++	mmdc_p0->mdscr = (u32)0x05208030;
++	mmdc_p0->mdscr = (u32)0x05208038;
++	/* ZQ calibration */
++	mmdc_p0->mdscr = (u32)0x04008040;
++	mmdc_p0->mdscr = (u32)0x04008040;
++	/* final DDR setup */
++	mmdc_p0->mdref = (u32)0x00007800;
++	mmdc_p0->mpodtctrl = (u32)0x00000007;
++	mmdc_p1->mpodtctrl = (u32)0x00000007;
++	mmdc_p0->mdpdc = (u32)0x0002556d;
++	mmdc_p1->mapsr = (u32)0x00011006;
++	mmdc_p0->mdscr = (u32)0x00000000;
++}
++
++/* microSOM with Dual processor 1GByte memory */
++static void spl_dram_init_mx6dq_1g(void)
++{
++	volatile struct mmdc_p_regs *mmdc_p0;
++	volatile struct mmdc_p_regs *mmdc_p1;
++	mmdc_p0 = (struct mmdc_p_regs *) MMDC_P0_BASE_ADDR;
++	mmdc_p1 = (struct mmdc_p_regs *) MMDC_P1_BASE_ADDR;
++
++	/* Calibrations */
++	/* ZQ */
++	mmdc_p0->mpzqhwctrl = (u32)0xa1390003;
++	/* write leveling */
++	mmdc_p0->mpwldectrl0 = (u32)0x00000000;
++	mmdc_p0->mpwldectrl1 = (u32)0x00000000;
++	mmdc_p1->mpwldectrl0 = (u32)0x00000000;
++	mmdc_p1->mpwldectrl1 = (u32)0x00000000;
++	/* DQS gating, read delay, write delay calibration values
++	 based on calibration compare of 0x00ffff00  */
++	mmdc_p0->mpdgctrl0 = (u32)0x0314031c;
++	mmdc_p0->mpdgctrl1 = (u32)0x023e0304;
++	mmdc_p1->mpdgctrl0 = (u32)0x03240330;
++	mmdc_p1->mpdgctrl1 = (u32)0x03180260;
++	
++	mmdc_p0->mprddlctl = (u32)0x3630323c;
++	mmdc_p1->mprddlctl = (u32)0x3436283a;
++
++	mmdc_p0->mpwrdlctl = (u32)0x36344038;
++	mmdc_p1->mpwrdlctl = (u32)0x422a423c;
++
++	mmdc_p0->mprddqby0dl = (u32)0x33333333;
++	mmdc_p0->mprddqby1dl = (u32)0x33333333;
++	mmdc_p0->mprddqby2dl = (u32)0x33333333;
++	mmdc_p0->mprddqby3dl = (u32)0x33333333;
++	mmdc_p1->mprddqby0dl = (u32)0x33333333;
++	mmdc_p1->mprddqby1dl = (u32)0x33333333;
++	mmdc_p1->mprddqby2dl = (u32)0x33333333;
++	mmdc_p1->mprddqby3dl = (u32)0x33333333;
++
++	mmdc_p0->mpmur0 = (u32)0x00000800;
++	mmdc_p1->mpmur0 = (u32)0x00000800;
++	/* MMDC init:
++	  in DDR3, 64-bit mode, only MMDC0 is initiated: */
++	mmdc_p0->mdpdc = (u32)0x00025576;
++	mmdc_p0->mdotc = (u32)0x09444040;
++	mmdc_p0->mdcfg0 = (u32)0x54597955;
++	mmdc_p0->mdcfg1 = (u32)0xFF328F64;
++	mmdc_p0->mdcfg2 = (u32)0x01ff00db;
++	mmdc_p0->mdmisc = (u32)0x00011740;
++
++	mmdc_p0->mdscr = (u32)0x00008000;
++	mmdc_p0->mdrwd = (u32)0x000026d2;
++	mmdc_p0->mdor = (u32)0x005B0E21;
++	
++	/* 1G */
++	mmdc_p0->mdasp = (u32)0x00000027;
++	mmdc_p0->mdctl = (u32)0x831a0000;
++
++	mmdc_p0->mdscr = (u32)0x02088032;
++	mmdc_p0->mdscr = (u32)0x00008033;
++	mmdc_p0->mdscr = (u32)0x00408031;
++	mmdc_p0->mdscr = (u32)0x09408030;
++	mmdc_p0->mdscr = (u32)0x04008040;
++
++	mmdc_p0->mdref = (u32)0x00005800;
++	
++	mmdc_p0->mpodtctrl = (u32)0x00000007;
++	mmdc_p1->mpodtctrl = (u32)0x00000007;
++
++	mmdc_p0->mdpdc = (u32)0x00025576;
++	mmdc_p0->mapsr = (u32)0x00011006;
++	mmdc_p0->mdscr = (u32)0x00000000;
++}
++
++/* microSOM with Quad processor 2GByte memory */
++static void spl_dram_init_mx6dq_2g(void)
++{
++	volatile struct mmdc_p_regs *mmdc_p0;
++	volatile struct mmdc_p_regs *mmdc_p1;
++	mmdc_p0 = (struct mmdc_p_regs *) MMDC_P0_BASE_ADDR;
++	mmdc_p1 = (struct mmdc_p_regs *) MMDC_P1_BASE_ADDR;
++
++	/* Calibrations */
++	/* ZQ */
++	mmdc_p0->mpzqhwctrl = (u32)0xa1390003;
++	/* write leveling */
++	mmdc_p0->mpwldectrl0 = (u32)0x00000000;
++	mmdc_p0->mpwldectrl1 = (u32)0x00000000;
++	mmdc_p1->mpwldectrl0 = (u32)0x00000000;
++	mmdc_p1->mpwldectrl1 = (u32)0x00000000;
++	/* DQS gating, read delay, write delay calibration values
++	 based on calibration compare of 0x00ffff00  */
++	mmdc_p0->mpdgctrl0 = (u32)0x0314031c;
++	mmdc_p0->mpdgctrl1 = (u32)0x023e0304;
++	mmdc_p1->mpdgctrl0 = (u32)0x03240330;
++	mmdc_p1->mpdgctrl1 = (u32)0x03180260;
++	
++	mmdc_p0->mprddlctl = (u32)0x3630323c;
++	mmdc_p1->mprddlctl = (u32)0x3436283a;
++
++	mmdc_p0->mpwrdlctl = (u32)0x36344038;
++	mmdc_p1->mpwrdlctl = (u32)0x422a423c;
++
++	mmdc_p0->mprddqby0dl = (u32)0x33333333;
++	mmdc_p0->mprddqby1dl = (u32)0x33333333;
++	mmdc_p0->mprddqby2dl = (u32)0x33333333;
++	mmdc_p0->mprddqby3dl = (u32)0x33333333;
++	mmdc_p1->mprddqby0dl = (u32)0x33333333;
++	mmdc_p1->mprddqby1dl = (u32)0x33333333;
++	mmdc_p1->mprddqby2dl = (u32)0x33333333;
++	mmdc_p1->mprddqby3dl = (u32)0x33333333;
++
++	mmdc_p0->mpmur0 = (u32)0x00000800;
++	mmdc_p1->mpmur0 = (u32)0x00000800;
++	/* MMDC init:
++	  in DDR3, 64-bit mode, only MMDC0 is initiated: */
++	mmdc_p0->mdpdc = (u32)0x00025576;
++	mmdc_p0->mdotc = (u32)0x09444040;
++	mmdc_p0->mdcfg0 = (u32)0x898E7975;
++	mmdc_p0->mdcfg1 = (u32)0xFF328F64;
++	mmdc_p0->mdcfg2 = (u32)0x01ff00db;
++	mmdc_p0->mdmisc = (u32)0x00011740;
++
++	mmdc_p0->mdscr = (u32)0x00008000;
++	mmdc_p0->mdrwd = (u32)0x000026d2;
++	mmdc_p0->mdor = (u32)0x005B0E21;
++	
++	/* 2G */ 
++	mmdc_p0->mdasp = (u32)0x00000047;
++	mmdc_p0->mdctl = (u32)0x841a0000;
++	
++	mmdc_p0->mdscr = (u32)0x02088032;
++	mmdc_p0->mdscr = (u32)0x00008033;
++	mmdc_p0->mdscr = (u32)0x00408031;
++	mmdc_p0->mdscr = (u32)0x09408030;
++	mmdc_p0->mdscr = (u32)0x04008040;
++
++	mmdc_p0->mdref = (u32)0x00005800;
++	
++	mmdc_p0->mpodtctrl = (u32)0x00000007;
++	mmdc_p1->mpodtctrl = (u32)0x00000007;
++
++	mmdc_p0->mdpdc = (u32)0x00025576;
++	mmdc_p0->mapsr = (u32)0x00011006;
++	mmdc_p0->mdscr = (u32)0x00000000;
++}
++
++static u32 spl_dram_init(u32 imxtype)
++{	
++	u32 ddr_size;
++	switch (imxtype){
++	case MXC_CPU_MX6SOLO:
++		spl_mx6dl_dram_setup_iomux();
++		spl_dram_init_mx6solo_512mb();
++		ddr_size = 0x20000000;
++		break;
++	case MXC_CPU_MX6Q:
++	{
++		/* Read first the snoop control unit config register */
++		u32 scu_config = *(u32 *)(SCU_BASE_ADDR + 0x4);
++		spl_mx6q_dram_setup_iomux();
++		if ((scu_config & 0x3) == 0x3) { /* Quad core */
++			spl_dram_init_mx6dq_2g();
++			ddr_size = 0x80000000;
++		} else { /* Dual core */
++			spl_dram_init_mx6dq_1g();
++			ddr_size = 0x40000000;
++		}
++		break;
++	}
++	case MXC_CPU_MX6DL:
++	default:
++		spl_mx6dl_dram_setup_iomux();
++		spl_dram_init_mx6dl_1g();
++		ddr_size = 0x40000000;
++		break;	
++	}
++	return ddr_size;
++}
++
++static u32 spl_get_imx_type(void)
++{
++	u32 cpurev;
++	
++	cpurev = get_cpu_rev();
++	return (cpurev & 0xFF000) >> 12;
++}
++
++static void prefetch_enable(void)
++{
++#ifdef CONFIG_SYS_PL310_BASE
++	u32 reg;
++
++	writel(0x30000003, CONFIG_SYS_PL310_BASE + 0xf60);
++	
++	reg = readl(CONFIG_SYS_PL310_BASE + 0x104);
++	reg |= (1 << 30);
++	writel(reg, CONFIG_SYS_PL310_BASE + 0x104);
++#endif
++}
++
++void board_init_f(ulong dummy)
++{	
++	u32 imx_type, ram_size;
++	/* Set the stack pointer. */
++	asm volatile("mov sp, %0\n" : : "r"(CONFIG_SPL_STACK));
++
++	imx_type = spl_get_imx_type();	
++	ram_size = spl_dram_init(imx_type);	
++	
++	arch_cpu_init();
++
++	/* Clear the BSS. */
++	memset(__bss_start, 0, __bss_end - __bss_start);
++
++	/* Set global data pointer. */
++	gd = &gdata;
++	gd->ram_size = ram_size;
++
++	board_early_init_f();	
++
++	timer_init();
++	preloader_console_init();
++	prefetch_enable();
++
++	board_init_r(NULL, 0);
++}
++
++void spl_board_init(void)
++{
++	setup_boot_device();
++}
++
++#ifdef CONFIG_SPL_OS_BOOT
++
++#define MX6_REC_BOOT	(0 << 8)
++#define MX6_FAST_BOOT	(1 << 8)
++#define MX6_DEV_BOOT	(2 << 8)
++#define SNVS_LPGPR	0x68
++
++int spl_start_uboot(void)
++{
++	u32 reg = readl(SNVS_BASE_ADDR + SNVS_LPGPR);
++
++	if (!!(reg & MX6_FAST_BOOT)) {
++		spl_image.args = build_dts_name();
++		writel(MX6_REC_BOOT, SNVS_BASE_ADDR + SNVS_LPGPR);
++		return 0;
++	} else {
++		return 1;
++	}
++}
++
++/*
++ * Get cells len in bytes
++ *     if #NNNN-cells property is 2 then len is 8
++ *     otherwise len is 4
++ */
++static int get_cells_len(void *blob, char *nr_cells_name)
++{
++        const fdt32_t *cell;
++
++        cell = fdt_getprop(blob, 0, nr_cells_name, NULL);
++        if (cell && fdt32_to_cpu(*cell) == 2)
++                return 8;
++
++        return 4;
++}
++
++/*
++ * Write a 4 or 8 byte big endian cell
++ */
++static void write_cell(u8 *addr, u32 val, int size)
++{
++        int shift = (size - 1) * 8;
++        while (size-- > 0) {
++                *addr++ = (val >> shift) & 0xff;
++                shift -= 8;
++        }
++}
++
++static int spl_fdt_fixup_memory_node(void *blob, u32 start, u32 size)
++{
++        int err, nodeoffset;
++        int addr_cell_len, size_cell_len, len;
++        u8 tmp[8]; /* Up to 32-bit address + 32-bit size */
++        int bank;
++
++	printf("setup memory node at 0x%x, size: 0x%x\n", start, size);
++        err = fdt_check_header(blob);
++        if (err < 0) {
++                printf("%s: %s\n", __FUNCTION__, fdt_strerror(err));
++                return err;
++        }
++
++        /* update, or add and update /memory node */
++        nodeoffset = fdt_path_offset(blob, "/memory");
++        if (nodeoffset < 0) {
++                nodeoffset = fdt_add_subnode(blob, 0, "memory");
++                if (nodeoffset < 0)
++                        printf("WARNING: could not create /memory: %s.\n",
++                                        fdt_strerror(nodeoffset));
++                return nodeoffset;
++        }
++        err = fdt_setprop(blob, nodeoffset, "device_type", "memory",
++                        sizeof("memory"));
++        if (err < 0) {
++                printf("WARNING: could not set %s %s.\n", "device_type",
++                                fdt_strerror(err));
++                return err;
++        }
++
++        addr_cell_len = get_cells_len(blob, "#address-cells");
++        size_cell_len = get_cells_len(blob, "#size-cells");
++
++	write_cell(tmp + len, start, addr_cell_len);
++	len += addr_cell_len;
++
++	write_cell(tmp + len, size, size_cell_len);
++	len += size_cell_len;
++
++        err = fdt_setprop(blob, nodeoffset, "reg", tmp, len);
++        if (err < 0) {
++                printf("WARNING: could not set %s %s.\n",
++                                "reg", fdt_strerror(err));
++                return err;
++        }
++        return 0;
++}
++
++void spl_board_prepare_for_linux(void)
++{
++	int err;
++	if (spl_image.have_fdt) {
++		err = spl_fdt_fixup_memory_node((void*)spl_image.args_addr,
++						CONFIG_SYS_SDRAM_BASE, gd->ram_size);
++		if (err < 0)
++			printf("Failed to fixup memory node\n");
++	}
++
++	writel(MX6_REC_BOOT, SNVS_BASE_ADDR + SNVS_LPGPR);
++}
++
++#endif
++
++u32 spl_boot_device(void)
++{
++	puts("Boot Device: ");
++	switch (get_boot_device()) {
++	case MX6_SD0_BOOT:
++		printf("SD0\n");
++		return BOOT_DEVICE_MMC1;
++	case MX6_SD1_BOOT:
++		printf("SD1\n");
++		return BOOT_DEVICE_MMC2;
++	case MX6_MMC_BOOT:
++		printf("MMC\n");
++		return BOOT_DEVICE_MMC2;
++	case MX6_NAND_BOOT:
++		printf("NAND\n");
++		return BOOT_DEVICE_NAND;
++	case MX6_SATA_BOOT:
++		printf("SATA\n");
++		return BOOT_DEVICE_SATA;
++	case MX6_UNKNOWN_BOOT:
++	default:
++		printf("UNKNOWN..\n");
++		return BOOT_DEVICE_MMC1;
++	}
++}
++
++u32 spl_boot_mode(void)
++{
++	switch (spl_boot_device()) {
++	case BOOT_DEVICE_MMC1:
++	case BOOT_DEVICE_MMC2:
++	case BOOT_DEVICE_MMC2_2:
++		return MMCSD_MODE;
++		break;
++	case BOOT_DEVICE_SATA:
++		return SATA_MODE;
++		break;
++	//case BOOT_DEVICE_NAND:
++	//	return 0;
++	//	break;
++	default:
++		puts("spl: ERROR:  unsupported device\n");
++		hang();
++	}
++}
++
++void reset_cpu(ulong addr)
++{
++	__REG16(WDOG1_BASE_ADDR) = 4;
++}
++#endif
++
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/1066mhz_4x128mx16.cfg u-boot-imx6/board/solidrun/mx6-microsom/1066mhz_4x128mx16.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/1066mhz_4x128mx16.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/1066mhz_4x128mx16.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,103 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ */
++/*
++ * Calibrations
++ * ZQ 
++ */
++
++DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xa1390003 /* 0xa1380003 */
++DATA 4, MX6_MMDC_P1_MPZQHWCTRL, 0xa1390003 /* 0xa1380003 */
++/* write leveling */
++DATA 4, MX6_MMDC_P0_MPWLDECTRL0, 0x00000000
++DATA 4, MX6_MMDC_P0_MPWLDECTRL1, 0x00000000
++DATA 4, MX6_MMDC_P1_MPWLDECTRL0, 0x00000000
++DATA 4, MX6_MMDC_P1_MPWLDECTRL1, 0x00000000
++/*
++ * DQS gating, read delay, write delay calibration values
++ * based on calibration compare of 0x00ffff00
++ */
++DATA 4, MX6_MMDC_P0_MPDGCTRL0, 0x0314031c
++DATA 4, MX6_MMDC_P0_MPDGCTRL1, 0x023e0304
++DATA 4, MX6_MMDC_P1_MPDGCTRL0, 0x03240330
++DATA 4, MX6_MMDC_P1_MPDGCTRL1, 0x03180260
++DATA 4, MX6_MMDC_P0_MPRDDLCTL, 0x3630323c
++DATA 4, MX6_MMDC_P1_MPRDDLCTL, 0x3436283a
++DATA 4, MX6_MMDC_P0_MPWRDLCTL, 0x36344038
++DATA 4, MX6_MMDC_P1_MPWRDLCTL, 0x422a423c
++/* read data bit delay */
++DATA 4, MX6_MMDC_P0_MPRDDQBY0DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY1DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY2DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY3DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY0DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY1DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY2DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY3DL, 0x33333333
++/* Complete calibration by forced measurement */
++DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800
++DATA 4, MX6_MMDC_P1_MPMUR0, 0x00000800
++
++/*
++ * MMDC init:
++ * in DDR3, 32-bit mode, only MMDC0 is initiated:
++ */
++DATA 4, MX6_MMDC_P0_MDPDC, 0x00025576
++DATA 4, MX6_MMDC_P0_MDOTC, 0x09444040
++
++DATA 4, MX6_MMDC_P0_MDCFG0, 0x54597955
++DATA 4, MX6_MMDC_P0_MDCFG1, 0xFF328F64
++DATA 4, MX6_MMDC_P0_MDCFG2, 0x01FF00DB
++
++DATA 4, MX6_MMDC_P0_MDMISC, 0x00011740
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000
++DATA 4, MX6_MMDC_P0_MDRWD, 0x000026d2
++DATA 4, MX6_MMDC_P0_MDOR, 0x005B0E21
++DATA 4, MX6_MMDC_P0_MDASP, 0x00000027
++
++/* MMDC0_MAARCR ADOPT optimized priorities. Dyn jump disabled */
++DATA 4, 0x021b0400, 0x11420000
++
++DATA 4, MX6_MMDC_P0_MDCTL, 0x831A0000
++
++/*
++ * Initialize 2GB DDR3 - Samsung K4B2G1646E-BCK0
++ */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x02088032
++DATA 4, MX6_MMDC_P0_MDSCR, 0x0208803A
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033
++DATA 4, MX6_MMDC_P0_MDSCR, 0x0000803B
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00408031
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00408039
++DATA 4, MX6_MMDC_P0_MDSCR, 0x09408030
++DATA 4, MX6_MMDC_P0_MDSCR, 0x09408038
++DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040
++DATA 4, MX6_MMDC_P0_MDSCR, 0x04008048
++
++/* final DDR setup */
++DATA 4, MX6_MMDC_P0_MDREF, 0x00005800
++DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00000007
++DATA 4, MX6_MMDC_P1_MPODTCTRL, 0x00000007
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000
++DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/1066mhz_4x256mx16.cfg u-boot-imx6/board/solidrun/mx6-microsom/1066mhz_4x256mx16.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/1066mhz_4x256mx16.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/1066mhz_4x256mx16.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,103 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ */
++/*
++ * Calibrations
++ * ZQ 
++ */
++
++DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xa1390003 /* 0xa1380003 */
++DATA 4, MX6_MMDC_P1_MPZQHWCTRL, 0xa1390003 /* 0xa1380003 */
++/* write leveling */
++DATA 4, MX6_MMDC_P0_MPWLDECTRL0, 0x00000000
++DATA 4, MX6_MMDC_P0_MPWLDECTRL1, 0x00000000
++DATA 4, MX6_MMDC_P1_MPWLDECTRL0, 0x00000000
++DATA 4, MX6_MMDC_P1_MPWLDECTRL1, 0x00000000
++/*
++ * DQS gating, read delay, write delay calibration values
++ * based on calibration compare of 0x00ffff00
++ */
++DATA 4, MX6_MMDC_P0_MPDGCTRL0, 0x0314031c
++DATA 4, MX6_MMDC_P0_MPDGCTRL1, 0x023e0304
++DATA 4, MX6_MMDC_P1_MPDGCTRL0, 0x03240330
++DATA 4, MX6_MMDC_P1_MPDGCTRL1, 0x03180260
++DATA 4, MX6_MMDC_P0_MPRDDLCTL, 0x3630323c
++DATA 4, MX6_MMDC_P1_MPRDDLCTL, 0x3436283a
++DATA 4, MX6_MMDC_P0_MPWRDLCTL, 0x36344038
++DATA 4, MX6_MMDC_P1_MPWRDLCTL, 0x422a423c
++/* read data bit delay */
++DATA 4, MX6_MMDC_P0_MPRDDQBY0DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY1DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY2DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY3DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY0DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY1DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY2DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY3DL, 0x33333333
++/* Complete calibration by forced measurement */
++DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800
++DATA 4, MX6_MMDC_P1_MPMUR0, 0x00000800
++
++/*
++ * MMDC init:
++ * in DDR3, 32-bit mode, only MMDC0 is initiated:
++ */
++DATA 4, MX6_MMDC_P0_MDPDC, 0x00025576
++DATA 4, MX6_MMDC_P0_MDOTC, 0x09444040
++
++DATA 4, MX6_MMDC_P0_MDCFG0, 0x898E7975
++DATA 4, MX6_MMDC_P0_MDCFG1, 0xFF328F64
++DATA 4, MX6_MMDC_P0_MDCFG2, 0x01FF00DB
++
++DATA 4, MX6_MMDC_P0_MDMISC, 0x00011740
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000
++DATA 4, MX6_MMDC_P0_MDRWD, 0x000026d2
++DATA 4, MX6_MMDC_P0_MDOR, 0x005B0E21
++DATA 4, MX6_MMDC_P0_MDASP, 0x00000047
++
++/* MMDC0_MAARCR ADOPT optimized priorities. Dyn jump disabled */
++DATA 4, 0x021b0400, 0x11420000
++
++DATA 4, MX6_MMDC_P0_MDCTL, 0x841A0000
++
++/*
++ * Initialize 2GB DDR3 - Samsung K4B4G1646B-HYK0
++ */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x02088032
++DATA 4, MX6_MMDC_P0_MDSCR, 0x0208803A
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033
++DATA 4, MX6_MMDC_P0_MDSCR, 0x0000803B
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00408031
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00408039
++DATA 4, MX6_MMDC_P0_MDSCR, 0x09408030
++DATA 4, MX6_MMDC_P0_MDSCR, 0x09408038
++DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040
++DATA 4, MX6_MMDC_P0_MDSCR, 0x04008048
++
++/* final DDR setup */
++DATA 4, MX6_MMDC_P0_MDREF, 0x00005800
++DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00000007
++DATA 4, MX6_MMDC_P1_MPODTCTRL, 0x00000007
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000
++DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/800mhz_2x128mx16.cfg u-boot-imx6/board/solidrun/mx6-microsom/800mhz_2x128mx16.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/800mhz_2x128mx16.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/800mhz_2x128mx16.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,93 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ */
++/*
++ * Calibrations
++ * ZQ 
++ */
++DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xa1390003
++DATA 4, MX6_MMDC_P1_MPZQHWCTRL, 0xa1390003
++/* write leveling */
++DATA 4, MX6_MMDC_P0_MPWLDECTRL0, 0x005a0057
++DATA 4, MX6_MMDC_P0_MPWLDECTRL1, 0x004a0052
++/*
++ * DQS gating, read delay, write delay calibration values
++ * based on calibration compare of 0x00ffff00
++ */
++DATA 4, MX6_MMDC_P0_MPDGCTRL0, 0x02480240
++DATA 4, MX6_MMDC_P0_MPDGCTRL1, 0x02340230
++DATA 4, MX6_MMDC_P0_MPRDDLCTL, 0x40404440
++DATA 4, MX6_MMDC_P0_MPWRDLCTL, 0x38343034
++/* read data bit delay */
++DATA 4, MX6_MMDC_P0_MPRDDQBY0DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY1DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY2DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY3DL, 0x33333333
++/* Complete calibration by forced measurement */
++DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800
++DATA 4, MX6_MMDC_P1_MPMUR0, 0x00000800
++
++/*
++ * MMDC init:
++ * in DDR3, 32-bit mode, only MMDC0 is initiated:
++ */
++DATA 4, MX6_MMDC_P0_MDPDC, 0x0002002d
++DATA 4, MX6_MMDC_P0_MDOTC, 0x00333040
++
++DATA 4, MX6_MMDC_P0_MDCFG0, 0x3f435313
++DATA 4, MX6_MMDC_P0_MDCFG1, 0xb66e8b63
++
++DATA 4, MX6_MMDC_P0_MDCFG2, 0x01ff00db
++DATA 4, MX6_MMDC_P0_MDMISC, 0x00011740
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000
++DATA 4, MX6_MMDC_P0_MDRWD, 0x000026d2
++DATA 4, MX6_MMDC_P0_MDOR, 0x00431023
++/* CS0_END - 0x2fffffff, 512M  */
++DATA 4, MX6_MMDC_P0_MDASP, 0x00000017
++
++/* MMDC0_MAARCR ADOPT optimized priorities. Dyn jump disabled */
++DATA 4, 0x021b0400, 0x11420000
++
++/* MMDC0_MDCTL- row-14bits; col-10bits; burst length 8;32-bit data bus */
++DATA 4, MX6_MMDC_P0_MDCTL, 0x83190000
++
++/*
++ * Initialize 2GB DDR3 - Hynix H5TQ2G63BFR-H9C
++ * MR2
++ */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008032
++/* MR3 */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033
++/* MR1 */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008031
++/* MR0 */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x05208030
++/* ZQ calibration */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040
++/* final DDR setup */
++DATA 4, MX6_MMDC_P0_MDREF, 0x00007800
++DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00000007
++DATA 4, MX6_MMDC_P0_MDPDC, 0x0002556d
++DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/800mhz_4x128mx16.cfg u-boot-imx6/board/solidrun/mx6-microsom/800mhz_4x128mx16.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/800mhz_4x128mx16.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/800mhz_4x128mx16.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,99 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ */
++/*
++ * Calibrations
++ * ZQ 
++ */
++DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xa1390003
++/* write leveling */
++DATA 4, MX6_MMDC_P0_MPWLDECTRL0, 0x0045004D
++DATA 4, MX6_MMDC_P0_MPWLDECTRL1, 0x003A0047
++DATA 4, MX6_MMDC_P1_MPWLDECTRL0, 0x001F001F
++DATA 4, MX6_MMDC_P1_MPWLDECTRL1, 0x00210035
++
++/*
++ * DQS gating, read delay, write delay calibration values
++ * based on calibration compare of 0x00ffff00
++ */
++DATA 4, MX6_MMDC_P0_MPDGCTRL0, 0x023C0224
++DATA 4, MX6_MMDC_P0_MPDGCTRL1, 0x02000220
++DATA 4, MX6_MMDC_P1_MPDGCTRL0, 0x02200220
++DATA 4, MX6_MMDC_P1_MPDGCTRL1, 0x02040208
++
++DATA 4, MX6_MMDC_P0_MPRDDLCTL, 0x44444846
++DATA 4, MX6_MMDC_P1_MPRDDLCTL, 0x4042463C
++
++DATA 4, MX6_MMDC_P0_MPWRDLCTL, 0x32343032
++DATA 4, MX6_MMDC_P1_MPWRDLCTL, 0x36363430
++
++/* read data bit delay */
++DATA 4, MX6_MMDC_P0_MPRDDQBY0DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY1DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY2DL, 0x33333333
++DATA 4, MX6_MMDC_P0_MPRDDQBY3DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY0DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY1DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY2DL, 0x33333333
++DATA 4, MX6_MMDC_P1_MPRDDQBY3DL, 0x33333333
++
++/* Complete calibration by forced measurement */
++DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800
++DATA 4, MX6_MMDC_P1_MPMUR0, 0x00000800
++
++/*
++ * MMDC init:
++ * in DDR3, 64-bit mode, only MMDC0 is initiated:
++ */
++DATA 4, MX6_MMDC_P0_MDPDC, 0x0002002d
++DATA 4, MX6_MMDC_P0_MDOTC, 0x00333040
++DATA 4, MX6_MMDC_P0_MDCFG0, 0x3F4352F3
++DATA 4, MX6_MMDC_P0_MDCFG1, 0xB66D8B63
++DATA 4, MX6_MMDC_P0_MDCFG2, 0x01FF00DB
++DATA 4, MX6_MMDC_P0_MDMISC, 0x00011740
++
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000
++DATA 4, MX6_MMDC_P0_MDRWD, 0x000026d2
++DATA 4, MX6_MMDC_P0_MDOR, 0x00431023
++DATA 4, MX6_MMDC_P0_MDASP, 0x00000027
++
++/* MMDC0_MDCTL- row-14bits */
++DATA 4, MX6_MMDC_P0_MDCTL, 0x831A0000
++
++/*
++ * Initialize 2GB DDR3 - Micron MT41J128M
++ */
++DATA 4, MX6_MMDC_P0_MDSCR, 0x02008032
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033
++DATA 4, MX6_MMDC_P0_MDSCR, 0x04008031
++DATA 4, MX6_MMDC_P0_MDSCR, 0x05208030
++DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040
++
++/* final DDR setup */
++DATA 4, MX6_MMDC_P0_MDREF, 0x00007800
++DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00000007
++DATA 4, MX6_MMDC_P1_MPODTCTRL, 0x00000007
++DATA 4, MX6_MMDC_P0_MDPDC, 0x0002556d
++DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006
++DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/clocks.cfg u-boot-imx6/board/solidrun/mx6-microsom/clocks.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/clocks.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/clocks.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,59 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Device Configuration Data (DCD)
++ *
++ * Each entry must have the format:
++ * Addr-type           Address        Value
++ *
++ * where:
++ *      Addr-type register length (1,2 or 4 bytes)
++ *      Address   absolute address of the register
++ *      value     value to be stored in the register
++ */
++
++/* set the default clock gate to save power */
++DATA 4, CCM_CCGR0, 0x00C03F3F
++DATA 4, CCM_CCGR1, 0x0030FC03
++DATA 4, CCM_CCGR2, 0x0FFFC000
++DATA 4, CCM_CCGR3, 0x3FF00000
++DATA 4, CCM_CCGR4, 0x00FFF300
++DATA 4, CCM_CCGR5, 0x0F0000C3
++DATA 4, CCM_CCGR6, 0x000003FF
++
++/* enable AXI cache for VDOA/VPU/IPU */
++DATA 4, MX6_IOMUXC_GPR4, 0xF00000CF
++/* set IPU AXI-id0 Qos=0xf(bypass) AXI-id1 Qos=0x7 */
++DATA 4, MX6_IOMUXC_GPR6, 0x007F007F
++DATA 4, MX6_IOMUXC_GPR7, 0x007F007F
++
++/*
++ * Setup CCM_CCOSR register as follows:
++ *
++ * cko1_en  = 1    --> CKO1 enabled
++ * cko1_div = 111  --> divide by 8
++ * cko1_sel = 1011 --> ahb_clk_root
++ *
++ * This sets CKO1 at ahb_clk_root/8 = 132/8 = 16.5 MHz
++ */
++DATA 4, CCM_CCOSR, 0x000000fb
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/ddr-1066mhz-64bit-setup.cfg u-boot-imx6/board/solidrun/mx6-microsom/ddr-1066mhz-64bit-setup.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/ddr-1066mhz-64bit-setup.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/ddr-1066mhz-64bit-setup.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,101 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Device Configuration Data (DCD)
++ *
++ * Each entry must have the format:
++ * Addr-type           Address        Value
++ *
++ * where:
++ *      Addr-type register length (1,2 or 4 bytes)
++ *      Address   absolute address of the register
++ *      value     value to be stored in the register
++ */
++
++/*
++ * DDR3 settings
++ * MX6Q    ddr is limited to 1066 Mhz	currently 1056 MHz(528 MHz clock),
++ *	   memory bus width: 64 bits	x16/x32/x64
++ * MX6DL   ddr is limited to 800 MHz(400 MHz clock)
++ *	   memory bus width: 64 bits	x16/x32/x64
++ * MX6SOLO ddr is limited to 800 MHz(400 MHz clock)
++ *	   memory bus width: 32 bits	x16/x32
++ */
++/* DDR IO TYPE */
++DATA 4, MX6_IOM_GRP_DDR_TYPE, 0x000C0000
++DATA 4, MX6_IOM_GRP_DDRPKE, 0x00000000
++/* Clock */
++DATA 4, MX6_IOM_DRAM_SDCLK_0, 0x00020030
++DATA 4, MX6_IOM_DRAM_SDCLK_1, 0x00020030
++/* Address */
++DATA 4, MX6_IOM_DRAM_CAS, 0x00020030
++DATA 4, MX6_IOM_DRAM_RAS, 0x00020030
++DATA 4, MX6_IOM_GRP_ADDDS, 0x00000030
++/* Control */
++DATA 4, MX6_IOM_DRAM_RESET, 0x00020030
++DATA 4, MX6_IOM_DRAM_SDCKE0, 0x00003000
++DATA 4, MX6_IOM_DRAM_SDCKE1, 0x00003000
++DATA 4, MX6_IOM_DRAM_SDBA2, 0x00000000
++DATA 4, MX6_IOM_DRAM_SDODT0, 0x00003030
++DATA 4, MX6_IOM_DRAM_SDODT1, 0x00003030
++
++/*
++ * Data Strobe: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL - DDR_INPUT=0, CMOS,
++ * CMOS mode saves power, but have less timing margin in case of DDR
++ * timing issue on your board you can try DDR_MODE:  [= 0x00020000]
++ */
++DATA 4, MX6_IOM_DDRMODE_CTL, 0x00020000
++
++DATA 4, MX6_IOM_DRAM_SDQS0, 0x00000030
++DATA 4, MX6_IOM_DRAM_SDQS1, 0x00000030
++DATA 4, MX6_IOM_DRAM_SDQS2, 0x00000030
++DATA 4, MX6_IOM_DRAM_SDQS3, 0x00000030
++DATA 4, MX6_IOM_DRAM_SDQS4, 0x00000030
++DATA 4, MX6_IOM_DRAM_SDQS5, 0x00000030
++DATA 4, MX6_IOM_DRAM_SDQS6, 0x00000030
++DATA 4, MX6_IOM_DRAM_SDQS7, 0x00000030
++
++/*
++ * DATA:IOMUXC_SW_PAD_CTL_GRP_DDRMODE - DDR_INPUT=0, CMOS,
++ * CMOS mode saves power, but have less timing margin in case of DDR
++ * timing issue on your board you can try DDR_MODE:  [= 0x00020000]
++ */
++DATA 4, MX6_IOM_GRP_DDRMODE, 0x00020000
++
++DATA 4, MX6_IOM_GRP_B0DS, 0x00000030
++DATA 4, MX6_IOM_GRP_B1DS, 0x00000030
++DATA 4, MX6_IOM_GRP_B2DS, 0x00000030
++DATA 4, MX6_IOM_GRP_B3DS, 0x00000030
++DATA 4, MX6_IOM_GRP_B4DS, 0x00000030
++DATA 4, MX6_IOM_GRP_B5DS, 0x00000030
++DATA 4, MX6_IOM_GRP_B6DS, 0x00000030
++DATA 4, MX6_IOM_GRP_B7DS, 0x00000030
++
++DATA 4, MX6_IOM_DRAM_DQM0, 0x00020030
++DATA 4, MX6_IOM_DRAM_DQM1, 0x00020030
++DATA 4, MX6_IOM_DRAM_DQM2, 0x00020030
++DATA 4, MX6_IOM_DRAM_DQM3, 0x00020030
++DATA 4, MX6_IOM_DRAM_DQM4, 0x00020030
++DATA 4, MX6_IOM_DRAM_DQM5, 0x00020030
++DATA 4, MX6_IOM_DRAM_DQM6, 0x00020030
++DATA 4, MX6_IOM_DRAM_DQM7, 0x00020030
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/ddr-800mhz-32bit-setup.cfg u-boot-imx6/board/solidrun/mx6-microsom/ddr-800mhz-32bit-setup.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/ddr-800mhz-32bit-setup.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/ddr-800mhz-32bit-setup.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,102 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Device Configuration Data (DCD)
++ *
++ * Each entry must have the format:
++ * Addr-type           Address        Value
++ *
++ * where:
++ *      Addr-type register length (1,2 or 4 bytes)
++ *      Address   absolute address of the register
++ *      value     value to be stored in the register
++ */
++
++/*
++ * DDR3 settings
++ * MX6Q    ddr is limited to 1066 Mhz	currently 1056 MHz(528 MHz clock),
++ *	   memory bus width: 64 bits	x16/x32/x64
++ * MX6DL   ddr is limited to 800 MHz(400 MHz clock)
++ *	   memory bus width: 64 bits	x16/x32/x64
++ * MX6SOLO ddr is limited to 800 MHz(400 MHz clock)
++ *	   memory bus width: 32 bits	x16/x32
++ */
++/* DDR IO TYPE */
++DATA 4, MX6_IOM_GRP_DDR_TYPE, 0x000c0000
++DATA 4, MX6_IOM_GRP_DDRPKE, 0x00000000
++/* Clock */
++DATA 4, MX6_IOM_DRAM_SDCLK_0, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDCLK_1, 0x00000028
++/* Address */
++DATA 4, MX6_IOM_DRAM_CAS, 0x00000010
++DATA 4, MX6_IOM_DRAM_RAS, 0x00000010
++DATA 4, MX6_IOM_GRP_ADDDS, 0x00000010
++/* Control */
++DATA 4, MX6_IOM_DRAM_RESET, 0x00000010
++DATA 4, MX6_IOM_DRAM_SDCKE0, 0x00003000
++DATA 4, MX6_IOM_DRAM_SDCKE1, 0x00003000
++DATA 4, MX6_IOM_DRAM_SDBA2, 0x00000000
++DATA 4, MX6_IOM_DRAM_SDODT0, 0x00000010
++DATA 4, MX6_IOM_DRAM_SDODT1, 0x00000010
++DATA 4, MX6_IOM_GRP_CTLDS, 0x00000010
++
++/*
++ * Data Strobe: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL - DDR_INPUT=0, CMOS,
++ * CMOS mode saves power, but have less timing margin in case of DDR
++ * timing issue on your board you can try DDR_MODE:  [= 0x00020000]
++ */
++DATA 4, MX6_IOM_DDRMODE_CTL, 0x00020000
++
++DATA 4, MX6_IOM_DRAM_SDQS0, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS1, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS2, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS3, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS4, 0x00000000
++DATA 4, MX6_IOM_DRAM_SDQS5, 0x00000000
++DATA 4, MX6_IOM_DRAM_SDQS6, 0x00000000
++DATA 4, MX6_IOM_DRAM_SDQS7, 0x00000000
++
++/*
++ * DATA:IOMUXC_SW_PAD_CTL_GRP_DDRMODE - DDR_INPUT=0, CMOS,
++ * CMOS mode saves power, but have less timing margin in case of DDR
++ * timing issue on your board you can try DDR_MODE:  [= 0x00020000]
++ */
++DATA 4, MX6_IOM_GRP_DDRMODE, 0x00020000
++
++DATA 4, MX6_IOM_GRP_B0DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B1DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B2DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B3DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B4DS, 0x00000000
++DATA 4, MX6_IOM_GRP_B5DS, 0x00000000
++DATA 4, MX6_IOM_GRP_B6DS, 0x00000000
++DATA 4, MX6_IOM_GRP_B7DS, 0x00000000
++
++DATA 4, MX6_IOM_DRAM_DQM0, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM1, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM2, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM3, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM4, 0x00000000
++DATA 4, MX6_IOM_DRAM_DQM5, 0x00000000
++DATA 4, MX6_IOM_DRAM_DQM6, 0x00000000
++DATA 4, MX6_IOM_DRAM_DQM7, 0x00000000
+diff -uNr u-boot-2013.10-rc4/board/solidrun/mx6-microsom/ddr-800mhz-64bit-setup.cfg u-boot-imx6/board/solidrun/mx6-microsom/ddr-800mhz-64bit-setup.cfg
+--- u-boot-2013.10-rc4/board/solidrun/mx6-microsom/ddr-800mhz-64bit-setup.cfg	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/board/solidrun/mx6-microsom/ddr-800mhz-64bit-setup.cfg	2014-12-17 09:31:34.362036943 +0000
+@@ -0,0 +1,100 @@
++/*
++ * Copyright (C) 2013 Boundary Devices
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not write to the Free Software
++ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
++ * MA 02110-1301 USA
++ *
++ * Device Configuration Data (DCD)
++ *
++ * Each entry must have the format:
++ * Addr-type           Address        Value
++ *
++ * where:
++ *      Addr-type register length (1,2 or 4 bytes)
++ *      Address   absolute address of the register
++ *      value     value to be stored in the register
++ */
++
++/*
++ * DDR3 settings
++ * MX6Q    ddr is limited to 1066 Mhz	currently 1056 MHz(528 MHz clock),
++ *	   memory bus width: 64 bits	x16/x32/x64
++ * MX6DL   ddr is limited to 800 MHz(400 MHz clock)
++ *	   memory bus width: 64 bits	x16/x32/x64
++ * MX6SOLO ddr is limited to 800 MHz(400 MHz clock)
++ *	   memory bus width: 32 bits	x16/x32
++ */
++/* DDR IO TYPE */
++DATA 4, MX6_IOM_GRP_DDR_TYPE, 0x000c0000
++DATA 4, MX6_IOM_GRP_DDRPKE, 0x00000000
++/* Clock */
++DATA 4, MX6_IOM_DRAM_SDCLK_0, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDCLK_1, 0x00000028
++/* Address */
++DATA 4, MX6_IOM_DRAM_CAS, 0x00000028
++DATA 4, MX6_IOM_DRAM_RAS, 0x00000028
++DATA 4, MX6_IOM_GRP_ADDDS, 0x00000028
++/* Control */
++DATA 4, MX6_IOM_DRAM_RESET, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDBA2, 0x00000000
++DATA 4, MX6_IOM_DRAM_SDODT0, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDODT1, 0x00000028
++DATA 4, MX6_IOM_GRP_CTLDS, 0x00000028
++
++/*
++ * Data Strobe: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL - DDR_INPUT=0, CMOS,
++ * CMOS mode saves power, but have less timing margin in case of DDR
++ * timing issue on your board you can try DDR_MODE:  [= 0x00020000]
++ */
++DATA 4, MX6_IOM_DDRMODE_CTL, 0x00020000
++
++DATA 4, MX6_IOM_DRAM_SDQS0, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS1, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS2, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS3, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS4, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS5, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS6, 0x00000028
++DATA 4, MX6_IOM_DRAM_SDQS7, 0x00000028
++
++/*
++ * DATA:IOMUXC_SW_PAD_CTL_GRP_DDRMODE - DDR_INPUT=0, CMOS,
++ * CMOS mode saves power, but have less timing margin in case of DDR
++ * timing issue on your board you can try DDR_MODE:  [= 0x00020000]
++ */
++DATA 4, MX6_IOM_GRP_DDRMODE, 0x00020000
++
++DATA 4, MX6_IOM_GRP_B0DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B1DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B2DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B3DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B4DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B5DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B6DS, 0x00000028
++DATA 4, MX6_IOM_GRP_B7DS, 0x00000028
++
++DATA 4, MX6_IOM_DRAM_DQM0, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM1, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM2, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM3, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM4, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM5, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM6, 0x00000028
++DATA 4, MX6_IOM_DRAM_DQM7, 0x00000028
+diff -uNr u-boot-2013.10-rc4/boards.cfg u-boot-imx6/boards.cfg
+--- u-boot-2013.10-rc4/boards.cfg	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/boards.cfg	2014-12-17 09:31:34.390036260 +0000
+@@ -303,6 +303,15 @@
+ Active  arm         armv7          mx6         freescale       mx6sabresd          mx6qsabresd                          mx6sabresd:IMX_CONFIG=board/freescale/imx/ddr/mx6q_4x_mt41j128.cfg,MX6Q                                                           Fabio Estevam <fabio.estevam@freescale.com>
+ Active  arm         armv7          mx6         freescale       mx6slevk            mx6slevk                             mx6slevk:IMX_CONFIG=board/freescale/mx6slevk/imximage.cfg,MX6SL                                                                   Fabio Estevam <fabio.estevam@freescale.com>
+ Active  arm         armv7          mx6         freescale       titanium            titanium                             titanium:IMX_CONFIG=board/freescale/titanium/imximage.cfg                                                                         Stefan Roese <sr@denx.de>
++Active  arm         armv7          mx6         solidrun        mx6_c1              mx6_c1solo                           mx6_c1:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1solo.cfg,MX6S,DDR_MB=512
++Active  arm         armv7          mx6         solidrun        mx6_c1              mx6_c1dl                             mx6_c1:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1dl.cfg,MX6DL,DDR_MB=1024
++Active  arm         armv7          mx6         solidrun        mx6_c1              mx6_c1d                              mx6_c1:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1d.cfg,MX6Q,DDR_MB=1024
++Active  arm         armv7          mx6         solidrun        mx6_c1              mx6_c1q                              mx6_c1:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1q.cfg,MX6Q,DDR_MB=2048
++Active  arm         armv7          mx6         solidrun        mx6_cubox-i         mx6_cubox-i                         mx6_cubox-i:IMX_CONFIG=board/solidrun/mx6_cubox-i/imx6image.cfg,MX6QDL,SPL,FSL_ENV_IN_MMC 
++Active  arm         armv7          mx6         solidrun        mx6_cubox-i         mx6_cubox-i1                        mx6_cubox-i:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1solo.cfg,MX6S,DDR_MB=512
++Active  arm         armv7          mx6         solidrun        mx6_cubox-i         mx6_cubox-i2                        mx6_cubox-i:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1dl.cfg,MX6DL,DDR_MB=1024
++Active  arm         armv7          mx6         solidrun        mx6_cubox-i         mx6_cubox-i2ultra                   mx6_cubox-i:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1d.cfg,MX6Q,DDR_MB=1024
++Active  arm         armv7          mx6         solidrun        mx6_cubox-i         mx6_cubox-i4pro                     mx6_cubox-i:IMX_CONFIG=board/solidrun/mx6_c1/mx6_c1q.cfg,MX6Q,DDR_MB=2048
+ Active  arm         armv7          omap3       -               overo               omap3_overo                          -                                                                                                                                 Steve Sakoman <sakoman@gmail.com>
+ Active  arm         armv7          omap3       -               pandora             omap3_pandora                        -                                                                                                                                 Grazvydas Ignotas <notasas@gmail.com>
+ Active  arm         armv7          omap3       8dtech          eco5pk              eco5pk                               -                                                                                                                                 Raphael Assenat <raph@8d.com>
+diff -uNr u-boot-2013.10-rc4/build-all.sh u-boot-imx6/build-all.sh
+--- u-boot-2013.10-rc4/build-all.sh	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/build-all.sh	2014-12-17 09:31:34.390036260 +0000
+@@ -0,0 +1,32 @@
++#!/bin/bash
++
++# This script build u-boot.imx for all imx6 based SolidRun machines.
++# Usage -
++# ./build.all - this will build all models
++#   or
++# ./build.all cubox-i2ultra - this will build u-boot for CuBox-i2ultra only
++
++
++if [ "x$1" != "x" ]; then
++	VECTOR=$1
++else
++	VECTOR="c1solo c1dl c1d c1q cubox-i1 cubox-i2 cubox-i2ultra cubox-i4pro"
++fi
++
++for i in $VECTOR; do
++	echo "Building $i version"
++	make clean
++	echo "Running make mx6_${i}_config"
++	make "mx6_${i}_config"
++	if [ $? != 0 ]; then
++		echo "Error building $i version"
++		exit
++	fi
++	make -j8
++        if [ $? != 0 ]; then
++                echo "Error building $i version"
++                exit
++        fi
++        make -j8
++	cp u-boot.imx u-boot_mx6_$i.imx
++done
+diff -uNr u-boot-2013.10-rc4/common/cmd_nvedit.c u-boot-imx6/common/cmd_nvedit.c
+--- u-boot-2013.10-rc4/common/cmd_nvedit.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/common/cmd_nvedit.c	2014-12-17 09:31:34.402035966 +0000
+@@ -47,6 +47,8 @@
+ 	!defined(CONFIG_ENV_IS_IN_SPI_FLASH)	&& \
+ 	!defined(CONFIG_ENV_IS_IN_REMOTE)	&& \
+ 	!defined(CONFIG_ENV_IS_IN_UBI)		&& \
++	!defined(CONFIG_ENV_IS_IN_SATA)         && \
++	!defined(CONFIG_ENV_IS_IN_BOOT_DEVICE)  && \
+ 	!defined(CONFIG_ENV_IS_NOWHERE)
+ # error Define one of CONFIG_ENV_IS_IN_{EEPROM|FLASH|DATAFLASH|ONENAND|\
+ SPI_FLASH|NVRAM|MMC|FAT|REMOTE|UBI} or CONFIG_ENV_IS_NOWHERE
+diff -uNr u-boot-2013.10-rc4/common/cmd_sata.c u-boot-imx6/common/cmd_sata.c
+--- u-boot-2013.10-rc4/common/cmd_sata.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/common/cmd_sata.c	2014-12-17 09:31:34.406035868 +0000
+@@ -15,7 +15,7 @@
+ #include <part.h>
+ #include <sata.h>
+ 
+-static int sata_curr_device = -1;
++int sata_curr_device = -1;
+ block_dev_desc_t sata_dev_desc[CONFIG_SYS_SATA_MAX_DEVICE];
+ 
+ int __sata_initialize(void)
+diff -uNr u-boot-2013.10-rc4/common/env_sata.c u-boot-imx6/common/env_sata.c
+--- u-boot-2013.10-rc4/common/env_sata.c	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/common/env_sata.c	2014-12-17 09:31:34.410035770 +0000
+@@ -0,0 +1,170 @@
++/*
++ * (C) Copyright 2010-2011 Freescale Semiconductor, Inc.
++ *
++ * See file CREDITS for list of people who contributed to this
++ * project.
++ *
++ * This program is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU General Public License as
++ * published by the Free Software Foundation; either version 2 of
++ * the License, or (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not, write to the Free Software
++ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
++ * MA 02111-1307 USA
++ */
++
++/* #define DEBUG */
++
++#include <common.h>
++
++#include <command.h>
++#include <environment.h>
++#include <linux/stddef.h>
++#include <sata.h>
++#include <search.h>
++#include <errno.h>
++
++#if defined(CONFIG_ENV_SIZE_REDUND) &&  \
++	(CONFIG_ENV_SIZE_REDUND != CONFIG_ENV_SIZE)
++#error CONFIG_ENV_SIZE_REDUND should be the same as CONFIG_ENV_SIZE
++#endif
++
++char *env_name_spec = "SATA";
++
++#ifdef ENV_IS_EMBEDDED
++env_t *env_ptr = &environment;
++#else /* ! ENV_IS_EMBEDDED */
++env_t *env_ptr;
++#endif /* ENV_IS_EMBEDDED */
++
++extern int sata_curr_device;
++
++#if !defined(CONFIG_ENV_OFFSET)
++#define CONFIG_ENV_OFFSET 0
++#endif
++
++DECLARE_GLOBAL_DATA_PTR;
++
++int env_init(void)
++{
++	/* use default */
++	gd->env_addr = (ulong)&default_environment[0];
++	gd->env_valid = 1;
++
++	return 0;
++}
++
++
++inline int write_env(block_dev_desc_t *sata, unsigned long size,
++			unsigned long offset, const void *buffer)
++{
++	uint blk_start, blk_cnt, n;
++
++	blk_start = ALIGN(offset, sata->blksz) / sata->blksz;
++	blk_cnt   = ALIGN(size, sata->blksz) / sata->blksz;
++
++	n = sata->block_write(sata_curr_device, blk_start,
++					blk_cnt, (u_char *)buffer);
++
++	return (n == blk_cnt) ? 0 : -1;
++}
++
++int saveenv(void)
++{
++	ALLOC_CACHE_ALIGN_BUFFER(env_t, env_new, 1);
++	ssize_t	len;
++	char	*res;
++	struct block_dev_desc_t *sata = NULL;
++
++	if (sata_curr_device == -1) {
++		if (sata_initialize())
++			return 1;
++		sata_curr_device = CONFIG_SATA_ENV_DEV;
++	}
++
++	if (sata_curr_device >= CONFIG_SYS_SATA_MAX_DEVICE) {
++		printf("Unknown SATA(%d) device for environment!\n",
++			sata_curr_device);
++		return 1;
++	}
++	res = (char *)&env_new->data;
++	len = hexport_r(&env_htab, '\0', 0, &res, ENV_SIZE, 0, NULL);
++	if (len < 0) {
++		error("Cannot export environment: errno = %d\n", errno);
++		return 1;
++	}
++
++	env_new->crc = crc32(0, &env_new->data[0], ENV_SIZE);	
++
++	sata = sata_get_dev(sata_curr_device);
++
++	printf("Writing to SATA(%d)... ", sata_curr_device);
++	if (write_env(sata, CONFIG_ENV_SIZE, CONFIG_ENV_OFFSET, (u_char *)env_new)) {
++		puts("failed\n");
++		return 1;
++	}
++
++	puts("done\n");
++
++	return 0;
++}
++
++
++inline int read_env(block_dev_desc_t *sata, unsigned long size,
++			unsigned long offset, const void *buffer)
++{
++	uint blk_start, blk_cnt, n;
++
++	blk_start = ALIGN(offset, sata->blksz) / sata->blksz;
++	blk_cnt   = ALIGN(size, sata->blksz) / sata->blksz;
++
++	n = sata->block_read(sata_curr_device, blk_start,
++					blk_cnt, (uchar *)buffer);
++
++	return (n == blk_cnt) ? 0 : -1;
++}
++
++void env_relocate_spec(void)
++{
++#if !defined(ENV_IS_EMBEDDED)
++	ALLOC_CACHE_ALIGN_BUFFER(char, buf, CONFIG_ENV_SIZE);
++	struct block_dev_desc_t *sata = NULL;
++	int ret = 0;
++
++	if (sata_curr_device == -1) {
++		if (sata_initialize())
++			return 1;
++		sata_curr_device = CONFIG_SATA_ENV_DEV;
++	}
++
++	if (sata_curr_device >= CONFIG_SYS_SATA_MAX_DEVICE) {
++		printf("Unknown SATA(%d) device for environment!\n",
++			sata_curr_device);
++		return 1;
++	}
++	sata = sata_get_dev(sata_curr_device);
++
++	if (read_env(sata, CONFIG_ENV_SIZE, CONFIG_ENV_OFFSET, buf)){
++		printf( "\r\n--->Read environment failed \r\n");
++		ret = 1;
++		goto err;
++	}
++
++	gd->env_valid = 1;
++	env_import(buf, 1);
++	ret = 0;
++err:
++	if (ret)
++		set_default_env(NULL);
++#endif
++}
++
++
++
+diff -uNr u-boot-2013.10-rc4/common/Makefile u-boot-imx6/common/Makefile
+--- u-boot-2013.10-rc4/common/Makefile	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/common/Makefile	2014-12-17 09:31:34.390036260 +0000
+@@ -46,6 +46,8 @@
+ COBJS-$(CONFIG_ENV_IS_IN_NAND) += env_nand.o
+ COBJS-$(CONFIG_ENV_IS_IN_NVRAM) += env_nvram.o
+ COBJS-$(CONFIG_ENV_IS_IN_ONENAND) += env_onenand.o
++COBJS-$(CONFIG_ENV_IS_IN_SATA) += env_sata.o
++COBJS-$(CONFIG_ENV_IS_IN_BOOT_DEVICE) += env_bootdevice.o
+ COBJS-$(CONFIG_ENV_IS_IN_SPI_FLASH) += env_sf.o
+ COBJS-$(CONFIG_ENV_IS_IN_REMOTE) += env_remote.o
+ COBJS-$(CONFIG_ENV_IS_IN_UBI) += env_ubi.o
+diff -uNr u-boot-2013.10-rc4/common/spl/Makefile u-boot-imx6/common/spl/Makefile
+--- u-boot-2013.10-rc4/common/spl/Makefile	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/common/spl/Makefile	2014-12-17 09:31:34.418035575 +0000
+@@ -20,6 +20,7 @@
+ COBJS-$(CONFIG_SPL_ONENAND_SUPPORT) += spl_onenand.o
+ COBJS-$(CONFIG_SPL_NET_SUPPORT) += spl_net.o
+ COBJS-$(CONFIG_SPL_MMC_SUPPORT) += spl_mmc.o
++COBJS-$(CONFIG_SPL_SATA_SUPPORT) += spl_sata.o
+ endif
+ 
+ COBJS	:= $(sort $(COBJS-y))
+diff -uNr u-boot-2013.10-rc4/common/spl/spl.c u-boot-imx6/common/spl/spl.c
+--- u-boot-2013.10-rc4/common/spl/spl.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/common/spl/spl.c	2014-12-17 09:31:34.418035575 +0000
+@@ -14,6 +14,7 @@
+ #include <version.h>
+ #include <i2c.h>
+ #include <image.h>
++#include <libfdt.h>
+ #include <malloc.h>
+ #include <linux/compiler.h>
+ 
+@@ -64,6 +65,7 @@
+ void spl_parse_image_header(const struct image_header *header)
+ {
+ 	u32 header_size = sizeof(struct image_header);
++	struct zimage_header *zi = (struct zimage_header *)header;
+ 
+ 	if (image_get_magic(header) == IH_MAGIC) {
+ 		if (spl_image.flags & SPL_COPY_PAYLOAD_ONLY) {
+@@ -88,6 +90,15 @@
+ 		debug("spl: payload image: %.*s load addr: 0x%x size: %d\n",
+ 			sizeof(spl_image.name), spl_image.name,
+ 			spl_image.load_addr, spl_image.size);
++	} else if (image_get_magic(header) == FDT_MAGIC) {
++		spl_image.have_fdt = 1;
++		spl_image.args_size = image_get_data_size(header);
++	} else if (zi->zi_magic == LINUX_ARM_ZIMAGE_MAGIC) {
++		spl_image.size = CONFIG_SYS_MONITOR_LEN;
++		spl_image.entry_point = CONFIG_SYS_UBOOT_START;
++		spl_image.load_addr = CONFIG_SYS_TEXT_BASE;
++		spl_image.os = IH_OS_LINUX;
++		spl_image.name = "Linux";
+ 	} else {
+ 		/* Signature not found - assume u-boot.bin */
+ 		debug("mkimage signature not found - ih_magic = %x\n",
+@@ -205,6 +216,11 @@
+ 		spl_net_load_image("usb_ether");
+ 		break;
+ #endif
++#ifdef CONFIG_SPL_SATA_SUPPORT
++	case BOOT_DEVICE_SATA:
++		spl_sata_load_image();
++		break;
++#endif
+ 	default:
+ 		debug("SPL: Un-supported Boot Device\n");
+ 		hang();
+diff -uNr u-boot-2013.10-rc4/common/spl/spl_mmc.c u-boot-imx6/common/spl/spl_mmc.c
+--- u-boot-2013.10-rc4/common/spl/spl_mmc.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/common/spl/spl_mmc.c	2014-12-17 09:31:34.418035575 +0000
+@@ -11,6 +11,7 @@
+ #include <asm/u-boot.h>
+ #include <mmc.h>
+ #include <fat.h>
++#include <ext4fs.h>
+ #include <version.h>
+ #include <image.h>
+ 
+@@ -44,10 +45,8 @@
+ 					(void *)spl_image.load_addr);
+ 
+ end:
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+ 	if (err == 0)
+ 		printf("spl: mmc blk read err - %lu\n", err);
+-#endif
+ 
+ 	return (err == 0);
+ }
+@@ -58,10 +57,8 @@
+ 	if (!mmc->block_dev.block_read(0,
+ 				       CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTOR,
+ 				       CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTORS,
+-				       (void *)CONFIG_SYS_SPL_ARGS_ADDR)) {
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
++				       (void *)spl_image.args_addr)) {
+ 		printf("mmc args blk read error\n");
+-#endif
+ 		return -1;
+ 	}
+ 
+@@ -85,37 +82,116 @@
+ 	spl_parse_image_header(header);
+ 
+ 	err = file_fat_read(filename, (u8 *)spl_image.load_addr, 0);
+-
+ end:
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+ 	if (err <= 0)
+ 		printf("spl: error reading image %s, err - %d\n",
+ 		       filename, err);
+-#endif
+ 
+ 	return (err <= 0);
+ }
++#endif
+ 
++#ifdef CONFIG_SPL_FAT_SUPPORT
+ #ifdef CONFIG_SPL_OS_BOOT
+ static int mmc_load_image_fat_os(struct mmc *mmc)
+ {
+ 	int err;
++	struct image_header *header;
+ 
+-	err = file_fat_read(CONFIG_SPL_FAT_LOAD_ARGS_NAME,
+-			    (void *)CONFIG_SYS_SPL_ARGS_ADDR, 0);
++	err = file_fat_read(spl_image.args,
++			    (void *)spl_image.args_addr, 0);
+ 	if (err <= 0) {
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+ 		printf("spl: error reading image %s, err - %d\n",
+-		       CONFIG_SPL_FAT_LOAD_ARGS_NAME, err);
+-#endif
+-		return -1;
++		       spl_image.args, err);
++		goto end;
+ 	}
++	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
++						sizeof(struct image_header));
++
++	err = file_fat_read(spl_image.args, header, sizeof(struct image_header));
++	if (err <= 0)
++		goto end;
++	spl_parse_image_header(header);
+ 
+-	return mmc_load_image_fat(mmc, CONFIG_SPL_FAT_LOAD_KERNEL_NAME);
++	return mmc_load_image_fat(mmc, spl_image.os_image);
++
++end:
++	return err;
+ }
+ #endif
++#endif
++
++#ifdef CONFIG_SPL_EXT_SUPPORT
++static int mmc_load_image_ext(struct mmc *mmc, const char *filename)
++{
++	int err;
++	struct image_header *header;
++
++	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
++						sizeof(struct image_header));
++	
++	err = ext4_read_file(filename, header, 0, sizeof(struct image_header));
++	if (err <= 0)
++		goto end;
++
++	spl_parse_image_header(header);
++
++	err = ext4_read_file(filename, (u8 *)spl_image.load_addr, 0, 0);
++
++end:
++	if (err <= 0)
++		printf("spl: error reading image %s, err - %d\n",
++		       filename, err);
++	else
++		printf("loading %s from MMC EXT...\n", filename);	
++
++	return (err <= 0);
++}
++
++#ifdef CONFIG_SPL_OS_BOOT
++static int mmc_load_image_ext_os(struct mmc *mmc)
++{
++	int err;
++	struct image_header *header;
+ 
++	err = file_fat_read(spl_image.args,
++			    (void *)spl_image.args_addr, 0);
++	if (err <= 0) {
++		printf("spl: error reading image %s, err - %d\n",
++		       spl_image.args, err);
++		goto end;
++	}
++	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
++						sizeof(struct image_header));
++
++	err = file_fat_read(spl_image.args, header, sizeof(struct image_header));
++	if (err <= 0)
++		goto end;
++	spl_parse_image_header(header);
++
++	return mmc_load_image_ext(mmc, spl_image.os_image);
++
++end:
++	return err;
++}
+ #endif
++#endif 
++
++static void spl_mmc_config(void)
++{
++	if (!spl_image.os_image)
++		spl_image.os_image = CONFIG_SPL_FAT_LOAD_KERNEL_NAME;
++	if (!spl_image.second_stage)
++		spl_image.second_stage = CONFIG_SPL_FAT_LOAD_PAYLOAD_NAME;
++	if (!spl_image.args)
++		spl_image.args = CONFIG_SPL_FAT_LOAD_ARGS_NAME;
++	if (!spl_image.args_addr)
++		spl_image.args_addr = CONFIG_SYS_SPL_ARGS_ADDR;
++
++	debug("Config to be loaded:\nOS: %s\nSTAGE2: %s\nARGS: %s\nARGS_ADDR: 0x%x\n",
++			spl_image.os_image, spl_image.second_stage,
++			spl_image.args, spl_image.args_addr);
++}
+ 
+ void spl_mmc_load_image(void)
+ {
+@@ -127,53 +203,58 @@
+ 	/* We register only one device. So, the dev id is always 0 */
+ 	mmc = find_mmc_device(0);
+ 	if (!mmc) {
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+ 		puts("spl: mmc device not found!!\n");
+-#endif
+ 		hang();
+ 	}
+ 
+ 	err = mmc_init(mmc);
+ 	if (err) {
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+ 		printf("spl: mmc init failed: err - %d\n", err);
+-#endif
+ 		hang();
+ 	}
+ 
+-	boot_mode = spl_boot_mode();
+-	if (boot_mode == MMCSD_MODE_RAW) {
+-		debug("boot mode - RAW\n");
++	spl_mmc_config();
++
++#ifdef CONFIG_SPL_FAT_SUPPORT
++	/* FAT filesystem */
++	err = fat_register_device(&mmc->block_dev,
++			  CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION);
++	/*if (err) {
++		printf("spl: fat register err - %d\n", err);
++	}*/
+ #ifdef CONFIG_SPL_OS_BOOT
+-		if (spl_start_uboot() || mmc_load_image_raw_os(mmc))
++	if (spl_start_uboot() || mmc_load_image_fat_os(mmc))
+ #endif
+-		err = mmc_load_image_raw(mmc,
+-					 CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR);
+-#ifdef CONFIG_SPL_FAT_SUPPORT
+-	} else if (boot_mode == MMCSD_MODE_FAT) {
+-		debug("boot mode - FAT\n");
+-
+-		err = fat_register_device(&mmc->block_dev,
+-					  CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION);
+-		if (err) {
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+-			printf("spl: fat register err - %d\n", err);
++	err = mmc_load_image_fat(mmc, spl_image.second_stage);
+ #endif
+-			hang();
+-		}
+ 
++#ifdef CONFIG_SPL_EXT_SUPPORT
++	/* EXT filesystem */
++	if (err) {
++		printf("Load image from EXT...\n");
++		disk_partition_t info;
++		if (get_partition_info(&mmc->block_dev, CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION, &info)) {
++			printf("Cannot find partition %d\n", CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION);
++		}
++		if (ext4fs_probe(&mmc->block_dev, &info)) {
++			printf("ext4fs probe failed \n");
++		}
+ #ifdef CONFIG_SPL_OS_BOOT
+-		if (spl_start_uboot() || mmc_load_image_fat_os(mmc))
++		if (spl_start_uboot() || mmc_load_image_ext_os(mmc))
+ #endif
+-		err = mmc_load_image_fat(mmc, CONFIG_SPL_FAT_LOAD_PAYLOAD_NAME);
++		err = mmc_load_image_ext(mmc, spl_image.second_stage);
++	}
+ #endif
+-	} else {
+-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+-		puts("spl: wrong MMC boot mode\n");
++
++	if (err) {
++		printf("Load image from RAW...\n");
++#ifdef CONFIG_SPL_OS_BOOT_RAW_SUPPORT
++		if (spl_start_uboot() || mmc_load_image_raw_os(mmc))
+ #endif
+-		hang();
++		err = mmc_load_image_raw(mmc, CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR);
++		if (err) {
++			printf("spl: wrong MMC boot mode\n");
++			hang();
++		}
+ 	}
+-
+-	if (err)
+-		hang();
+ }
+diff -uNr u-boot-2013.10-rc4/common/spl/spl_sata.c u-boot-imx6/common/spl/spl_sata.c
+--- u-boot-2013.10-rc4/common/spl/spl_sata.c	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/common/spl/spl_sata.c	2014-12-17 09:31:34.418035575 +0000
+@@ -0,0 +1,204 @@
++/*
++ * Copyright (C) 2000-2005, DENX Software Engineering
++ *		Wolfgang Denk <wd@denx.de>
++ * Copyright (C) Procsys. All rights reserved.
++ *		Mushtaq Khan <mushtaq_k@procsys.com>
++ *			<mushtaqk_921@yahoo.co.in>
++ * Copyright (C) 2008 Freescale Semiconductor, Inc.
++ *		Dave Liu <daveliu@freescale.com>
++ * Copyright (C) 2010 Texas Instruments
++ *		Aneesh V <aneesh@ti.com>
++ * Copyright (C) 2013 TechNexion Ltd.
++ *		Richard Hu <linuxfae@technexion.com>
++ *
++ * SPDX-License-Identifier:	GPL-2.0+
++ */
++#include <common.h>
++#include <spl.h>
++#include <fat.h>
++#include <ext4fs.h>
++#include <version.h>
++#include <part.h>
++#include <sata.h>
++
++static int sata_curr_device = -1;
++block_dev_desc_t sata_dev_desc[CONFIG_SYS_SATA_MAX_DEVICE];
++
++int sata_initialize(void)
++{
++	int rc;
++
++	memset(&sata_dev_desc[0], 0, sizeof(struct block_dev_desc));
++	sata_dev_desc[0].if_type = IF_TYPE_SATA;
++	sata_dev_desc[0].dev = 0;
++	sata_dev_desc[0].part_type = PART_TYPE_UNKNOWN;
++	sata_dev_desc[0].type = DEV_TYPE_HARDDISK;
++	sata_dev_desc[0].lba = 0;
++	sata_dev_desc[0].blksz = 512;
++	sata_dev_desc[0].log2blksz = LOG2(sata_dev_desc[0].blksz);
++	sata_dev_desc[0].block_read = sata_read;
++	sata_dev_desc[0].block_write = sata_write;
++
++	rc = init_sata(0);
++#if defined(CONFIG_SPL_FAT_SUPPORT) || defined(CONFIG_SPL_EXT_SUPPORT)
++	if (!rc) {
++		rc = scan_sata(0);
++		if (!rc && (sata_dev_desc[0].lba > 0) &&
++			(sata_dev_desc[0].blksz > 0))
++			init_part(&sata_dev_desc[0]);
++	}
++#endif
++	sata_curr_device = 0;
++	return rc;
++}
++
++DECLARE_GLOBAL_DATA_PTR;
++
++static int sata_load_image_raw(unsigned long sector)
++{
++	unsigned long err = 0;
++	u32 image_size_sectors;
++	struct image_header *header;
++	ulong n;
++	
++	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
++						sizeof(struct image_header));
++
++	n = sata_read(sata_curr_device, sector, 1, header);
++
++	/* flush cache after read */
++	flush_cache((unsigned long)header, 1 * sata_dev_desc[sata_curr_device].blksz);
++
++	if (n != 1) {
++		err = 1;
++		goto end;
++	}
++	
++	spl_parse_image_header(header);
++
++	/* convert size to sectors - round up */
++	image_size_sectors = (spl_image.size + sata_dev_desc[sata_curr_device].blksz - 1) /
++				sata_dev_desc[sata_curr_device].blksz;
++
++	printf("\nSATA read: device %d block # %ld, count %ld ... ",
++	sata_curr_device, sector, image_size_sectors);
++
++	n = sata_read(sata_curr_device, sector, image_size_sectors, (void *)spl_image.load_addr);
++
++	/* flush cache after read */
++	flush_cache((void *)spl_image.load_addr, image_size_sectors * sata_dev_desc[sata_curr_device].blksz);
++
++	printf("%ld blocks read: %s\n", n, (n==image_size_sectors) ? "OK" : "ERROR");
++	if (n != image_size_sectors) {
++		err = 1;
++		goto end;
++	}
++
++end:
++	if (err == 1)
++		printf("spl: SATA blk read err - %lu\n", err);
++
++	return err;
++}
++
++#ifdef CONFIG_SPL_FAT_SUPPORT
++static int sata_load_image_fat(const char *filename)
++{
++	int err;
++	struct image_header *header;
++
++	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
++						sizeof(struct image_header));
++
++	err = file_fat_read(filename, header, sizeof(struct image_header));
++	if (err <= 0)
++		goto end;
++
++	spl_parse_image_header(header);
++
++	err = file_fat_read(filename, (u8 *)spl_image.load_addr, 0);
++
++end:
++	if (err <= 0)
++		printf("spl: error reading image %s, err - %d\n",
++		       filename, err);
++
++	return (err <= 0);
++}
++#endif
++
++#ifdef CONFIG_SPL_EXT_SUPPORT
++static int sata_load_image_ext(const char *filename)
++{
++	int err;
++	struct image_header *header;
++
++	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
++						sizeof(struct image_header));
++	
++	err = ext4_read_file(filename, header, 0, sizeof(struct image_header));
++	if (err <= 0)
++		goto end;
++
++	spl_parse_image_header(header);
++
++	err = ext4_read_file(filename, (u8 *)spl_image.load_addr, 0, 0);
++
++end:
++	if (err <= 0)
++		printf("spl: error reading image %s, err - %d\n",
++		       filename, err);
++	else
++		printf("loading %s from SATA EXT...\n", filename);	
++
++	return (err <= 0);
++}
++#endif
++
++void spl_sata_load_image(void)
++{
++	int err;
++	u32 boot_mode;
++	ulong n;
++
++	err = sata_initialize();
++	if (err) {
++		printf("spl: sata init failed: err - %d\n", err);
++		hang();
++	}
++
++#ifdef CONFIG_SPL_FAT_SUPPORT
++	/* FAT filesystem */
++	err = fat_register_device(&sata_dev_desc[sata_curr_device],
++					  CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION);
++	if (err) {
++		printf("spl: fat register err - %d\n", err);
++	}
++
++	err = sata_load_image_fat(CONFIG_SPL_FAT_LOAD_PAYLOAD_NAME);
++#endif
++
++#ifdef CONFIG_SPL_EXT_SUPPORT
++	/* EXT filesystem */
++	if (err) {
++		disk_partition_t info;
++		if (get_partition_info(&sata_dev_desc[sata_curr_device], CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION, &info)) {
++			printf("Cannot find partition %d\n", CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION);
++		}		
++		if (ext4fs_probe(&sata_dev_desc[sata_curr_device], &info)) {
++			printf("ext4fs probe failed \n");
++     		}		
++
++		err = sata_load_image_ext(CONFIG_SPL_FAT_LOAD_PAYLOAD_NAME);
++	}
++#endif
++	
++	if (err) {
++		printf("Load image from RAW...\n");
++		err = sata_load_image_raw(CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR);
++		if (err) {
++			printf("spl: wrong SATA boot mode\n");
++			hang();
++		}
++	}
++}
+diff -uNr u-boot-2013.10-rc4/drivers/mmc/fsl_esdhc.c u-boot-imx6/drivers/mmc/fsl_esdhc.c
+--- u-boot-2013.10-rc4/drivers/mmc/fsl_esdhc.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/drivers/mmc/fsl_esdhc.c	2014-12-17 09:31:34.462034500 +0000
+@@ -574,7 +574,7 @@
+ 		mmc->host_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
+ 
+ 	mmc->f_min = 400000;
+-	mmc->f_max = MIN(gd->arch.sdhc_clk, 52000000);
++	mmc->f_max = MIN(MAX(gd->arch.sdhc_clk, 20000000), 52000000);
+ 
+ 	mmc->b_max = 0;
+ 	mmc_register(mmc);
+diff -uNr u-boot-2013.10-rc4/drivers/mtd/nand/Makefile u-boot-imx6/drivers/mtd/nand/Makefile
+--- u-boot-2013.10-rc4/drivers/mtd/nand/Makefile	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/drivers/mtd/nand/Makefile	2014-12-17 09:31:34.470034304 +0000
+@@ -70,6 +70,7 @@
+ COBJS-$(CONFIG_NAND_FSL_ELBC) += fsl_elbc_spl.o
+ COBJS-$(CONFIG_NAND_FSL_IFC) += fsl_ifc_spl.o
+ COBJS-$(CONFIG_NAND_MXC) += mxc_nand_spl.o
++COBJS-$(CONFIG_NAND_MXS) += mxs_nand_spl.o mxs_nand.o
+ 
+ endif # drivers
+ endif # nand
+diff -uNr u-boot-2013.10-rc4/drivers/mtd/nand/mxs_nand.c u-boot-imx6/drivers/mtd/nand/mxs_nand.c
+--- u-boot-2013.10-rc4/drivers/mtd/nand/mxs_nand.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/drivers/mtd/nand/mxs_nand.c	2014-12-17 09:31:34.474034207 +0000
+@@ -1014,9 +1014,12 @@
+ 		nand_info->hooked_block_markbad = mtd->_block_markbad;
+ 		mtd->_block_markbad = mxs_nand_hook_block_markbad;
+ 	}
+-
++	#ifdef CONFIG_SPL_BUILD
++	return 0;
++	#else
+ 	/* We use the reference implementation for bad block management. */
+ 	return nand_default_bbt(mtd);
++	#endif
+ }
+ 
+ /*
+diff -uNr u-boot-2013.10-rc4/drivers/mtd/nand/mxs_nand_spl.c u-boot-imx6/drivers/mtd/nand/mxs_nand_spl.c
+--- u-boot-2013.10-rc4/drivers/mtd/nand/mxs_nand_spl.c	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/drivers/mtd/nand/mxs_nand_spl.c	2014-12-17 09:31:34.474034207 +0000
+@@ -0,0 +1,235 @@
++/*
++ * (C) Copyright 2013
++ * Richard Hu, Technexion Ltd, richard.hu@technexion.com
++
++ * (C) Copyright 2006-2008
++ * Stefan Roese, DENX Software Engineering, sr@denx.de.
++ *
++ * SPDX-License-Identifier:	GPL-2.0+
++ */
++
++#include <common.h>
++#include <nand.h>
++#include <asm/io.h>
++#include <linux/mtd/nand_ecc.h>
++
++static nand_info_t mtd;
++static struct nand_chip nand_chip;
++
++#define CONFIG_SYS_NAND_RESET_CNT 200000
++
++
++static int nand_command_lp(int block, int page, uint32_t column, u8 command)
++{
++	struct nand_chip *chip = mtd.priv;
++	int page_addr = page + block * CONFIG_SYS_NAND_PAGE_COUNT;
++	uint32_t rst_sts_cnt = CONFIG_SYS_NAND_RESET_CNT;
++
++	/* Emulate NAND_CMD_READOOB */
++	if (command == NAND_CMD_READOOB) {
++		column += mtd.writesize;
++		command = NAND_CMD_READ0;
++	}
++
++	/* Command latch cycle */
++	chip->cmd_ctrl(&mtd, command & 0xff,
++		       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);
++
++	if (column != -1 || page_addr != -1) {
++		int ctrl = NAND_CTRL_CHANGE | NAND_NCE | NAND_ALE;
++
++		/* Serially input address */
++		if (column != -1) {
++			/* Adjust columns for 16 bit buswidth */
++			if (chip->options & NAND_BUSWIDTH_16)
++				column >>= 1;
++			chip->cmd_ctrl(&mtd, column, ctrl);
++			ctrl &= ~NAND_CTRL_CHANGE;
++			chip->cmd_ctrl(&mtd, column >> 8, ctrl);
++		}
++		if (page_addr != -1) {
++			chip->cmd_ctrl(&mtd, page_addr, ctrl);
++			chip->cmd_ctrl(&mtd, page_addr >> 8,
++					NAND_NCE | NAND_ALE);
++			#ifdef CONFIG_SYS_NAND_5_ADDR_CYCLE
++			chip->cmd_ctrl(&mtd, page_addr >> 16,
++					NAND_NCE | NAND_ALE);
++			#endif
++		}
++	}
++	chip->cmd_ctrl(&mtd, NAND_CMD_NONE, NAND_NCE | NAND_CTRL_CHANGE);
++
++	/*
++	 * Program and erase have their own busy handlers status, sequential
++	 * in, and deplete1 need no delay.
++	 */
++	switch (command) {
++
++	case NAND_CMD_CACHEDPROG:
++	case NAND_CMD_PAGEPROG:
++	case NAND_CMD_ERASE1:
++	case NAND_CMD_ERASE2:
++	case NAND_CMD_SEQIN:
++	case NAND_CMD_RNDIN:
++	case NAND_CMD_STATUS:
++	case NAND_CMD_DEPLETE1:
++		return;
++
++	case NAND_CMD_STATUS_ERROR:
++	case NAND_CMD_STATUS_ERROR0:
++	case NAND_CMD_STATUS_ERROR1:
++	case NAND_CMD_STATUS_ERROR2:
++	case NAND_CMD_STATUS_ERROR3:
++		/* Read error status commands require only a short delay */
++		udelay(chip->chip_delay);
++		return;
++
++	case NAND_CMD_RESET:
++		if (chip->dev_ready)
++			break;
++		udelay(chip->chip_delay);
++		chip->cmd_ctrl(&mtd, NAND_CMD_STATUS,
++			       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);
++		chip->cmd_ctrl(&mtd, NAND_CMD_NONE,
++			       NAND_NCE | NAND_CTRL_CHANGE);
++		while (!(chip->read_byte(&mtd) & NAND_STATUS_READY) &&
++			(rst_sts_cnt--));
++		return;
++
++	case NAND_CMD_RNDOUT:
++		/* No ready / busy check necessary */
++		chip->cmd_ctrl(&mtd, NAND_CMD_RNDOUTSTART,
++			       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);
++		chip->cmd_ctrl(&mtd, NAND_CMD_NONE,
++			       NAND_NCE | NAND_CTRL_CHANGE);
++		return;
++
++	case NAND_CMD_READ0:
++		chip->cmd_ctrl(&mtd, NAND_CMD_READSTART,
++			       NAND_NCE | NAND_CLE | NAND_CTRL_CHANGE);
++		chip->cmd_ctrl(&mtd, NAND_CMD_NONE,
++			       NAND_NCE | NAND_CTRL_CHANGE);
++
++		/* This applies to read commands */
++	default:
++		/*
++		 * If we don't have access to the busy pin, we apply the given
++		 * command delay.
++		 */
++		if (!chip->dev_ready) {
++			udelay(chip->chip_delay);
++			return;
++		}
++	}
++
++	/*
++	 * Apply this short delay always to ensure that we do wait tWB in
++	 * any case on any machine.
++	 */
++	ndelay(100);
++
++	while (!chip->dev_ready(&mtd))
++	;
++}
++
++
++static int nand_is_bad_block(int block)
++{
++	struct nand_chip *this = mtd.priv;
++	struct mxs_nand_info *nand_info = nand_chip.priv;
++	char bad_mark;
++	
++	nand_command_lp(block, 0, CONFIG_SYS_NAND_BAD_BLOCK_POS, NAND_CMD_READOOB);
++	bad_mark = this->read_byte(&mtd);
++	if (bad_mark != 0xff)	{
++		printf("nand_is_bad_block: %lx is bad block:%x !!! \r\n", block, bad_mark);
++		return 1;
++	}
++
++	return 0;
++}
++
++static int nand_read_page(int block, int page, void *dst)
++{
++	struct nand_chip *this = mtd.priv;
++
++	void (*hwctrl)(struct mtd_info *mtd, int cmd,
++			unsigned int ctrl) = this->cmd_ctrl;
++
++	nand_command_lp(block, page, 0, NAND_CMD_READ0);
++	this->ecc.read_page(&mtd, &nand_chip, dst, 0, page);
++}
++
++
++int nand_spl_load_image(uint32_t offs, unsigned int size, void *dst)
++{
++	unsigned int block, lastblock;
++	unsigned int page;
++
++	/*
++	 * offs has to be aligned to a page address!
++	 */
++	block = offs / CONFIG_SYS_NAND_BLOCK_SIZE;
++	lastblock = (offs + size - 1) / CONFIG_SYS_NAND_BLOCK_SIZE;
++	page = (offs % CONFIG_SYS_NAND_BLOCK_SIZE) / CONFIG_SYS_NAND_PAGE_SIZE;
++
++	nand_read_page(block, page, dst);
++
++	
++	while (block <= lastblock) {
++		if (!nand_is_bad_block(block)) {
++			//
++			// Skip bad blocks
++			//
++			while (page < CONFIG_SYS_NAND_PAGE_COUNT) {
++				nand_read_page(block, page, dst);
++				dst += CONFIG_SYS_NAND_PAGE_SIZE;
++				page++;
++			}
++
++			page = 0;
++		
++		} else {
++			lastblock++;
++		}
++		
++
++		block++;
++	}
++	
++
++	return 0;
++}
++
++/* nand_init() - initialize data to make nand usable by SPL */
++void nand_init(void)
++{
++	/*
++	 * Init board specific nand support
++	 */
++	mtd.priv = &nand_chip;
++
++	board_nand_init(&nand_chip);
++	mtd.priv = &nand_chip;	
++
++	if (nand_chip.select_chip)
++		nand_chip.select_chip(&mtd, 0);
++	
++	mtd.writesize = CONFIG_SYS_NAND_PAGE_SIZE;
++	mtd.oobsize = CONFIG_SYS_NAND_OOBSIZE;
++
++	//Actually, not scan and create bbt, just for setting flash memory geometry to BCH
++	nand_chip.scan_bbt(&mtd); 
++
++	nand_chip.buffers = memalign(ARCH_DMA_MINALIGN, sizeof(*nand_chip.buffers));
++	nand_chip.oob_poi = nand_chip.buffers->databuf + mtd.writesize;	
++
++}
++
++/* Unselect after operation */
++void nand_deselect(void)
++{
++	if (nand_chip.select_chip)
++		nand_chip.select_chip(&mtd, -1);
++}
++
+diff -uNr u-boot-2013.10-rc4/drivers/net/fec_mxc.c u-boot-imx6/drivers/net/fec_mxc.c
+--- u-boot-2013.10-rc4/drivers/net/fec_mxc.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/drivers/net/fec_mxc.c	2014-12-17 09:31:34.494033718 +0000
+@@ -117,8 +117,10 @@
+ 	 * it's now safe to read the PHY's register
+ 	 */
+ 	val = (unsigned short)readl(&eth->mii_data);
++#ifdef VERBOSE_DEBUG
+ 	debug("%s: phy: %02x reg:%02x val:%#x\n", __func__, phyAddr,
+ 			regAddr, val);
++#endif
+ 	return val;
+ }
+ 
+@@ -161,8 +163,10 @@
+ 	 * clear MII interrupt bit
+ 	 */
+ 	writel(FEC_IEVENT_MII, &eth->ievent);
++#ifdef VERBOSE_DEBUG
+ 	debug("%s: phy: %02x reg:%02x val:%#x\n", __func__, phyAddr,
+ 			regAddr, data);
++#endif
+ 
+ 	return 0;
+ }
+@@ -767,9 +771,11 @@
+ 	if (readw(&fec->tbd_base[fec->tbd_index].status) & FEC_TBD_READY)
+ 		ret = -EINVAL;
+ 
++#ifdef VERBOSE_DEBUG
+ 	debug("fec_send: status 0x%x index %d ret %i\n",
+ 			readw(&fec->tbd_base[fec->tbd_index].status),
+ 			fec->tbd_index, ret);
++#endif
+ 	/* for next transmission use the other buffer */
+ 	if (fec->tbd_index)
+ 		fec->tbd_index = 0;
+@@ -801,7 +807,9 @@
+ 	 */
+ 	ievent = readl(&fec->eth->ievent);
+ 	writel(ievent, &fec->eth->ievent);
++#ifdef VERBOSE_DEBUG
+ 	debug("fec_recv: ievent 0x%lx\n", ievent);
++#endif
+ 	if (ievent & FEC_IEVENT_BABR) {
+ 		fec_halt(dev);
+ 		fec_init(dev, fec->bd);
+@@ -842,7 +850,9 @@
+ 	invalidate_dcache_range(addr, addr + size);
+ 
+ 	bd_status = readw(&rbd->status);
++#ifdef VERBOSE_DEBUG
+ 	debug("fec_recv: status 0x%x\n", bd_status);
++#endif
+ 
+ 	if (!(bd_status & FEC_RBD_EMPTY)) {
+ 		if ((bd_status & FEC_RBD_LAST) && !(bd_status & FEC_RBD_ERR) &&
+@@ -897,7 +907,9 @@
+ 		fec_rx_task_enable(fec);
+ 		fec->rbd_index = (fec->rbd_index + 1) % FEC_RBD_NUM;
+ 	}
++#ifdef VERBOSE_DEBUG
+ 	debug("fec_recv: stop\n");
++#endif
+ 
+ 	return len;
+ }
+@@ -1018,7 +1030,7 @@
+ 	return bus;
+ }
+ 
+-int fecmxc_initialize_multi(bd_t *bd, int dev_id, int phy_id, uint32_t addr)
++int fecmxc_initialize_multi(bd_t *bd, int dev_id, uint32_t phy_mask, uint32_t addr)
+ {
+ 	uint32_t base_mii;
+ 	struct mii_dev *bus = NULL;
+@@ -1036,12 +1048,12 @@
+ #else
+ 	base_mii = addr;
+ #endif
+-	debug("eth_init: fec_probe(bd, %i, %i) @ %08x\n", dev_id, phy_id, addr);
++	debug("eth_init: fec_probe(bd, 0x%x, %i) @ %08x\n", dev_id, phy_mask, addr);
+ 	bus = fec_get_miibus(base_mii, dev_id);
+ 	if (!bus)
+ 		return -ENOMEM;
+ #ifdef CONFIG_PHYLIB
+-	phydev = phy_find_by_mask(bus, 1 << phy_id, PHY_INTERFACE_MODE_RGMII);
++	phydev = phy_find_by_mask(bus, phy_mask, PHY_INTERFACE_MODE_RGMII);
+ 	if (!phydev) {
+ 		free(bus);
+ 		return -ENOMEM;
+@@ -1062,7 +1074,7 @@
+ #ifdef CONFIG_FEC_MXC_PHYADDR
+ int fecmxc_initialize(bd_t *bd)
+ {
+-	return fecmxc_initialize_multi(bd, -1, CONFIG_FEC_MXC_PHYADDR,
++	return fecmxc_initialize_multi(bd, -1, 1 << CONFIG_FEC_MXC_PHYADDR,
+ 			IMX_FEC_BASE);
+ }
+ #endif
+diff -uNr u-boot-2013.10-rc4/drivers/net/phy/atheros.c u-boot-imx6/drivers/net/phy/atheros.c
+--- u-boot-2013.10-rc4/drivers/net/phy/atheros.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/drivers/net/phy/atheros.c	2014-12-17 09:31:34.526032936 +0000
+@@ -20,6 +20,18 @@
+ {
+ 	int regval;
+ 
++#ifdef ATHEROS_QUIRK_SMARTEEE
++	/* Ar803x phy SmartEEE feature cause link status generates glitch,
++	 * which cause ethernet link down/up issue, so disable SmartEEE
++	 */
++	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x0003);
++	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, 0x805d);
++	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x4003);
++	regval = phy_read(phydev, MDIO_DEVAD_NONE, 0xe);
++	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, (regval&~0x0100));
++#endif
++
++	/* To enable AR8035 ouput a 125MHz clk from CLK_25M */
+ 	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x0007);
+ 	phy_write(phydev, MDIO_DEVAD_NONE, 0xe, 0x8016);
+ 	phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x4007);
+@@ -40,7 +52,7 @@
+ static struct phy_driver AR8021_driver =  {
+ 	.name = "AR8021",
+ 	.uid = 0x4dd040,
+-	.mask = 0xfffff0,
++	.mask = 0x4fffff,
+ 	.features = PHY_GBIT_FEATURES,
+ 	.config = ar8021_config,
+ 	.startup = genphy_startup,
+@@ -50,7 +62,7 @@
+ static struct phy_driver AR8031_driver =  {
+ 	.name = "AR8031",
+ 	.uid = 0x4dd074,
+-	.mask = 0xfffff0,
++	.mask = 0x4fffff,
+ 	.features = PHY_GBIT_FEATURES,
+ 	.config = genphy_config,
+ 	.startup = genphy_startup,
+diff -uNr u-boot-2013.10-rc4/drivers/video/cfb_console.c u-boot-imx6/drivers/video/cfb_console.c
+--- u-boot-2013.10-rc4/drivers/video/cfb_console.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/drivers/video/cfb_console.c	2014-12-17 09:31:34.574031763 +0000
+@@ -944,7 +944,7 @@
+ 		CURSOR_SET;
+ }
+ 
+-void video_putc(const char c)
++static void _video_putc(const char c, int fl_cache)
+ {
+ #ifdef CONFIG_CFB_CONSOLE_ANSI
+ 	int i;
+@@ -1154,16 +1154,23 @@
+ #else
+ 	parse_putc(c);
+ #endif
+-	if (cfb_do_flush_cache)
++	if (fl_cache && cfb_do_flush_cache)
+ 		flush_cache(VIDEO_FB_ADRS, VIDEO_SIZE);
+ }
+ 
++void video_putc(const char c)
++{
++	_video_putc(c, 1);
++}
++
+ void video_puts(const char *s)
+ {
+ 	int count = strlen(s);
+ 
+ 	while (count--)
+-		video_putc(*s++);
++		_video_putc(*s++, 0);
++	if (cfb_do_flush_cache)
++		flush_cache(VIDEO_FB_ADRS, VIDEO_SIZE);
+ }
+ 
+ /*
+diff -uNr u-boot-2013.10-rc4/fs/fat/fat.c u-boot-imx6/fs/fat/fat.c
+--- u-boot-2013.10-rc4/fs/fat/fat.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/fs/fat/fat.c	2014-12-17 09:31:34.586031470 +0000
+@@ -1236,7 +1236,7 @@
+ long file_fat_read_at(const char *filename, unsigned long pos, void *buffer,
+ 		      unsigned long maxsize)
+ {
+-	printf("reading %s\n", filename);
++	debug("reading %s\n", filename);
+ 	return do_fat_read_at(filename, pos, buffer, maxsize, LS_NO);
+ }
+ 
+diff -uNr u-boot-2013.10-rc4/.git/config u-boot-imx6/.git/config
+--- u-boot-2013.10-rc4/.git/config	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/config	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1,11 @@
++[core]
++	repositoryformatversion = 0
++	filemode = true
++	bare = false
++	logallrefupdates = true
++[remote "origin"]
++	url = https://github.com/SolidRun/u-boot-imx6.git
++	fetch = +refs/heads/*:refs/remotes/origin/*
++[branch "imx6"]
++	remote = origin
++	merge = refs/heads/imx6
+diff -uNr u-boot-2013.10-rc4/.git/description u-boot-imx6/.git/description
+--- u-boot-2013.10-rc4/.git/description	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/description	2014-12-17 09:29:12.437471584 +0000
+@@ -0,0 +1 @@
++Unnamed repository; edit this file 'description' to name the repository.
+diff -uNr u-boot-2013.10-rc4/.git/HEAD u-boot-imx6/.git/HEAD
+--- u-boot-2013.10-rc4/.git/HEAD	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/HEAD	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1 @@
++ref: refs/heads/imx6
+diff -uNr u-boot-2013.10-rc4/.git/hooks/applypatch-msg.sample u-boot-imx6/.git/hooks/applypatch-msg.sample
+--- u-boot-2013.10-rc4/.git/hooks/applypatch-msg.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/applypatch-msg.sample	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,15 @@
++#!/bin/sh
++#
++# An example hook script to check the commit log message taken by
++# applypatch from an e-mail message.
++#
++# The hook should exit with non-zero status after issuing an
++# appropriate message if it wants to stop the commit.  The hook is
++# allowed to edit the commit message file.
++#
++# To enable this hook, rename this file to "applypatch-msg".
++
++. git-sh-setup
++test -x "$GIT_DIR/hooks/commit-msg" &&
++	exec "$GIT_DIR/hooks/commit-msg" ${1+"$@"}
++:
+diff -uNr u-boot-2013.10-rc4/.git/hooks/commit-msg.sample u-boot-imx6/.git/hooks/commit-msg.sample
+--- u-boot-2013.10-rc4/.git/hooks/commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/commit-msg.sample	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,24 @@
++#!/bin/sh
++#
++# An example hook script to check the commit log message.
++# Called by "git commit" with one argument, the name of the file
++# that has the commit message.  The hook should exit with non-zero
++# status after issuing an appropriate message if it wants to stop the
++# commit.  The hook is allowed to edit the commit message file.
++#
++# To enable this hook, rename this file to "commit-msg".
++
++# Uncomment the below to add a Signed-off-by line to the message.
++# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
++# hook is more suited to it.
++#
++# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
++# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
++
++# This example catches duplicate Signed-off-by lines.
++
++test "" = "$(grep '^Signed-off-by: ' "$1" |
++	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
++	echo >&2 Duplicate Signed-off-by lines.
++	exit 1
++}
+diff -uNr u-boot-2013.10-rc4/.git/hooks/post-update.sample u-boot-imx6/.git/hooks/post-update.sample
+--- u-boot-2013.10-rc4/.git/hooks/post-update.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/post-update.sample	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,8 @@
++#!/bin/sh
++#
++# An example hook script to prepare a packed repository for use over
++# dumb transports.
++#
++# To enable this hook, rename this file to "post-update".
++
++exec git update-server-info
+diff -uNr u-boot-2013.10-rc4/.git/hooks/pre-applypatch.sample u-boot-imx6/.git/hooks/pre-applypatch.sample
+--- u-boot-2013.10-rc4/.git/hooks/pre-applypatch.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/pre-applypatch.sample	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,14 @@
++#!/bin/sh
++#
++# An example hook script to verify what is about to be committed
++# by applypatch from an e-mail message.
++#
++# The hook should exit with non-zero status after issuing an
++# appropriate message if it wants to stop the commit.
++#
++# To enable this hook, rename this file to "pre-applypatch".
++
++. git-sh-setup
++test -x "$GIT_DIR/hooks/pre-commit" &&
++	exec "$GIT_DIR/hooks/pre-commit" ${1+"$@"}
++:
+diff -uNr u-boot-2013.10-rc4/.git/hooks/pre-commit.sample u-boot-imx6/.git/hooks/pre-commit.sample
+--- u-boot-2013.10-rc4/.git/hooks/pre-commit.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/pre-commit.sample	2014-12-17 09:29:12.437471584 +0000
+@@ -0,0 +1,49 @@
++#!/bin/sh
++#
++# An example hook script to verify what is about to be committed.
++# Called by "git commit" with no arguments.  The hook should
++# exit with non-zero status after issuing an appropriate message if
++# it wants to stop the commit.
++#
++# To enable this hook, rename this file to "pre-commit".
++
++if git rev-parse --verify HEAD >/dev/null 2>&1
++then
++	against=HEAD
++else
++	# Initial commit: diff against an empty tree object
++	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
++fi
++
++# If you want to allow non-ASCII filenames set this variable to true.
++allownonascii=$(git config --bool hooks.allownonascii)
++
++# Redirect output to stderr.
++exec 1>&2
++
++# Cross platform projects tend to avoid non-ASCII filenames; prevent
++# them from being added to the repository. We exploit the fact that the
++# printable range starts at the space character and ends with tilde.
++if [ "$allownonascii" != "true" ] &&
++	# Note that the use of brackets around a tr range is ok here, (it's
++	# even required, for portability to Solaris 10's /usr/bin/tr), since
++	# the square bracket bytes happen to fall in the designated range.
++	test $(git diff --cached --name-only --diff-filter=A -z $against |
++	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
++then
++	cat <<\EOF
++Error: Attempt to add a non-ASCII file name.
++
++This can cause problems if you want to work with people on other platforms.
++
++To be portable it is advisable to rename the file.
++
++If you know what you are doing you can disable this check using:
++
++  git config hooks.allownonascii true
++EOF
++	exit 1
++fi
++
++# If there are whitespace errors, print the offending file names and fail.
++exec git diff-index --check --cached $against --
+diff -uNr u-boot-2013.10-rc4/.git/hooks/prepare-commit-msg.sample u-boot-imx6/.git/hooks/prepare-commit-msg.sample
+--- u-boot-2013.10-rc4/.git/hooks/prepare-commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/prepare-commit-msg.sample	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,36 @@
++#!/bin/sh
++#
++# An example hook script to prepare the commit log message.
++# Called by "git commit" with the name of the file that has the
++# commit message, followed by the description of the commit
++# message's source.  The hook's purpose is to edit the commit
++# message file.  If the hook fails with a non-zero status,
++# the commit is aborted.
++#
++# To enable this hook, rename this file to "prepare-commit-msg".
++
++# This hook includes three examples.  The first comments out the
++# "Conflicts:" part of a merge commit.
++#
++# The second includes the output of "git diff --name-status -r"
++# into the message, just before the "git status" output.  It is
++# commented because it doesn't cope with --amend or with squashed
++# commits.
++#
++# The third example adds a Signed-off-by line to the message, that can
++# still be edited.  This is rarely a good idea.
++
++case "$2,$3" in
++  merge,)
++    /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
++
++# ,|template,)
++#   /usr/bin/perl -i.bak -pe '
++#      print "\n" . `git diff --cached --name-status -r`
++#	 if /^#/ && $first++ == 0' "$1" ;;
++
++  *) ;;
++esac
++
++# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
++# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+diff -uNr u-boot-2013.10-rc4/.git/hooks/pre-push.sample u-boot-imx6/.git/hooks/pre-push.sample
+--- u-boot-2013.10-rc4/.git/hooks/pre-push.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/pre-push.sample	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,54 @@
++#!/bin/sh
++
++# An example hook script to verify what is about to be pushed.  Called by "git
++# push" after it has checked the remote status, but before anything has been
++# pushed.  If this script exits with a non-zero status nothing will be pushed.
++#
++# This hook is called with the following parameters:
++#
++# $1 -- Name of the remote to which the push is being done
++# $2 -- URL to which the push is being done
++#
++# If pushing without using a named remote those arguments will be equal.
++#
++# Information about the commits which are being pushed is supplied as lines to
++# the standard input in the form:
++#
++#   <local ref> <local sha1> <remote ref> <remote sha1>
++#
++# This sample shows how to prevent push of commits where the log message starts
++# with "WIP" (work in progress).
++
++remote="$1"
++url="$2"
++
++z40=0000000000000000000000000000000000000000
++
++IFS=' '
++while read local_ref local_sha remote_ref remote_sha
++do
++	if [ "$local_sha" = $z40 ]
++	then
++		# Handle delete
++		:
++	else
++		if [ "$remote_sha" = $z40 ]
++		then
++			# New branch, examine all commits
++			range="$local_sha"
++		else
++			# Update to existing branch, examine new commits
++			range="$remote_sha..$local_sha"
++		fi
++
++		# Check for WIP commit
++		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
++		if [ -n "$commit" ]
++		then
++			echo "Found WIP commit in $local_ref, not pushing"
++			exit 1
++		fi
++	fi
++done
++
++exit 0
+diff -uNr u-boot-2013.10-rc4/.git/hooks/pre-rebase.sample u-boot-imx6/.git/hooks/pre-rebase.sample
+--- u-boot-2013.10-rc4/.git/hooks/pre-rebase.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/pre-rebase.sample	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,169 @@
++#!/bin/sh
++#
++# Copyright (c) 2006, 2008 Junio C Hamano
++#
++# The "pre-rebase" hook is run just before "git rebase" starts doing
++# its job, and can prevent the command from running by exiting with
++# non-zero status.
++#
++# The hook is called with the following parameters:
++#
++# $1 -- the upstream the series was forked from.
++# $2 -- the branch being rebased (or empty when rebasing the current branch).
++#
++# This sample shows how to prevent topic branches that are already
++# merged to 'next' branch from getting rebased, because allowing it
++# would result in rebasing already published history.
++
++publish=next
++basebranch="$1"
++if test "$#" = 2
++then
++	topic="refs/heads/$2"
++else
++	topic=`git symbolic-ref HEAD` ||
++	exit 0 ;# we do not interrupt rebasing detached HEAD
++fi
++
++case "$topic" in
++refs/heads/??/*)
++	;;
++*)
++	exit 0 ;# we do not interrupt others.
++	;;
++esac
++
++# Now we are dealing with a topic branch being rebased
++# on top of master.  Is it OK to rebase it?
++
++# Does the topic really exist?
++git show-ref -q "$topic" || {
++	echo >&2 "No such branch $topic"
++	exit 1
++}
++
++# Is topic fully merged to master?
++not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
++if test -z "$not_in_master"
++then
++	echo >&2 "$topic is fully merged to master; better remove it."
++	exit 1 ;# we could allow it, but there is no point.
++fi
++
++# Is topic ever merged to next?  If so you should not be rebasing it.
++only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
++only_next_2=`git rev-list ^master           ${publish} | sort`
++if test "$only_next_1" = "$only_next_2"
++then
++	not_in_topic=`git rev-list "^$topic" master`
++	if test -z "$not_in_topic"
++	then
++		echo >&2 "$topic is already up-to-date with master"
++		exit 1 ;# we could allow it, but there is no point.
++	else
++		exit 0
++	fi
++else
++	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
++	/usr/bin/perl -e '
++		my $topic = $ARGV[0];
++		my $msg = "* $topic has commits already merged to public branch:\n";
++		my (%not_in_next) = map {
++			/^([0-9a-f]+) /;
++			($1 => 1);
++		} split(/\n/, $ARGV[1]);
++		for my $elem (map {
++				/^([0-9a-f]+) (.*)$/;
++				[$1 => $2];
++			} split(/\n/, $ARGV[2])) {
++			if (!exists $not_in_next{$elem->[0]}) {
++				if ($msg) {
++					print STDERR $msg;
++					undef $msg;
++				}
++				print STDERR " $elem->[1]\n";
++			}
++		}
++	' "$topic" "$not_in_next" "$not_in_master"
++	exit 1
++fi
++
++<<\DOC_END
++
++This sample hook safeguards topic branches that have been
++published from being rewound.
++
++The workflow assumed here is:
++
++ * Once a topic branch forks from "master", "master" is never
++   merged into it again (either directly or indirectly).
++
++ * Once a topic branch is fully cooked and merged into "master",
++   it is deleted.  If you need to build on top of it to correct
++   earlier mistakes, a new topic branch is created by forking at
++   the tip of the "master".  This is not strictly necessary, but
++   it makes it easier to keep your history simple.
++
++ * Whenever you need to test or publish your changes to topic
++   branches, merge them into "next" branch.
++
++The script, being an example, hardcodes the publish branch name
++to be "next", but it is trivial to make it configurable via
++$GIT_DIR/config mechanism.
++
++With this workflow, you would want to know:
++
++(1) ... if a topic branch has ever been merged to "next".  Young
++    topic branches can have stupid mistakes you would rather
++    clean up before publishing, and things that have not been
++    merged into other branches can be easily rebased without
++    affecting other people.  But once it is published, you would
++    not want to rewind it.
++
++(2) ... if a topic branch has been fully merged to "master".
++    Then you can delete it.  More importantly, you should not
++    build on top of it -- other people may already want to
++    change things related to the topic as patches against your
++    "master", so if you need further changes, it is better to
++    fork the topic (perhaps with the same name) afresh from the
++    tip of "master".
++
++Let's look at this example:
++
++		   o---o---o---o---o---o---o---o---o---o "next"
++		  /       /           /           /
++		 /   a---a---b A     /           /
++		/   /               /           /
++	       /   /   c---c---c---c B         /
++	      /   /   /             \         /
++	     /   /   /   b---b C     \       /
++	    /   /   /   /             \     /
++    ---o---o---o---o---o---o---o---o---o---o---o "master"
++
++
++A, B and C are topic branches.
++
++ * A has one fix since it was merged up to "next".
++
++ * B has finished.  It has been fully merged up to "master" and "next",
++   and is ready to be deleted.
++
++ * C has not merged to "next" at all.
++
++We would want to allow C to be rebased, refuse A, and encourage
++B to be deleted.
++
++To compute (1):
++
++	git rev-list ^master ^topic next
++	git rev-list ^master        next
++
++	if these match, topic has not merged in next at all.
++
++To compute (2):
++
++	git rev-list master..topic
++
++	if this is empty, it is fully merged to "master".
++
++DOC_END
+diff -uNr u-boot-2013.10-rc4/.git/hooks/update.sample u-boot-imx6/.git/hooks/update.sample
+--- u-boot-2013.10-rc4/.git/hooks/update.sample	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/hooks/update.sample	2014-12-17 09:29:12.437471584 +0000
+@@ -0,0 +1,128 @@
++#!/bin/sh
++#
++# An example hook script to blocks unannotated tags from entering.
++# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
++#
++# To enable this hook, rename this file to "update".
++#
++# Config
++# ------
++# hooks.allowunannotated
++#   This boolean sets whether unannotated tags will be allowed into the
++#   repository.  By default they won't be.
++# hooks.allowdeletetag
++#   This boolean sets whether deleting tags will be allowed in the
++#   repository.  By default they won't be.
++# hooks.allowmodifytag
++#   This boolean sets whether a tag may be modified after creation. By default
++#   it won't be.
++# hooks.allowdeletebranch
++#   This boolean sets whether deleting branches will be allowed in the
++#   repository.  By default they won't be.
++# hooks.denycreatebranch
++#   This boolean sets whether remotely creating branches will be denied
++#   in the repository.  By default this is allowed.
++#
++
++# --- Command line
++refname="$1"
++oldrev="$2"
++newrev="$3"
++
++# --- Safety check
++if [ -z "$GIT_DIR" ]; then
++	echo "Don't run this script from the command line." >&2
++	echo " (if you want, you could supply GIT_DIR then run" >&2
++	echo "  $0 <ref> <oldrev> <newrev>)" >&2
++	exit 1
++fi
++
++if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
++	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
++	exit 1
++fi
++
++# --- Config
++allowunannotated=$(git config --bool hooks.allowunannotated)
++allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
++denycreatebranch=$(git config --bool hooks.denycreatebranch)
++allowdeletetag=$(git config --bool hooks.allowdeletetag)
++allowmodifytag=$(git config --bool hooks.allowmodifytag)
++
++# check for no description
++projectdesc=$(sed -e '1q' "$GIT_DIR/description")
++case "$projectdesc" in
++"Unnamed repository"* | "")
++	echo "*** Project description file hasn't been set" >&2
++	exit 1
++	;;
++esac
++
++# --- Check types
++# if $newrev is 0000...0000, it's a commit to delete a ref.
++zero="0000000000000000000000000000000000000000"
++if [ "$newrev" = "$zero" ]; then
++	newrev_type=delete
++else
++	newrev_type=$(git cat-file -t $newrev)
++fi
++
++case "$refname","$newrev_type" in
++	refs/tags/*,commit)
++		# un-annotated tag
++		short_refname=${refname##refs/tags/}
++		if [ "$allowunannotated" != "true" ]; then
++			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
++			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
++			exit 1
++		fi
++		;;
++	refs/tags/*,delete)
++		# delete tag
++		if [ "$allowdeletetag" != "true" ]; then
++			echo "*** Deleting a tag is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	refs/tags/*,tag)
++		# annotated tag
++		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
++		then
++			echo "*** Tag '$refname' already exists." >&2
++			echo "*** Modifying a tag is not allowed in this repository." >&2
++			exit 1
++		fi
++		;;
++	refs/heads/*,commit)
++		# branch
++		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
++			echo "*** Creating a branch is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	refs/heads/*,delete)
++		# delete branch
++		if [ "$allowdeletebranch" != "true" ]; then
++			echo "*** Deleting a branch is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	refs/remotes/*,commit)
++		# tracking branch
++		;;
++	refs/remotes/*,delete)
++		# delete tracking branch
++		if [ "$allowdeletebranch" != "true" ]; then
++			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	*)
++		# Anything else (is there anything else?)
++		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
++		exit 1
++		;;
++esac
++
++# --- Finished
++exit 0
+Binary files u-boot-2013.10-rc4/.git/index and u-boot-imx6/.git/index differ
+diff -uNr u-boot-2013.10-rc4/.git/info/exclude u-boot-imx6/.git/info/exclude
+--- u-boot-2013.10-rc4/.git/info/exclude	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/info/exclude	2014-12-17 09:29:12.433471680 +0000
+@@ -0,0 +1,6 @@
++# git ls-files --others --exclude-from=.git/info/exclude
++# Lines that start with '#' are comments.
++# For a project mostly in C, the following would be a good set of
++# exclude patterns (uncomment them if you want to use them):
++# *.[oa]
++# *~
+diff -uNr u-boot-2013.10-rc4/.git/logs/HEAD u-boot-imx6/.git/logs/HEAD
+--- u-boot-2013.10-rc4/.git/logs/HEAD	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/logs/HEAD	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1 @@
++0000000000000000000000000000000000000000 e4bc4c3ebead0e5165ca06d393fb9cc71dcf2256 Sam Nazarko <email@samnazarko.co.uk> 1418808693 +0000	clone: from https://github.com/SolidRun/u-boot-imx6.git
+diff -uNr u-boot-2013.10-rc4/.git/logs/refs/heads/imx6 u-boot-imx6/.git/logs/refs/heads/imx6
+--- u-boot-2013.10-rc4/.git/logs/refs/heads/imx6	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/logs/refs/heads/imx6	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1 @@
++0000000000000000000000000000000000000000 e4bc4c3ebead0e5165ca06d393fb9cc71dcf2256 Sam Nazarko <email@samnazarko.co.uk> 1418808693 +0000	clone: from https://github.com/SolidRun/u-boot-imx6.git
+diff -uNr u-boot-2013.10-rc4/.git/logs/refs/remotes/origin/HEAD u-boot-imx6/.git/logs/refs/remotes/origin/HEAD
+--- u-boot-2013.10-rc4/.git/logs/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/logs/refs/remotes/origin/HEAD	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1 @@
++0000000000000000000000000000000000000000 e4bc4c3ebead0e5165ca06d393fb9cc71dcf2256 Sam Nazarko <email@samnazarko.co.uk> 1418808693 +0000	clone: from https://github.com/SolidRun/u-boot-imx6.git
+Binary files u-boot-2013.10-rc4/.git/objects/pack/pack-6986b1a2f993d16225c2e7806a5f779659db5a18.idx and u-boot-imx6/.git/objects/pack/pack-6986b1a2f993d16225c2e7806a5f779659db5a18.idx differ
+Binary files u-boot-2013.10-rc4/.git/objects/pack/pack-6986b1a2f993d16225c2e7806a5f779659db5a18.pack and u-boot-imx6/.git/objects/pack/pack-6986b1a2f993d16225c2e7806a5f779659db5a18.pack differ
+diff -uNr u-boot-2013.10-rc4/.git/packed-refs u-boot-imx6/.git/packed-refs
+--- u-boot-2013.10-rc4/.git/packed-refs	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/packed-refs	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1,2 @@
++# pack-refs with: peeled fully-peeled 
++e4bc4c3ebead0e5165ca06d393fb9cc71dcf2256 refs/remotes/origin/imx6
+diff -uNr u-boot-2013.10-rc4/.git/refs/heads/imx6 u-boot-imx6/.git/refs/heads/imx6
+--- u-boot-2013.10-rc4/.git/refs/heads/imx6	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/refs/heads/imx6	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1 @@
++e4bc4c3ebead0e5165ca06d393fb9cc71dcf2256
+diff -uNr u-boot-2013.10-rc4/.git/refs/remotes/origin/HEAD u-boot-imx6/.git/refs/remotes/origin/HEAD
+--- u-boot-2013.10-rc4/.git/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/.git/refs/remotes/origin/HEAD	2014-12-17 09:31:33.758051703 +0000
+@@ -0,0 +1 @@
++ref: refs/remotes/origin/imx6
+diff -uNr u-boot-2013.10-rc4/include/common.h u-boot-imx6/include/common.h
+--- u-boot-2013.10-rc4/include/common.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/include/common.h	2014-12-17 09:31:34.606030981 +0000
+@@ -627,6 +627,8 @@
+ #endif
+ #endif
+ 
++void smp_set_core_boot_addr(unsigned long addr, int corenr);
++void smp_kick_all_cpus(void);
+ 
+ /* $(CPU)/serial.c */
+ int	serial_init   (void);
+diff -uNr u-boot-2013.10-rc4/include/configs/imx6_spl.h u-boot-imx6/include/configs/imx6_spl.h
+--- u-boot-2013.10-rc4/include/configs/imx6_spl.h	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/include/configs/imx6_spl.h	2014-12-17 09:31:34.670029417 +0000
+@@ -0,0 +1,61 @@
++/*
++ * Author: Tungyi Lin <tungyilin1127@gmail.com>
++ *
++ * Derived from EDM_CF_IMX6 code by TechNexion,Inc
++ *
++ * SPDX-License-Identifier:     GPL-2.0+
++ */
++#ifndef __IMX6_SPL_CONFIG_H
++#define __IMX6_SPL_CONFIG_H
++#ifdef CONFIG_SPL
++
++#define CONFIG_SPL_FRAMEWORK
++
++#define	CONFIG_SPL_LDSCRIPT	"arch/arm/cpu/armv7/mx6/u-boot-spl.lds"
++#define CONFIG_SPL_TEXT_BASE	0x00908000 
++#define CONFIG_SPL_MAX_SIZE	43008 /* (42 * 1024) */
++#define CONFIG_SPL_START_S_PATH	"arch/arm/cpu/armv7"
++#define CONFIG_SPL_STACK	0x0091FFB8
++
++#define CONFIG_SPL_LIBCOMMON_SUPPORT
++#define CONFIG_SPL_LIBGENERIC_SUPPORT
++#define CONFIG_SPL_SERIAL_SUPPORT
++
++#define CONFIG_SPL_GPIO_SUPPORT
++
++#define CONFIG_SPL_FAT_SUPPORT
++#define CONFIG_SPL_OS_BOOT
++#define CONFIG_SPL_OF_LIBFDT
++#define CONFIG_SPL_FAT_LOAD_KERNEL_NAME "zImage"
++#define CONFIG_SPL_FAT_LOAD_ARGS_NAME "imx6.dtb"
++#define CONFIG_SYS_SPL_ARGS_ADDR       0x18000000 
++
++
++#if defined(CONFIG_SPL_FAT_SUPPORT) || defined(CONFIG_SPL_EXT_SUPPORT)
++#define CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION	1
++#define CONFIG_SPL_FAT_LOAD_PAYLOAD_NAME	"u-boot.img"
++#define CONFIG_SPL_LIBDISK_SUPPORT
++#endif
++
++/* #define CONFIG_SPL_SATA_SUPPORT */
++
++#define CONFIG_SPL_MMC_SUPPORT
++#define CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR	84 /* offset 69KB */
++#define CONFIG_SYS_MMCSD_RAW_MODE_KERNEL_SECTOR	0 /* offset 69KB */
++#define CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTOR	0 /* offset 69KB */
++#define CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTORS	0 /* offset 69KB */
++#define CONFIG_SYS_U_BOOT_MAX_SIZE_SECTORS	800 /* 400 KB */
++#define CONFIG_SYS_MONITOR_LEN	(CONFIG_SYS_U_BOOT_MAX_SIZE_SECTORS/2*1024)
++
++#define CONFIG_SPL_BOARD_INIT
++
++#define CONFIG_SPL_BSS_START_ADDR	0x18200000
++#define CONFIG_SPL_BSS_MAX_SIZE		0x100000	/* 1 MB */
++#define CONFIG_SYS_SPL_MALLOC_START	0x18300000
++#define CONFIG_SYS_SPL_MALLOC_SIZE	0x3200000  /* 50 MB */
++#ifndef CONFIG_SYS_TEXT_BASE
++#define CONFIG_SYS_TEXT_BASE		0x10800000
++#endif
++#endif
++
++#endif
+diff -uNr u-boot-2013.10-rc4/include/configs/mx6_c1.h u-boot-imx6/include/configs/mx6_c1.h
+--- u-boot-2013.10-rc4/include/configs/mx6_c1.h	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/include/configs/mx6_c1.h	2014-12-17 09:42:30.245451467 +0000
+@@ -0,0 +1,347 @@
++/*
++ * Copyright (C) 2013 Freescale Semiconductor, Inc.
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * Configuration settings for the SolidRun carrier-1 (c1) board.
++ *
++ * SPDX-License-Identifier:	GPL-2.0+
++ */
++
++#ifndef __CONFIG_H
++#define __CONFIG_H
++
++#include "mx6_common.h"
++#include <asm/arch/imx-regs.h>
++#include <asm/imx-common/gpio.h>
++#include <asm/sizes.h>
++
++#undef DEBUG
++
++#define CONFIG_MX6
++#define CONFIG_DISPLAY_CPUINFO
++#define CONFIG_DISPLAY_BOARDINFO
++
++#define CONFIG_MACH_TYPE		4773
++
++#define CONFIG_CMDLINE_TAG
++#define CONFIG_SETUP_MEMORY_TAGS
++#define CONFIG_INITRD_TAG
++#define CONFIG_REVISION_TAG
++
++/* Size of malloc() pool */
++#define CONFIG_SYS_MALLOC_LEN		(8 * SZ_1M)
++
++#define CONFIG_BOARD_EARLY_INIT_F
++#define CONFIG_BOARD_LATE_INIT
++#define CONFIG_MXC_GPIO
++
++#define CONFIG_CMD_FUSE
++#ifdef CONFIG_CMD_FUSE
++#define CONFIG_MXC_OCOTP
++#endif
++
++#define CONFIG_MXC_UART
++#define CONFIG_MXC_UART_BASE		UART1_BASE
++
++/* allow to overwrite serial and ethaddr */
++#define CONFIG_ENV_OVERWRITE
++#define CONFIG_CONS_INDEX		1
++#define CONFIG_BAUDRATE			115200
++
++/* Command definition */
++#include <config_cmd_default.h>
++
++#undef CONFIG_CMD_IMLS
++#undef CONFIG_CMD_I2C
++
++#define CONFIG_CMD_BMODE
++#define CONFIG_CMD_SETEXPR
++#define CONFIG_CMD_MEMTEST
++#define CONFIG_BOOTDELAY		3
++
++#define CONFIG_SYS_MEMTEST_START	0x10000000
++#define CONFIG_SYS_MEMTEST_END		(CONFIG_SYS_MEMTEST_START + 500 * SZ_1M)
++
++#define CONFIG_LOADADDR			0x10800000
++#define CONFIG_SYS_TEXT_BASE		0x27800000
++
++/* MMC Configuration */
++#define CONFIG_FSL_ESDHC
++#define CONFIG_FSL_USDHC
++#define CONFIG_SYS_FSL_USDHC_NUM	1
++#define CONFIG_SYS_FSL_ESDHC_ADDR	0
++
++#define CONFIG_MMC
++#define CONFIG_CMD_MMC
++#define CONFIG_GENERIC_MMC
++#define CONFIG_BOUNCE_BUFFER
++#define CONFIG_CMD_EXT2
++#define CONFIG_CMD_FAT
++#define CONFIG_DOS_PARTITION
++
++/* Ethernet Configuration */
++#define CONFIG_FEC_MXC
++#ifdef CONFIG_FEC_MXC
++#define CONFIG_CMD_PING
++#define CONFIG_CMD_DHCP
++#define CONFIG_CMD_MII
++#define CONFIG_CMD_NET
++#define CONFIG_FEC_MXC
++#define CONFIG_MII
++#define IMX_FEC_BASE			ENET_BASE_ADDR
++#define CONFIG_FEC_XCV_TYPE		RGMII
++#define CONFIG_ETHPRIME			"FEC"
++#define CONFIG_FEC_MXC_PHYADDR		0	
++#define CONFIG_PHYLIB
++#define CONFIG_PHY_ATHEROS
++#endif
++
++/* Framebuffer */
++#define CONFIG_VIDEO
++#ifdef CONFIG_VIDEO
++#define CONFIG_VIDEO_IPUV3
++#define CONFIG_IPUV3_CLK 260000000
++#define CONFIG_CFB_CONSOLE
++#define CONFIG_CFB_CONSOLE_ANSI
++#define CONFIG_VGA_AS_SINGLE_DEVICE
++#define CONFIG_VIDEO_BMP_RLE8
++#define CONFIG_IMX_HDMI
++
++#undef CONFIG_SPLASH_SCREEN
++#undef CONFIG_SPLASH_SCREEN_ALIGN
++#define CONFIG_BMP_16BPP
++#undef CONFIG_CMD_BMP
++#define CONFIG_CONSOLE_MUX
++#endif
++
++/* USB Configs */
++#define CONFIG_CMD_USB
++#ifdef CONFIG_CMD_USB
++#define CONFIG_CMD_FAT
++#define CONFIG_USB_EHCI
++#define CONFIG_USB_EHCI_MX6
++#define CONFIG_EHCI_IS_TDI
++#define CONFIG_USB_STORAGE
++#define CONFIG_USB_HOST_ETHER
++#define CONFIG_USB_ETHER_ASIX
++#define CONFIG_USB_ETHER_SMSC95XX
++#define CONFIG_MXC_USB_PORT     1
++#define CONFIG_MXC_USB_PORTSC   (PORT_PTS_UTMI | PORT_PTS_PTW)
++#define CONFIG_MXC_USB_FLAGS    0
++#define CONFIG_USB_KEYBOARD
++#define CONFIG_SYS_USB_EVENT_POLL
++#define CONFIG_PREBOOT "usb start"
++#endif
++
++#define CONFIG_SYS_CONSOLE_IS_IN_ENV
++
++#define CONFIG_EXTRA_ENV_SETTINGS \
++	"script=boot.scr\0" \
++	"bootfile=uImage\0" \
++	"bootenv=uEnv.txt\0" \
++	"console=ttymxc0\0" \
++	"stdin=serial,usbkbd\0" \
++	"stdout=serial,vga\0" \
++	"stderr=serial,vga\0" \
++	"splashpos=m,m\0" \
++	"fdt_high=0xffffffff\0" \
++	"initrd_high=0xffffffff\0" \
++	"fdt_addr=0x11000000\0" \
++	"boot_fdt=no\0" \
++        "ip_dyn=yes\0" \
++        "mmcdev=" __stringify(CONFIG_SYS_MMC_ENV_DEV) "\0" \
++        "mmcpart=1\0" \
++        "mmcroot=/dev/mmcblk0p2 rootwait rw\0" \
++        "update_sd_firmware_filename=u-boot.imx\0" \
++        "update_sd_firmware=" \
++                "if test ${ip_dyn} = yes; then " \
++                        "setenv get_cmd dhcp; " \
++                "else " \
++                        "setenv get_cmd tftp; " \
++                "fi; " \
++                "if mmc dev ${mmcdev}; then "   \
++                        "if ${get_cmd} ${update_sd_firmware_filename}; then " \
++                                "setexpr fw_sz ${filesize} / 0x200; " \
++                                "setexpr fw_sz ${fw_sz} + 1; "  \
++                                "mmc write ${loadaddr} 0x2 ${fw_sz}; " \
++                        "fi; "  \
++                "fi\0" \
++        "mmcargs=setenv bootargs console=${console},${baudrate} " \
++                "root=${mmcroot}\0" \
++        "fatloadbootscript=" \
++                "fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
++        "ext2loadbootscript=" \
++                "ext2load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
++        "bootscript=echo Running bootscript from mmc ...; " \
++                "source\0" \
++        "fatloadbootenv=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootenv}\0" \
++        "fatloadbootfile=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootfile}\0" \
++        "fatloadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" \
++        "ext2loadbootenv=ext2load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootenv}\0" \
++        "ext2loadbootfile=ext2load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootfile}\0" \
++        "ext2loadfdt=ext2load mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" \
++        "importbootenv=echo Importing environment from mmc${mmcdev} ...; " \
++                "env import -t ${loadaddr} ${filesize}\0" \
++        "fatmmcboot=echo Booting from mmc ...; " \
++                "run mmcargs; " \
++                "if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
++                        "if run fatloadfdt; then " \
++                                "if test ${bootfile} = zImage; then " \
++                                	"bootz ${loadaddr} - ${fdt_addr}; " \
++                                "else " \
++                                	"bootm ${loadaddr} - ${fdt_addr}; " \
++                                "fi; " \
++                        "else " \
++                                "if test ${boot_fdt} = try; then " \
++                                	"if test ${bootfile} = zImage; then " \
++                                		"bootz; " \
++                                	"else " \
++                                		"bootm; " \
++                                	"fi; " \
++                                "else " \
++                                        "echo WARN: Cannot load the DT; " \
++                                "fi; " \
++                        "fi; " \
++                "else " \
++                        "if test ${bootfile} = zImage; then " \
++                        	"bootz; " \
++                        "else " \
++                        	"bootm; " \
++                        "fi; " \
++                "fi;\0" \
++        "ext2mmcboot=echo Booting from mmc ...; " \
++                "run mmcargs; " \
++                "if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
++                        "if run ext2loadfdt; then " \
++                                "if test ${bootfile} = zImage; then " \
++                                	"bootz ${loadaddr} - ${fdt_addr}; " \
++                                "else " \
++                                	"bootm ${loadaddr} - ${fdt_addr}; " \
++                                "fi; " \
++                        "else " \
++                                "if test ${boot_fdt} = try; then " \
++                                	"if test ${bootfile} = zImage; then " \
++                                		"bootz; " \
++                                	"else " \
++                                		"bootm; " \
++                                	"fi; " \
++                                "else " \
++                                        "echo WARN: Cannot load the DT; " \
++                                "fi; " \
++                        "fi; " \
++                "else " \
++                        "if test ${bootfile} = zImage; then " \
++                        	"bootz; " \
++                        "else " \
++                        	"bootm; " \
++                        "fi; " \
++                "fi;\0" \
++        "netargs=setenv bootargs console=${console},${baudrate} " \
++                "root=/dev/nfs " \
++        "ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
++        "netboot=echo Booting from net ...; " \
++                "if test ${bootfile} = zImage; then " \
++                        "setenv realfile zImage; " \
++                "else " \
++                        "setenv realfile uImage; " \
++                "fi; " \
++                "run netargs; " \
++                "if test ${ip_dyn} = yes; then " \
++                        "setenv get_cmd dhcp; " \
++                "else " \
++                        "setenv get_cmd tftp; " \
++                "fi; " \
++                "${get_cmd} ${bootfile}; " \
++                "if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
++                        "if ${get_cmd} ${fdt_addr} ${fdt_file}; then " \
++                                "if test ${realfile} = zImage; then " \
++                                	"bootz ${loadaddr} - ${fdt_addr}; " \
++                                "else " \
++                                	"bootm ${loadaddr} - ${fdt_addr}; " \
++                                "fi; " \
++                        "else " \
++                                "if test ${boot_fdt} = try; then " \
++                                	"if test ${bootfile} = zImage; then " \
++                                		"bootz; " \
++                                	"else " \
++                                		"bootm; " \
++                                	"fi; " \
++                                "else " \
++                                        "echo WARN: Cannot load the DT; " \
++                                "fi; " \
++                        "fi; " \
++                "else " \
++                        "if test ${bootfile} = zImage; then " \
++                        	"bootz; " \
++                        "else " \
++                        	"bootm; " \
++                        "fi; " \
++                "fi;\0"
++
++#define CONFIG_BOOTCOMMAND \
++	   "mmc dev ${mmcdev}; if mmc rescan; then " \
++		   "if run ext2loadbootscript; then " \
++			   "run bootscript; " \
++		   "elif run fatloadbootscript; then " \
++			   "run bootscript; " \
++		   "else " \
++			   "if run ext2loadbootenv || run fatloadbootenv; then " \
++				   "run importbootenv; " \
++			   "fi; " \
++			   "if run ext2loadbootfile; then " \
++				   "run ext2mmcboot; " \
++			   "elif run fatloadbootfile; then " \
++				   "run fatmmcboot; " \
++			   "else run netboot; " \
++			   "fi; " \
++		   "fi; " \
++	   "else run netboot; fi"
++
++/* Miscellaneous configurable options */
++#define CONFIG_SYS_LONGHELP
++#define CONFIG_SYS_HUSH_PARSER
++#define CONFIG_SYS_PROMPT	       "C1 U-Boot > "
++#define CONFIG_AUTO_COMPLETE
++#define CONFIG_SYS_CBSIZE		1024
++
++/* Print Buffer Size */
++#define CONFIG_SYS_PBSIZE (CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)
++#define CONFIG_SYS_MAXARGS	       16
++#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE
++
++#define CONFIG_SYS_LOAD_ADDR		CONFIG_LOADADDR
++#define CONFIG_SYS_HZ			1000
++
++#define CONFIG_CMDLINE_EDITING
++
++/* Physical Memory Map */
++#define CONFIG_NR_DRAM_BANKS		1
++#define PHYS_SDRAM			MMDC0_ARB_BASE_ADDR
++
++#define CONFIG_SYS_SDRAM_BASE		PHYS_SDRAM
++#define CONFIG_SYS_INIT_RAM_ADDR	IRAM_BASE_ADDR
++#define CONFIG_SYS_INIT_RAM_SIZE	IRAM_SIZE
++
++#define CONFIG_SYS_INIT_SP_OFFSET \
++	(CONFIG_SYS_INIT_RAM_SIZE - GENERATED_GBL_DATA_SIZE)
++#define CONFIG_SYS_INIT_SP_ADDR \
++	(CONFIG_SYS_INIT_RAM_ADDR + CONFIG_SYS_INIT_SP_OFFSET)
++
++/* FLASH and environment organization */
++#define CONFIG_SYS_NO_FLASH
++
++#define CONFIG_ENV_SIZE			(8 * 1024)
++
++#define CONFIG_ENV_IS_IN_MMC
++#define CONFIG_ENV_OFFSET		(6 * 64 * 1024)
++#define CONFIG_SYS_MMC_ENV_DEV		0
++
++#define CONFIG_OF_LIBFDT
++#define CONFIG_CMD_BOOTZ
++
++#ifndef CONFIG_SYS_DCACHE_OFF
++#define CONFIG_CMD_CACHE
++#endif
++
++#endif			       /* __CONFIG_H * */
+diff -uNr u-boot-2013.10-rc4/include/configs/mx6_common.h u-boot-imx6/include/configs/mx6_common.h
+--- u-boot-2013.10-rc4/include/configs/mx6_common.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/include/configs/mx6_common.h	2014-12-17 09:31:34.682029124 +0000
+@@ -17,6 +17,7 @@
+ #ifndef __MX6_COMMON_H
+ #define __MX6_COMMON_H
+ 
++#define CONFIG_SYS_THUMB_BUILD
+ #define CONFIG_ARM_ERRATA_742230
+ #define CONFIG_ARM_ERRATA_743622
+ #define CONFIG_ARM_ERRATA_751472
+diff -uNr u-boot-2013.10-rc4/include/configs/mx6_cubox-i.h u-boot-imx6/include/configs/mx6_cubox-i.h
+--- u-boot-2013.10-rc4/include/configs/mx6_cubox-i.h	1970-01-01 01:00:00.000000000 +0100
++++ u-boot-imx6/include/configs/mx6_cubox-i.h	2014-12-17 09:42:14.821851888 +0000
+@@ -0,0 +1,364 @@
++/*
++ * Copyright (C) 2013 Freescale Semiconductor, Inc.
++ * Copyright (C) 2013 SolidRun ltd.
++ * Copyright (C) 2013 Jon Nettleton <jon.nettleton@gmail.com>
++ *
++ * Configuration settings for the SolidRun carrier-1 (c1) board.
++ *
++ * SPDX-License-Identifier:	GPL-2.0+
++ */
++
++#ifndef __CONFIG_H
++#define __CONFIG_H
++
++#include "mx6_common.h"
++#include <asm/arch/imx-regs.h>
++#include <asm/imx-common/gpio.h>
++#include <asm/sizes.h>
++
++#include "imx6_spl.h"
++
++#undef DEBUG
++
++#define CONFIG_MX6
++#define CONFIG_DISPLAY_CPUINFO
++#define CONFIG_DISPLAY_BOARDINFO
++
++#define CONFIG_CMDLINE_TAG
++#define CONFIG_SETUP_MEMORY_TAGS
++#define CONFIG_INITRD_TAG
++#define CONFIG_REVISION_TAG
++
++/* Size of malloc() pool */
++#define CONFIG_SYS_MALLOC_LEN		(8 * SZ_1M)
++
++#define CONFIG_BOARD_EARLY_INIT_F
++#define CONFIG_BOARD_LATE_INIT
++#define CONFIG_MXC_GPIO
++
++#define CONFIG_CMD_FUSE
++#ifdef CONFIG_CMD_FUSE
++#define CONFIG_MXC_OCOTP
++#endif
++
++#define CONFIG_MXC_UART
++#define CONFIG_MXC_UART_BASE		UART1_BASE
++
++/* allow to overwrite serial and ethaddr */
++#define CONFIG_ENV_OVERWRITE
++#define CONFIG_CONS_INDEX		1
++#define CONFIG_BAUDRATE			115200
++
++/* Command definition */
++#include <config_cmd_default.h>
++
++#undef CONFIG_CMD_IMLS
++#undef CONFIG_CMD_I2C
++
++#define CONFIG_CMD_BMODE
++#define CONFIG_CMD_SETEXPR
++#define CONFIG_CMD_MEMTEST
++
++#define CONFIG_BOOTDELAY		3
++
++#define CONFIG_SYS_MEMTEST_START	0x10000000
++#define CONFIG_SYS_MEMTEST_END		(CONFIG_SYS_MEMTEST_START + 500 * SZ_1M)
++
++#define CONFIG_LOADADDR			0x10800000
++/*#define CONFIG_SYS_TEXT_BASE		0x17800000*/
++
++#define CONFIG_SYS_L2_PL310
++#define CONFIG_SYS_PL310_BASE		0x00a02000
++
++/* SATA Configuration */
++#ifdef CONFIG_CMD_SATA
++#define CONFIG_DWC_AHSATA
++#define CONFIG_SYS_SATA_MAX_DEVICE      1
++#define CONFIG_DWC_AHSATA_PORT_ID       0
++#define CONFIG_DWC_AHSATA_BASE_ADDR     SATA_ARB_BASE_ADDR
++#define CONFIG_LBA48
++#define CONFIG_LIBATA
++#endif
++
++/* MMC Configuration */
++#define CONFIG_FSL_ESDHC
++#define CONFIG_FSL_USDHC
++#define CONFIG_SYS_FSL_USDHC_NUM	1
++#define CONFIG_SYS_FSL_ESDHC_ADDR	0
++
++#define CONFIG_MMC
++#define CONFIG_CMD_MMC
++#define CONFIG_GENERIC_MMC
++#define CONFIG_BOUNCE_BUFFER
++#define CONFIG_CMD_EXT2
++#define CONFIG_CMD_EXT4
++#define CONFIG_CMD_FAT
++#define CONFIG_DOS_PARTITION
++#define CONFIG_FS_EXT4
++#define CONFIG_FS_FAT
++#define CONFIG_CMD_FS_GENERIC
++
++/* Ethernet Configuration */
++#define CONFIG_FEC_MXC
++#ifdef CONFIG_FEC_MXC
++#define CONFIG_CMD_PING
++#define CONFIG_CMD_DHCP
++#define CONFIG_CMD_MII
++#define CONFIG_CMD_NET
++#define CONFIG_FEC_MXC
++#define CONFIG_MII
++#define IMX_FEC_BASE			ENET_BASE_ADDR
++#define CONFIG_FEC_XCV_TYPE		RGMII
++#define CONFIG_ETHPRIME			"FEC"
++#define CONFIG_PHYLIB
++#define CONFIG_PHY_ATHEROS
++#endif
++
++/* Framebuffer */
++#define CONFIG_VIDEO
++#ifdef CONFIG_VIDEO
++#define CONFIG_VIDEO_IPUV3
++#define CONFIG_IPUV3_CLK 260000000
++#define CONFIG_CFB_CONSOLE
++#define CONFIG_CFB_CONSOLE_ANSI
++#define CONFIG_VGA_AS_SINGLE_DEVICE
++#define CONFIG_VIDEO_BMP_RLE8
++#define CONFIG_IMX_HDMI
++
++#undef CONFIG_SPLASH_SCREEN
++#undef CONFIG_SPLASH_SCREEN_ALIGN
++#define CONFIG_BMP_16BPP
++#undef CONFIG_CMD_BMP
++#define CONFIG_CONSOLE_MUX
++#endif
++
++/* USB Configs */
++#define CONFIG_CMD_USB
++#ifdef CONFIG_CMD_USB
++#define CONFIG_USB_EHCI
++#define CONFIG_USB_EHCI_MX6
++#define CONFIG_EHCI_IS_TDI
++#define CONFIG_USB_STORAGE
++#define CONFIG_USB_HOST_ETHER
++#define CONFIG_USB_ETHER_ASIX
++#define CONFIG_USB_ETHER_SMSC95XX
++#define CONFIG_MXC_USB_PORT     1
++#define CONFIG_MXC_USB_PORTSC   (PORT_PTS_UTMI | PORT_PTS_PTW)
++#define CONFIG_MXC_USB_FLAGS    0
++#define CONFIG_USB_KEYBOARD
++#define CONFIG_SYS_USB_EVENT_POLL
++#define CONFIG_PREBOOT "usb start"
++#endif
++
++#define CONFIG_SYS_CONSOLE_IS_IN_ENV
++
++#define CONFIG_EXTRA_ENV_SETTINGS \
++        "script=boot.scr\0" \
++        "bootfile=auto\0" \
++        "bootenv=uEnv.txt\0" \
++        "boot_prefixes=/ /boot/\0" \
++        "console=ttymxc0\0" \
++        "stdin=serial,usbkbd\0" \
++        "stdout=serial,vga\0" \
++        "stderr=serial,vga\0" \
++        "splashpos=m,m\0" \
++        "fdt_high=0xffffffff\0" \
++        "initrd_high=0xffffffff\0" \
++        "fdt_addr=0x18000000\0" \
++        "boot_fdt=try\0" \
++        "ip_dyn=yes\0" \
++        "mmcdev=" __stringify(CONFIG_SYS_MMC_ENV_DEV) "\0" \
++        "mmcpart=1\0" \
++        "mmcroot=/dev/mmcblk0p2 rootwait rw\0" \
++        "update_sd_firmware_filename=u-boot.imx\0" \
++        "update_sd_firmware=" \
++                "if test ${ip_dyn} = yes; then " \
++                        "setenv get_cmd dhcp; " \
++                "else " \
++                        "setenv get_cmd tftp; " \
++                "fi; " \
++                "if mmc dev ${mmcdev}; then "   \
++                        "if ${get_cmd} ${update_sd_firmware_filename}; then " \
++                                "setexpr fw_sz ${filesize} / 0x200; " \
++                                "setexpr fw_sz ${fw_sz} + 1; "  \
++                                "mmc write ${loadaddr} 0x2 ${fw_sz}; " \
++                        "fi; "  \
++                "fi;\0" \
++        "mmcargs=setenv bootargs console=${console},${baudrate} " \
++                "root=${mmcroot};\0" \
++        "loadbootscript=" \
++                "load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${file_prefix}${script};\0" \
++        "bootscript=echo Running bootscript from mmc ...; " \
++                "source;\0" \
++        "autodetectfdt=if test ${cpu} = 6SOLO || test ${cpu} = 6DL; then " \
++                        "setenv fdt_prefix imx6dl; " \
++                "else " \
++                        "setenv fdt_prefix imx6q; " \
++                "fi; " \
++                "if test ${board} = mx6-cubox-i; then " \
++                        "setenv fdt_file ${fdt_prefix}-cubox-i.dtb; " \
++                "else " \
++                        "setenv fdt_file ${fdt_prefix}-hummingboard.dtb; " \
++                "fi;\0" \
++        "loadbootenv=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${file_prefix}${bootenv};\0" \
++        "loadfdt=if test ${boottype} = mmc; then " \
++                     "load mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${file_prefix}${fdt_file}; " \
++		"else " \
++                     "${get_cmd} ${fdt_addr} ${fdt_file}; " \
++		"fi;\0 " \
++        "loadramdisk=if test ${boottype} = mmc; then " \
++                     "load mmc ${mmcdev}:${mmcpart} ${ramdisk_addr} ${file_prefix}${ramdisk_file}; " \
++		"else " \
++                     "${get_cmd} ${ramdisk_addr} ${ramdisk_file}; " \
++		"fi;\0 " \
++        "loadbootfile=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${file_prefix}${bootfile};\0" \
++        "importbootenv=echo Importing environment from mmc${mmcdev} ...; " \
++                "env import -t ${loadaddr} ${filesize};\0" \
++        "autoboot=echo Booting ${boot_file}; " \
++		"if test ${boot_file} = zImage; then " \
++		    "bootz ${loadaddr} ${ramdisk_addr} ${fdt_addr}; " \
++		"else " \
++		    "bootm ${loadaddr} ${ramdisk_addr} ${fdt_addr}; " \
++		"fi;\0 " \
++	"bootit=setenv boot_file ${bootfile}; " \
++                "if test -n ${ramdisk_file}; then " \
++		    "if run loadramdisk; then " \
++			"echo Loaded ${ramdisk_file}; " \
++		    "else " \
++			"setenv ramdisk_addr -; " \
++		    "fi; " \
++		"else " \
++		    "setenv ramdisk_addr -; " \
++                "fi; " \
++                "if test ${boot_file} = zImage; then " \
++                    "if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
++                        "if run loadfdt; then " \
++			    "echo Loaded ${fdt_file}; " \
++                        "else " \
++			    "setenv fdt_addr; " \
++                            "if test ${boot_fdt} = try; then " \
++                                  "echo WARN: Cannot load the DTB and boot file is type zImage;" \
++                                  "echo if you have not appended a dtb to the file it may;" \
++                                  "echo hang after displaying Starting kernel...;" \
++                                  "echo ;" \
++                            "else " \
++                                  "echo WARN: Cannot load the DT; " \
++                            "fi; " \
++                        "fi; " \
++                    "else " \
++			"setenv fdt_addr; "\
++                    "fi; " \
++                "else " \
++			"setenv fdt_addr; " \
++                "fi; " \
++                "run autoboot;\0 " \
++        "mmcboot=echo Booting from mmc ...; " \
++                "run mmcargs; " \
++                "setenv boottype mmc; " \
++                "run bootit;\0 " \
++        "netargs=setenv bootargs console=${console},${baudrate} " \
++                "root=/dev/nfs ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp;\0" \
++        "netboot=echo Booting from net ...; " \
++                "run netargs; " \
++                "setenv boottype net; " \
++                "if test ${ip_dyn} = yes; then " \
++                    "setenv get_cmd dhcp; " \
++                "else " \
++                    "setenv get_cmd tftp; " \
++                "fi; " \
++                "if test ${bootfile} = auto; then " \
++                     "setenv bootfile zImage; " \
++                     "if ${get_cmd} ${bootfile}; then " \
++                         "run bootit; " \
++                     "else " \
++                         "setenv bootfile uImage; " \
++                     "fi; " \
++                " fi; " \
++                "${get_cmd} ${bootfile}; " \
++                "run bootit;\0 "
++
++#define CONFIG_BOOTCOMMAND \
++	   "mmc dev ${mmcdev}; if mmc rescan; then " \
++               "for prefix in ${boot_prefixes}; do " \
++		   "setenv file_prefix ${prefix}; " \
++		   "if run loadbootscript; then " \
++			   "run bootscript; " \
++		   "else " \
++			   "run autodetectfdt; " \
++			   "if run loadbootenv; then " \
++				   "run importbootenv; " \
++			   "fi; " \
++			   "if test -n ${serverip}; then " \
++				   "run netboot; " \
++			   "fi; " \
++                           "if test ${bootfile} = auto; then " \
++                                   "setenv origbootfile auto; " \
++                                   "setenv bootfile zImage; " \
++                                   "if run loadbootfile; then " \
++                                        "run mmcboot; " \
++                                   "else " \
++                                        "setenv bootfile uImage; " \
++                                   "fi; " \
++                           "fi; " \
++			   "if run loadbootfile; then " \
++				   "run mmcboot; " \
++			   "else " \
++				   "setenv bootfile ${origbootfile}; " \
++			   "fi; " \
++		   "fi; " \
++	       "done; " \
++	   "fi; " \
++	   "run netboot;\0 "
++
++/* Miscellaneous configurable options */
++#define CONFIG_SYS_LONGHELP
++#define CONFIG_SYS_HUSH_PARSER
++
++#ifndef __ASSEMBLY__
++extern char *config_sys_prompt;
++#endif
++#define CONFIG_SYS_PROMPT_MAX_CHARS	32
++#define CONFIG_SYS_PROMPT		config_sys_prompt
++#define CONFIG_AUTO_COMPLETE
++#define CONFIG_SYS_CBSIZE		1024
++
++/* Print Buffer Size */
++#define CONFIG_SYS_PBSIZE (CONFIG_SYS_CBSIZE + CONFIG_SYS_PROMPT_MAX_CHARS + 16)
++#define CONFIG_SYS_MAXARGS	       16
++#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE
++
++#define CONFIG_SYS_LOAD_ADDR		CONFIG_LOADADDR
++#define CONFIG_SYS_HZ			1000
++
++#define CONFIG_CMDLINE_EDITING
++
++/* Physical Memory Map */
++#define CONFIG_NR_DRAM_BANKS		1
++#define PHYS_SDRAM			MMDC0_ARB_BASE_ADDR
++
++#define CONFIG_SYS_SDRAM_BASE		PHYS_SDRAM
++#define CONFIG_SYS_INIT_RAM_ADDR	IRAM_BASE_ADDR
++#define CONFIG_SYS_INIT_RAM_SIZE	IRAM_SIZE
++
++#define CONFIG_SYS_INIT_SP_OFFSET \
++	(CONFIG_SYS_INIT_RAM_SIZE - GENERATED_GBL_DATA_SIZE)
++#define CONFIG_SYS_INIT_SP_ADDR \
++	(CONFIG_SYS_INIT_RAM_ADDR + CONFIG_SYS_INIT_SP_OFFSET)
++
++/* FLASH and environment organization */
++#define CONFIG_SYS_NO_FLASH
++
++#define CONFIG_ENV_SIZE			(8 * 1024)
++
++#define CONFIG_ENV_IS_IN_MMC
++#define CONFIG_ENV_OFFSET		(6 * 64 * 1024)
++#define CONFIG_SYS_MMC_ENV_DEV		0
++
++#define CONFIG_OF_LIBFDT
++#define CONFIG_CMD_BOOTZ
++
++#ifndef CONFIG_SYS_DCACHE_OFF
++#define CONFIG_CMD_CACHE
++#endif
++
++#endif			       /* __CONFIG_H * */
+diff -uNr u-boot-2013.10-rc4/include/configs/vexpress_ca15_tc2.h u-boot-imx6/include/configs/vexpress_ca15_tc2.h
+--- u-boot-2013.10-rc4/include/configs/vexpress_ca15_tc2.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/include/configs/vexpress_ca15_tc2.h	2014-12-17 09:31:34.706028538 +0000
+@@ -15,6 +15,9 @@
+ #include "vexpress_common.h"
+ #define CONFIG_BOOTP_VCI_STRING     "U-boot.armv7.vexpress_ca15x2_tc2"
+ 
+-#define CONFIG_SYS_CLK_FREQ 24000000
++#define CONFIG_SYSFLAGS_ADDR	0x1c010030
++#define CONFIG_SMP_PEN_ADDR	CONFIG_SYSFLAGS_ADDR
++
++#define CONFIG_ARMV7_VIRT
+ 
+ #endif
+diff -uNr u-boot-2013.10-rc4/include/configs/wandboard.h u-boot-imx6/include/configs/wandboard.h
+--- u-boot-2013.10-rc4/include/configs/wandboard.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/include/configs/wandboard.h	2014-12-17 09:43:09.748424100 +0000
+@@ -94,8 +94,6 @@
+ #define CONFIG_SPLASH_SCREEN
+ #define CONFIG_SPLASH_SCREEN_ALIGN
+ #define CONFIG_BMP_16BPP
+-#define CONFIG_VIDEO_LOGO
+-#define CONFIG_VIDEO_BMP_LOGO
+ #define CONFIG_IPUV3_CLK 260000000
+ #define CONFIG_IMX_HDMI
+ 
+diff -uNr u-boot-2013.10-rc4/include/image.h u-boot-imx6/include/image.h
+--- u-boot-2013.10-rc4/include/image.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/include/image.h	2014-12-17 09:31:34.718028244 +0000
+@@ -323,6 +323,15 @@
+ 
+ extern bootm_headers_t images;
+ 
++struct zimage_header {
++	uint32_t        code[9];
++	uint32_t        zi_magic;
++	uint32_t        zi_start;
++	uint32_t        zi_end;
++};
++
++#define LINUX_ARM_ZIMAGE_MAGIC  0x016f2818
++
+ /*
+  * Some systems (for example LWMON) have very short watchdog periods;
+  * we must make sure to split long operations like memmove() or
+diff -uNr u-boot-2013.10-rc4/include/netdev.h u-boot-imx6/include/netdev.h
+--- u-boot-2013.10-rc4/include/netdev.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/include/netdev.h	2014-12-17 09:31:34.734027854 +0000
+@@ -48,7 +48,7 @@
+ int ethoc_initialize(u8 dev_num, int base_addr);
+ int fec_initialize (bd_t *bis);
+ int fecmxc_initialize(bd_t *bis);
+-int fecmxc_initialize_multi(bd_t *bis, int dev_id, int phy_id, uint32_t addr);
++int fecmxc_initialize_multi(bd_t *bis, int dev_id, uint32_t phy_mask, uint32_t addr);
+ int ftgmac100_initialize(bd_t *bits);
+ int ftmac100_initialize(bd_t *bits);
+ int ftmac110_initialize(bd_t *bits);
+diff -uNr u-boot-2013.10-rc4/include/spl.h u-boot-imx6/include/spl.h
+--- u-boot-2013.10-rc4/include/spl.h	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/include/spl.h	2014-12-17 09:31:34.742027658 +0000
+@@ -15,11 +15,21 @@
+ #define MMCSD_MODE_UNDEFINED	0
+ #define MMCSD_MODE_RAW		1
+ #define MMCSD_MODE_FAT		2
++#define MMCSD_MODE		3
++#define SATA_MODE		4
++ 
++
+ 
+ struct spl_image_info {
+ 	const char *name;
++	const char *os_image;
++	const char *second_stage;
++	const char *args;
++	int have_fdt;
+ 	u8 os;
+ 	u32 load_addr;
++	u32 args_addr;
++	u32 args_size;
+ 	u32 entry_point;
+ 	u32 size;
+ 	u32 flags;
+@@ -60,6 +70,9 @@
+ /* Ethernet SPL functions */
+ void spl_net_load_image(const char *device);
+ 
++/* SATA SPL functions */
++void spl_sata_load_image(void);
++
+ #ifdef CONFIG_SPL_BOARD_INIT
+ void spl_board_init(void);
+ #endif
+diff -uNr u-boot-2013.10-rc4/lib/hashtable.c u-boot-imx6/lib/hashtable.c
+--- u-boot-2013.10-rc4/lib/hashtable.c	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/lib/hashtable.c	2014-12-17 09:31:34.758027267 +0000
+@@ -907,7 +907,7 @@
+ 			printf("himport_r: can't insert \"%s=%s\" into hash table\n",
+ 				name, value);
+ 
+-		debug("INSERT: table %p, filled %d/%d rv %p ==> name=\"%s\" value=\"%s\"\n",
++		debug("INSERT: table %p, filled %d/%d rv %p ==> name=\"%s\" value=\"%.128s\"\n",
+ 			htab, htab->filled, htab->size,
+ 			rv, name, value);
+ 	} while ((dp < data + size) && *dp);	/* size check needed for text */
+diff -uNr u-boot-2013.10-rc4/snapshot.commit u-boot-imx6/snapshot.commit
+--- u-boot-2013.10-rc4/snapshot.commit	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/snapshot.commit	2014-12-17 09:31:34.786026583 +0000
+@@ -1 +1 @@
+-0c5274e6f3231a3a28dafc1204b3f71a3534c520  Wed, 2 Oct 2013 14:42:08 -0400
++$Format:%H  %cD$
+diff -uNr u-boot-2013.10-rc4/spl/Makefile u-boot-imx6/spl/Makefile
+--- u-boot-2013.10-rc4/spl/Makefile	2013-10-02 19:42:08.000000000 +0100
++++ u-boot-imx6/spl/Makefile	2014-12-17 09:31:34.786026583 +0000
+@@ -82,10 +82,12 @@
+ LIBS-$(CONFIG_SPL_I2C_SUPPORT) += drivers/i2c/libi2c.o
+ LIBS-$(CONFIG_SPL_GPIO_SUPPORT) += drivers/gpio/libgpio.o
+ LIBS-$(CONFIG_SPL_MMC_SUPPORT) += drivers/mmc/libmmc.o
++LIBS-$(CONFIG_SPL_SATA_SUPPORT) += drivers/block/libblock.o
+ LIBS-$(CONFIG_SPL_SERIAL_SUPPORT) += drivers/serial/libserial.o
+ LIBS-$(CONFIG_SPL_SPI_FLASH_SUPPORT) += drivers/mtd/spi/libspi_flash.o
+ LIBS-$(CONFIG_SPL_SPI_SUPPORT) += drivers/spi/libspi.o
+ LIBS-$(CONFIG_SPL_FAT_SUPPORT) += fs/fat/libfat.o
++LIBS-$(CONFIG_SPL_EXT_SUPPORT) += fs/ext4/libext4fs.o
+ LIBS-$(CONFIG_SPL_LIBGENERIC_SUPPORT) += lib/libgeneric.o
+ LIBS-$(CONFIG_SPL_POWER_SUPPORT) += drivers/power/libpower.o \
+ 	drivers/power/pmic/libpmic.o
+@@ -100,6 +102,7 @@
+ LIBS-$(CONFIG_SPL_MUSB_NEW_SUPPORT) += drivers/usb/musb-new/libusb_musb-new.o
+ LIBS-$(CONFIG_SPL_USBETH_SUPPORT) += drivers/usb/gadget/libusb_gadget.o
+ LIBS-$(CONFIG_SPL_WATCHDOG_SUPPORT) += drivers/watchdog/libwatchdog.o
++LIBS-$(CONFIG_SPL_OF_LIBFDT) += lib/libfdt/libfdt.o
+ 
+ ifneq ($(CONFIG_OMAP_COMMON),)
+ LIBS-y += $(CPUDIR)/omap-common/libomap-common.o
+Binary files u-boot-2013.10-rc4/tools/logos/solidrun.bmp and u-boot-imx6/tools/logos/solidrun.bmp differ
